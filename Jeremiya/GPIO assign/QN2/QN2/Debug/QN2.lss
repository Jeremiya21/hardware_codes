
QN2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000013d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003187  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002679  00000000  00000000  00004753  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000eb3  00000000  00000000  00006dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003cc  00000000  00000000  00007c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000136e  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006c6  00000000  00000000  000093ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00009a80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	0e 94 71 06 	call	0xce2	; 0xce2 <main>
      a0:	0c 94 bd 09 	jmp	0x137a	; 0x137a <_exit>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
      b0:	0e 94 33 08 	call	0x1066	; 0x1066 <system_init>
}
      b4:	00 00       	nop
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	08 95       	ret

000000bc <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	00 d0       	rcall	.+0      	; 0xc2 <PORTD_set_pin_level+0x6>
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	89 83       	std	Y+1, r24	; 0x01
      c8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
      ca:	8a 81       	ldd	r24, Y+2	; 0x02
      cc:	88 23       	and	r24, r24
      ce:	a9 f0       	breq	.+42     	; 0xfa <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
      d0:	8c e0       	ldi	r24, 0x0C	; 12
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	2c e0       	ldi	r18, 0x0C	; 12
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	f9 01       	movw	r30, r18
      da:	21 81       	ldd	r18, Z+1	; 0x01
      dc:	62 2f       	mov	r22, r18
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	42 2f       	mov	r20, r18
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	02 c0       	rjmp	.+4      	; 0xee <PORTD_set_pin_level+0x32>
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	4a 95       	dec	r20
      f0:	e2 f7       	brpl	.-8      	; 0xea <PORTD_set_pin_level+0x2e>
      f2:	26 2b       	or	r18, r22
      f4:	fc 01       	movw	r30, r24
      f6:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
      f8:	15 c0       	rjmp	.+42     	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
      fa:	8c e0       	ldi	r24, 0x0C	; 12
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	2c e0       	ldi	r18, 0x0C	; 12
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	21 81       	ldd	r18, Z+1	; 0x01
     106:	62 2f       	mov	r22, r18
     108:	29 81       	ldd	r18, Y+1	; 0x01
     10a:	42 2f       	mov	r20, r18
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	02 c0       	rjmp	.+4      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
     114:	22 0f       	add	r18, r18
     116:	33 1f       	adc	r19, r19
     118:	4a 95       	dec	r20
     11a:	e2 f7       	brpl	.-8      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     11c:	20 95       	com	r18
     11e:	26 23       	and	r18, r22
     120:	fc 01       	movw	r30, r24
     122:	21 83       	std	Z+1, r18	; 0x01
	}
}
     124:	00 00       	nop
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	1f 92       	push	r1
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     13c:	69 81       	ldd	r22, Y+1	; 0x01
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
     144:	00 00       	nop
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	1f 92       	push	r1
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     15a:	69 81       	ldd	r22, Y+1	; 0x01
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
     162:	00 00       	nop
     164:	0f 90       	pop	r0
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	1f 92       	push	r1
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     178:	69 81       	ldd	r22, Y+1	; 0x01
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
     180:	00 00       	nop
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	1f 92       	push	r1
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(3, level);
     196:	69 81       	ldd	r22, Y+1	; 0x01
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
     19e:	00 00       	nop
     1a0:	0f 90       	pop	r0
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <function>:
 *  Author: jeremiya
 */ 
#include <atmel_start.h>
#include "myfunction.h"
void function(enum LED led,uint16_t delay_1)
{
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	c3 57       	subi	r28, 0x73	; 115
     1b6:	d1 09       	sbc	r29, r1
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	de bf       	out	0x3e, r29	; 62
     1bc:	9e 01       	movw	r18, r28
     1be:	2f 58       	subi	r18, 0x8F	; 143
     1c0:	3f 4f       	sbci	r19, 0xFF	; 255
     1c2:	f9 01       	movw	r30, r18
     1c4:	80 83       	st	Z, r24
     1c6:	ce 01       	movw	r24, r28
     1c8:	8e 58       	subi	r24, 0x8E	; 142
     1ca:	9f 4f       	sbci	r25, 0xFF	; 255
     1cc:	fc 01       	movw	r30, r24
     1ce:	60 83       	st	Z, r22
     1d0:	71 83       	std	Z+1, r23	; 0x01
	if(led==R)
     1d2:	ce 01       	movw	r24, r28
     1d4:	8f 58       	subi	r24, 0x8F	; 143
     1d6:	9f 4f       	sbci	r25, 0xFF	; 255
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	88 23       	and	r24, r24
     1de:	09 f0       	breq	.+2      	; 0x1e2 <function+0x3a>
     1e0:	01 c1       	rjmp	.+514    	; 0x3e4 <function+0x23c>
	{
		R0_MCU_set_level(true);
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	0e 94 98 00 	call	0x130	; 0x130 <R0_MCU_set_level>
		_delay_ms(delay_1);
     1e8:	ce 01       	movw	r24, r28
     1ea:	8e 58       	subi	r24, 0x8E	; 142
     1ec:	9f 4f       	sbci	r25, 0xFF	; 255
     1ee:	fc 01       	movw	r30, r24
     1f0:	80 81       	ld	r24, Z
     1f2:	91 81       	ldd	r25, Z+1	; 0x01
     1f4:	cc 01       	movw	r24, r24
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	8d 83       	std	Y+5, r24	; 0x05
     208:	9e 83       	std	Y+6, r25	; 0x06
     20a:	af 83       	std	Y+7, r26	; 0x07
     20c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     20e:	24 e5       	ldi	r18, 0x54	; 84
     210:	35 e5       	ldi	r19, 0x55	; 85
     212:	40 e5       	ldi	r20, 0x50	; 80
     214:	54 e4       	ldi	r21, 0x44	; 68
     216:	6d 81       	ldd	r22, Y+5	; 0x05
     218:	7e 81       	ldd	r23, Y+6	; 0x06
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 85       	ldd	r25, Y+8	; 0x08
     21e:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	8b a7       	std	Y+43, r24	; 0x2b
     228:	9c a7       	std	Y+44, r25	; 0x2c
     22a:	ad a7       	std	Y+45, r26	; 0x2d
     22c:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	40 e8       	ldi	r20, 0x80	; 128
     234:	5f e3       	ldi	r21, 0x3F	; 63
     236:	6b a5       	ldd	r22, Y+43	; 0x2b
     238:	7c a5       	ldd	r23, Y+44	; 0x2c
     23a:	8d a5       	ldd	r24, Y+45	; 0x2d
     23c:	9e a5       	ldd	r25, Y+46	; 0x2e
     23e:	0e 94 65 08 	call	0x10ca	; 0x10ca <__cmpsf2>
     242:	88 23       	and	r24, r24
     244:	2c f4       	brge	.+10     	; 0x250 <function+0xa8>
		__ticks = 1;
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	8f a7       	std	Y+47, r24	; 0x2f
     24c:	98 ab       	std	Y+48, r25	; 0x30
     24e:	3f c0       	rjmp	.+126    	; 0x2ce <function+0x126>
	else if (__tmp > 65535)
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	3f ef       	ldi	r19, 0xFF	; 255
     254:	4f e7       	ldi	r20, 0x7F	; 127
     256:	57 e4       	ldi	r21, 0x47	; 71
     258:	6b a5       	ldd	r22, Y+43	; 0x2b
     25a:	7c a5       	ldd	r23, Y+44	; 0x2c
     25c:	8d a5       	ldd	r24, Y+45	; 0x2d
     25e:	9e a5       	ldd	r25, Y+46	; 0x2e
     260:	0e 94 23 09 	call	0x1246	; 0x1246 <__gesf2>
     264:	18 16       	cp	r1, r24
     266:	4c f5       	brge	.+82     	; 0x2ba <function+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	40 e2       	ldi	r20, 0x20	; 32
     26e:	51 e4       	ldi	r21, 0x41	; 65
     270:	6d 81       	ldd	r22, Y+5	; 0x05
     272:	7e 81       	ldd	r23, Y+6	; 0x06
     274:	8f 81       	ldd	r24, Y+7	; 0x07
     276:	98 85       	ldd	r25, Y+8	; 0x08
     278:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     27c:	dc 01       	movw	r26, r24
     27e:	cb 01       	movw	r24, r22
     280:	bc 01       	movw	r22, r24
     282:	cd 01       	movw	r24, r26
     284:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     288:	dc 01       	movw	r26, r24
     28a:	cb 01       	movw	r24, r22
     28c:	8f a7       	std	Y+47, r24	; 0x2f
     28e:	98 ab       	std	Y+48, r25	; 0x30
     290:	0f c0       	rjmp	.+30     	; 0x2b0 <function+0x108>
     292:	83 e5       	ldi	r24, 0x53	; 83
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	89 ab       	std	Y+49, r24	; 0x31
     298:	9a ab       	std	Y+50, r25	; 0x32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     29a:	89 a9       	ldd	r24, Y+49	; 0x31
     29c:	9a a9       	ldd	r25, Y+50	; 0x32
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <function+0xf6>
     2a2:	89 ab       	std	Y+49, r24	; 0x31
     2a4:	9a ab       	std	Y+50, r25	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a6:	8f a5       	ldd	r24, Y+47	; 0x2f
     2a8:	98 a9       	ldd	r25, Y+48	; 0x30
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	8f a7       	std	Y+47, r24	; 0x2f
     2ae:	98 ab       	std	Y+48, r25	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b0:	8f a5       	ldd	r24, Y+47	; 0x2f
     2b2:	98 a9       	ldd	r25, Y+48	; 0x30
     2b4:	89 2b       	or	r24, r25
     2b6:	69 f7       	brne	.-38     	; 0x292 <function+0xea>
     2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <function+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ba:	6b a5       	ldd	r22, Y+43	; 0x2b
     2bc:	7c a5       	ldd	r23, Y+44	; 0x2c
     2be:	8d a5       	ldd	r24, Y+45	; 0x2d
     2c0:	9e a5       	ldd	r25, Y+46	; 0x2e
     2c2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     2c6:	dc 01       	movw	r26, r24
     2c8:	cb 01       	movw	r24, r22
     2ca:	8f a7       	std	Y+47, r24	; 0x2f
     2cc:	98 ab       	std	Y+48, r25	; 0x30
     2ce:	8f a5       	ldd	r24, Y+47	; 0x2f
     2d0:	98 a9       	ldd	r25, Y+48	; 0x30
     2d2:	8b ab       	std	Y+51, r24	; 0x33
     2d4:	9c ab       	std	Y+52, r25	; 0x34
     2d6:	8b a9       	ldd	r24, Y+51	; 0x33
     2d8:	9c a9       	ldd	r25, Y+52	; 0x34
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <function+0x132>
     2de:	8b ab       	std	Y+51, r24	; 0x33
     2e0:	9c ab       	std	Y+52, r25	; 0x34
		R0_MCU_set_level(false);
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	0e 94 98 00 	call	0x130	; 0x130 <R0_MCU_set_level>
		_delay_ms(delay_1);
     2e8:	ce 01       	movw	r24, r28
     2ea:	8e 58       	subi	r24, 0x8E	; 142
     2ec:	9f 4f       	sbci	r25, 0xFF	; 255
     2ee:	fc 01       	movw	r30, r24
     2f0:	80 81       	ld	r24, Z
     2f2:	91 81       	ldd	r25, Z+1	; 0x01
     2f4:	cc 01       	movw	r24, r24
     2f6:	a0 e0       	ldi	r26, 0x00	; 0
     2f8:	b0 e0       	ldi	r27, 0x00	; 0
     2fa:	bc 01       	movw	r22, r24
     2fc:	cd 01       	movw	r24, r26
     2fe:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     302:	dc 01       	movw	r26, r24
     304:	cb 01       	movw	r24, r22
     306:	8d 8f       	std	Y+29, r24	; 0x1d
     308:	9e 8f       	std	Y+30, r25	; 0x1e
     30a:	af 8f       	std	Y+31, r26	; 0x1f
     30c:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     30e:	24 e5       	ldi	r18, 0x54	; 84
     310:	35 e5       	ldi	r19, 0x55	; 85
     312:	40 e5       	ldi	r20, 0x50	; 80
     314:	54 e4       	ldi	r21, 0x44	; 68
     316:	6d 8d       	ldd	r22, Y+29	; 0x1d
     318:	7e 8d       	ldd	r23, Y+30	; 0x1e
     31a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     31c:	98 a1       	ldd	r25, Y+32	; 0x20
     31e:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	89 a3       	std	Y+33, r24	; 0x21
     328:	9a a3       	std	Y+34, r25	; 0x22
     32a:	ab a3       	std	Y+35, r26	; 0x23
     32c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	69 a1       	ldd	r22, Y+33	; 0x21
     338:	7a a1       	ldd	r23, Y+34	; 0x22
     33a:	8b a1       	ldd	r24, Y+35	; 0x23
     33c:	9c a1       	ldd	r25, Y+36	; 0x24
     33e:	0e 94 65 08 	call	0x10ca	; 0x10ca <__cmpsf2>
     342:	88 23       	and	r24, r24
     344:	2c f4       	brge	.+10     	; 0x350 <function+0x1a8>
		__ticks = 1;
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	8d a3       	std	Y+37, r24	; 0x25
     34c:	9e a3       	std	Y+38, r25	; 0x26
     34e:	3f c0       	rjmp	.+126    	; 0x3ce <function+0x226>
	else if (__tmp > 65535)
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	3f ef       	ldi	r19, 0xFF	; 255
     354:	4f e7       	ldi	r20, 0x7F	; 127
     356:	57 e4       	ldi	r21, 0x47	; 71
     358:	69 a1       	ldd	r22, Y+33	; 0x21
     35a:	7a a1       	ldd	r23, Y+34	; 0x22
     35c:	8b a1       	ldd	r24, Y+35	; 0x23
     35e:	9c a1       	ldd	r25, Y+36	; 0x24
     360:	0e 94 23 09 	call	0x1246	; 0x1246 <__gesf2>
     364:	18 16       	cp	r1, r24
     366:	4c f5       	brge	.+82     	; 0x3ba <function+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	40 e2       	ldi	r20, 0x20	; 32
     36e:	51 e4       	ldi	r21, 0x41	; 65
     370:	6d 8d       	ldd	r22, Y+29	; 0x1d
     372:	7e 8d       	ldd	r23, Y+30	; 0x1e
     374:	8f 8d       	ldd	r24, Y+31	; 0x1f
     376:	98 a1       	ldd	r25, Y+32	; 0x20
     378:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     37c:	dc 01       	movw	r26, r24
     37e:	cb 01       	movw	r24, r22
     380:	bc 01       	movw	r22, r24
     382:	cd 01       	movw	r24, r26
     384:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8d a3       	std	Y+37, r24	; 0x25
     38e:	9e a3       	std	Y+38, r25	; 0x26
     390:	0f c0       	rjmp	.+30     	; 0x3b0 <function+0x208>
     392:	83 e5       	ldi	r24, 0x53	; 83
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	8f a3       	std	Y+39, r24	; 0x27
     398:	98 a7       	std	Y+40, r25	; 0x28
     39a:	8f a1       	ldd	r24, Y+39	; 0x27
     39c:	98 a5       	ldd	r25, Y+40	; 0x28
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <function+0x1f6>
     3a2:	8f a3       	std	Y+39, r24	; 0x27
     3a4:	98 a7       	std	Y+40, r25	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a6:	8d a1       	ldd	r24, Y+37	; 0x25
     3a8:	9e a1       	ldd	r25, Y+38	; 0x26
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	8d a3       	std	Y+37, r24	; 0x25
     3ae:	9e a3       	std	Y+38, r25	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3b0:	8d a1       	ldd	r24, Y+37	; 0x25
     3b2:	9e a1       	ldd	r25, Y+38	; 0x26
     3b4:	89 2b       	or	r24, r25
     3b6:	69 f7       	brne	.-38     	; 0x392 <function+0x1ea>
		W0_MCU_set_level(true);
		_delay_ms(delay_1);
		W0_MCU_set_level(false);
		_delay_ms(delay_1);
	}
     3b8:	8a c4       	rjmp	.+2324   	; 0xcce <__LOCK_REGION_LENGTH__+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ba:	69 a1       	ldd	r22, Y+33	; 0x21
     3bc:	7a a1       	ldd	r23, Y+34	; 0x22
     3be:	8b a1       	ldd	r24, Y+35	; 0x23
     3c0:	9c a1       	ldd	r25, Y+36	; 0x24
     3c2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     3c6:	dc 01       	movw	r26, r24
     3c8:	cb 01       	movw	r24, r22
     3ca:	8d a3       	std	Y+37, r24	; 0x25
     3cc:	9e a3       	std	Y+38, r25	; 0x26
     3ce:	8d a1       	ldd	r24, Y+37	; 0x25
     3d0:	9e a1       	ldd	r25, Y+38	; 0x26
     3d2:	89 a7       	std	Y+41, r24	; 0x29
     3d4:	9a a7       	std	Y+42, r25	; 0x2a
     3d6:	89 a5       	ldd	r24, Y+41	; 0x29
     3d8:	9a a5       	ldd	r25, Y+42	; 0x2a
     3da:	01 97       	sbiw	r24, 0x01	; 1
     3dc:	f1 f7       	brne	.-4      	; 0x3da <function+0x232>
     3de:	89 a7       	std	Y+41, r24	; 0x29
     3e0:	9a a7       	std	Y+42, r25	; 0x2a
     3e2:	75 c4       	rjmp	.+2282   	; 0xcce <__LOCK_REGION_LENGTH__+0x8ce>
		R0_MCU_set_level(true);
		_delay_ms(delay_1);
		R0_MCU_set_level(false);
		_delay_ms(delay_1);
	}
	else if(led==G)
     3e4:	ce 01       	movw	r24, r28
     3e6:	8f 58       	subi	r24, 0x8F	; 143
     3e8:	9f 4f       	sbci	r25, 0xFF	; 255
     3ea:	fc 01       	movw	r30, r24
     3ec:	80 81       	ld	r24, Z
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <function+0x24c>
     3f2:	44 c1       	rjmp	.+648    	; 0x67c <__LOCK_REGION_LENGTH__+0x27c>
	{
		G0_MCU_set_level(true);
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 a7 00 	call	0x14e	; 0x14e <G0_MCU_set_level>
		_delay_ms(delay_1);
     3fa:	ce 01       	movw	r24, r28
     3fc:	8e 58       	subi	r24, 0x8E	; 142
     3fe:	9f 4f       	sbci	r25, 0xFF	; 255
     400:	fc 01       	movw	r30, r24
     402:	80 81       	ld	r24, Z
     404:	91 81       	ldd	r25, Z+1	; 0x01
     406:	cc 01       	movw	r24, r24
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	bc 01       	movw	r22, r24
     40e:	cd 01       	movw	r24, r26
     410:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     414:	dc 01       	movw	r26, r24
     416:	cb 01       	movw	r24, r22
     418:	8d 87       	std	Y+13, r24	; 0x0d
     41a:	9e 87       	std	Y+14, r25	; 0x0e
     41c:	af 87       	std	Y+15, r26	; 0x0f
     41e:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     420:	8e 01       	movw	r16, r28
     422:	01 5c       	subi	r16, 0xC1	; 193
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	24 e5       	ldi	r18, 0x54	; 84
     428:	35 e5       	ldi	r19, 0x55	; 85
     42a:	40 e5       	ldi	r20, 0x50	; 80
     42c:	54 e4       	ldi	r21, 0x44	; 68
     42e:	6d 85       	ldd	r22, Y+13	; 0x0d
     430:	7e 85       	ldd	r23, Y+14	; 0x0e
     432:	8f 85       	ldd	r24, Y+15	; 0x0f
     434:	98 89       	ldd	r25, Y+16	; 0x10
     436:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     43a:	dc 01       	movw	r26, r24
     43c:	cb 01       	movw	r24, r22
     43e:	f8 01       	movw	r30, r16
     440:	80 83       	st	Z, r24
     442:	91 83       	std	Z+1, r25	; 0x01
     444:	a2 83       	std	Z+2, r26	; 0x02
     446:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     448:	ce 01       	movw	r24, r28
     44a:	cf 96       	adiw	r24, 0x3f	; 63
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e8       	ldi	r20, 0x80	; 128
     452:	5f e3       	ldi	r21, 0x3F	; 63
     454:	fc 01       	movw	r30, r24
     456:	60 81       	ld	r22, Z
     458:	71 81       	ldd	r23, Z+1	; 0x01
     45a:	82 81       	ldd	r24, Z+2	; 0x02
     45c:	93 81       	ldd	r25, Z+3	; 0x03
     45e:	0e 94 65 08 	call	0x10ca	; 0x10ca <__cmpsf2>
     462:	88 23       	and	r24, r24
     464:	4c f4       	brge	.+18     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		__ticks = 1;
     466:	ce 01       	movw	r24, r28
     468:	8d 5b       	subi	r24, 0xBD	; 189
     46a:	9f 4f       	sbci	r25, 0xFF	; 255
     46c:	21 e0       	ldi	r18, 0x01	; 1
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
     474:	31 83       	std	Z+1, r19	; 0x01
     476:	67 c0       	rjmp	.+206    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
	else if (__tmp > 65535)
     478:	ce 01       	movw	r24, r28
     47a:	cf 96       	adiw	r24, 0x3f	; 63
     47c:	20 e0       	ldi	r18, 0x00	; 0
     47e:	3f ef       	ldi	r19, 0xFF	; 255
     480:	4f e7       	ldi	r20, 0x7F	; 127
     482:	57 e4       	ldi	r21, 0x47	; 71
     484:	fc 01       	movw	r30, r24
     486:	60 81       	ld	r22, Z
     488:	71 81       	ldd	r23, Z+1	; 0x01
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	93 81       	ldd	r25, Z+3	; 0x03
     48e:	0e 94 23 09 	call	0x1246	; 0x1246 <__gesf2>
     492:	18 16       	cp	r1, r24
     494:	0c f0       	brlt	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	46 c0       	rjmp	.+140    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e2       	ldi	r20, 0x20	; 32
     49e:	51 e4       	ldi	r21, 0x41	; 65
     4a0:	6d 85       	ldd	r22, Y+13	; 0x0d
     4a2:	7e 85       	ldd	r23, Y+14	; 0x0e
     4a4:	8f 85       	ldd	r24, Y+15	; 0x0f
     4a6:	98 89       	ldd	r25, Y+16	; 0x10
     4a8:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	8e 01       	movw	r16, r28
     4b2:	0d 5b       	subi	r16, 0xBD	; 189
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	bc 01       	movw	r22, r24
     4b8:	cd 01       	movw	r24, r26
     4ba:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     4be:	dc 01       	movw	r26, r24
     4c0:	cb 01       	movw	r24, r22
     4c2:	f8 01       	movw	r30, r16
     4c4:	80 83       	st	Z, r24
     4c6:	91 83       	std	Z+1, r25	; 0x01
     4c8:	24 c0       	rjmp	.+72     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     4ca:	ce 01       	movw	r24, r28
     4cc:	8b 5b       	subi	r24, 0xBB	; 187
     4ce:	9f 4f       	sbci	r25, 0xFF	; 255
     4d0:	23 e5       	ldi	r18, 0x53	; 83
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
     4d8:	31 83       	std	Z+1, r19	; 0x01
     4da:	ce 01       	movw	r24, r28
     4dc:	8b 5b       	subi	r24, 0xBB	; 187
     4de:	9f 4f       	sbci	r25, 0xFF	; 255
     4e0:	fc 01       	movw	r30, r24
     4e2:	80 81       	ld	r24, Z
     4e4:	91 81       	ldd	r25, Z+1	; 0x01
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4ea:	9e 01       	movw	r18, r28
     4ec:	2b 5b       	subi	r18, 0xBB	; 187
     4ee:	3f 4f       	sbci	r19, 0xFF	; 255
     4f0:	f9 01       	movw	r30, r18
     4f2:	80 83       	st	Z, r24
     4f4:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f6:	ce 01       	movw	r24, r28
     4f8:	8d 5b       	subi	r24, 0xBD	; 189
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	9e 01       	movw	r18, r28
     4fe:	2d 5b       	subi	r18, 0xBD	; 189
     500:	3f 4f       	sbci	r19, 0xFF	; 255
     502:	f9 01       	movw	r30, r18
     504:	20 81       	ld	r18, Z
     506:	31 81       	ldd	r19, Z+1	; 0x01
     508:	21 50       	subi	r18, 0x01	; 1
     50a:	31 09       	sbc	r19, r1
     50c:	fc 01       	movw	r30, r24
     50e:	20 83       	st	Z, r18
     510:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     512:	ce 01       	movw	r24, r28
     514:	8d 5b       	subi	r24, 0xBD	; 189
     516:	9f 4f       	sbci	r25, 0xFF	; 255
     518:	fc 01       	movw	r30, r24
     51a:	80 81       	ld	r24, Z
     51c:	91 81       	ldd	r25, Z+1	; 0x01
     51e:	89 2b       	or	r24, r25
     520:	a1 f6       	brne	.-88     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     522:	2b c0       	rjmp	.+86     	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     524:	8e 01       	movw	r16, r28
     526:	0d 5b       	subi	r16, 0xBD	; 189
     528:	1f 4f       	sbci	r17, 0xFF	; 255
     52a:	ce 01       	movw	r24, r28
     52c:	cf 96       	adiw	r24, 0x3f	; 63
     52e:	fc 01       	movw	r30, r24
     530:	60 81       	ld	r22, Z
     532:	71 81       	ldd	r23, Z+1	; 0x01
     534:	82 81       	ldd	r24, Z+2	; 0x02
     536:	93 81       	ldd	r25, Z+3	; 0x03
     538:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	f8 01       	movw	r30, r16
     542:	80 83       	st	Z, r24
     544:	91 83       	std	Z+1, r25	; 0x01
     546:	ce 01       	movw	r24, r28
     548:	89 5b       	subi	r24, 0xB9	; 185
     54a:	9f 4f       	sbci	r25, 0xFF	; 255
     54c:	9e 01       	movw	r18, r28
     54e:	2d 5b       	subi	r18, 0xBD	; 189
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	f9 01       	movw	r30, r18
     554:	20 81       	ld	r18, Z
     556:	31 81       	ldd	r19, Z+1	; 0x01
     558:	fc 01       	movw	r30, r24
     55a:	20 83       	st	Z, r18
     55c:	31 83       	std	Z+1, r19	; 0x01
     55e:	ce 01       	movw	r24, r28
     560:	89 5b       	subi	r24, 0xB9	; 185
     562:	9f 4f       	sbci	r25, 0xFF	; 255
     564:	fc 01       	movw	r30, r24
     566:	80 81       	ld	r24, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	f1 f7       	brne	.-4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     56e:	9e 01       	movw	r18, r28
     570:	29 5b       	subi	r18, 0xB9	; 185
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	f9 01       	movw	r30, r18
     576:	80 83       	st	Z, r24
     578:	91 83       	std	Z+1, r25	; 0x01
		G0_MCU_set_level(false);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 a7 00 	call	0x14e	; 0x14e <G0_MCU_set_level>
		_delay_ms(delay_1);
     580:	ce 01       	movw	r24, r28
     582:	8e 58       	subi	r24, 0x8E	; 142
     584:	9f 4f       	sbci	r25, 0xFF	; 255
     586:	fc 01       	movw	r30, r24
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	cc 01       	movw	r24, r24
     58e:	a0 e0       	ldi	r26, 0x00	; 0
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	bc 01       	movw	r22, r24
     594:	cd 01       	movw	r24, r26
     596:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     59a:	dc 01       	movw	r26, r24
     59c:	cb 01       	movw	r24, r22
     59e:	89 83       	std	Y+1, r24	; 0x01
     5a0:	9a 83       	std	Y+2, r25	; 0x02
     5a2:	ab 83       	std	Y+3, r26	; 0x03
     5a4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5a6:	24 e5       	ldi	r18, 0x54	; 84
     5a8:	35 e5       	ldi	r19, 0x55	; 85
     5aa:	40 e5       	ldi	r20, 0x50	; 80
     5ac:	54 e4       	ldi	r21, 0x44	; 68
     5ae:	69 81       	ldd	r22, Y+1	; 0x01
     5b0:	7a 81       	ldd	r23, Y+2	; 0x02
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	9c 81       	ldd	r25, Y+4	; 0x04
     5b6:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     5ba:	dc 01       	movw	r26, r24
     5bc:	cb 01       	movw	r24, r22
     5be:	8d ab       	std	Y+53, r24	; 0x35
     5c0:	9e ab       	std	Y+54, r25	; 0x36
     5c2:	af ab       	std	Y+55, r26	; 0x37
     5c4:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	40 e8       	ldi	r20, 0x80	; 128
     5cc:	5f e3       	ldi	r21, 0x3F	; 63
     5ce:	6d a9       	ldd	r22, Y+53	; 0x35
     5d0:	7e a9       	ldd	r23, Y+54	; 0x36
     5d2:	8f a9       	ldd	r24, Y+55	; 0x37
     5d4:	98 ad       	ldd	r25, Y+56	; 0x38
     5d6:	0e 94 65 08 	call	0x10ca	; 0x10ca <__cmpsf2>
     5da:	88 23       	and	r24, r24
     5dc:	2c f4       	brge	.+10     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
		__ticks = 1;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	89 af       	std	Y+57, r24	; 0x39
     5e4:	9a af       	std	Y+58, r25	; 0x3a
     5e6:	3f c0       	rjmp	.+126    	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
	else if (__tmp > 65535)
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	3f ef       	ldi	r19, 0xFF	; 255
     5ec:	4f e7       	ldi	r20, 0x7F	; 127
     5ee:	57 e4       	ldi	r21, 0x47	; 71
     5f0:	6d a9       	ldd	r22, Y+53	; 0x35
     5f2:	7e a9       	ldd	r23, Y+54	; 0x36
     5f4:	8f a9       	ldd	r24, Y+55	; 0x37
     5f6:	98 ad       	ldd	r25, Y+56	; 0x38
     5f8:	0e 94 23 09 	call	0x1246	; 0x1246 <__gesf2>
     5fc:	18 16       	cp	r1, r24
     5fe:	4c f5       	brge	.+82     	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	40 e2       	ldi	r20, 0x20	; 32
     606:	51 e4       	ldi	r21, 0x41	; 65
     608:	69 81       	ldd	r22, Y+1	; 0x01
     60a:	7a 81       	ldd	r23, Y+2	; 0x02
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	9c 81       	ldd	r25, Y+4	; 0x04
     610:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	bc 01       	movw	r22, r24
     61a:	cd 01       	movw	r24, r26
     61c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     620:	dc 01       	movw	r26, r24
     622:	cb 01       	movw	r24, r22
     624:	89 af       	std	Y+57, r24	; 0x39
     626:	9a af       	std	Y+58, r25	; 0x3a
     628:	0f c0       	rjmp	.+30     	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
     62a:	83 e5       	ldi	r24, 0x53	; 83
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	8b af       	std	Y+59, r24	; 0x3b
     630:	9c af       	std	Y+60, r25	; 0x3c
     632:	8b ad       	ldd	r24, Y+59	; 0x3b
     634:	9c ad       	ldd	r25, Y+60	; 0x3c
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <__LOCK_REGION_LENGTH__+0x236>
     63a:	8b af       	std	Y+59, r24	; 0x3b
     63c:	9c af       	std	Y+60, r25	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     63e:	89 ad       	ldd	r24, Y+57	; 0x39
     640:	9a ad       	ldd	r25, Y+58	; 0x3a
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	89 af       	std	Y+57, r24	; 0x39
     646:	9a af       	std	Y+58, r25	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     648:	89 ad       	ldd	r24, Y+57	; 0x39
     64a:	9a ad       	ldd	r25, Y+58	; 0x3a
     64c:	89 2b       	or	r24, r25
     64e:	69 f7       	brne	.-38     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
		W0_MCU_set_level(true);
		_delay_ms(delay_1);
		W0_MCU_set_level(false);
		_delay_ms(delay_1);
	}
     650:	3e c3       	rjmp	.+1660   	; 0xcce <__LOCK_REGION_LENGTH__+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     652:	6d a9       	ldd	r22, Y+53	; 0x35
     654:	7e a9       	ldd	r23, Y+54	; 0x36
     656:	8f a9       	ldd	r24, Y+55	; 0x37
     658:	98 ad       	ldd	r25, Y+56	; 0x38
     65a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     65e:	dc 01       	movw	r26, r24
     660:	cb 01       	movw	r24, r22
     662:	89 af       	std	Y+57, r24	; 0x39
     664:	9a af       	std	Y+58, r25	; 0x3a
     666:	89 ad       	ldd	r24, Y+57	; 0x39
     668:	9a ad       	ldd	r25, Y+58	; 0x3a
     66a:	8d af       	std	Y+61, r24	; 0x3d
     66c:	9e af       	std	Y+62, r25	; 0x3e
     66e:	8d ad       	ldd	r24, Y+61	; 0x3d
     670:	9e ad       	ldd	r25, Y+62	; 0x3e
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
     676:	8d af       	std	Y+61, r24	; 0x3d
     678:	9e af       	std	Y+62, r25	; 0x3e
     67a:	29 c3       	rjmp	.+1618   	; 0xcce <__LOCK_REGION_LENGTH__+0x8ce>
		G0_MCU_set_level(true);
		_delay_ms(delay_1);
		G0_MCU_set_level(false);
		_delay_ms(delay_1);
	}
	else if(led==B)
     67c:	ce 01       	movw	r24, r28
     67e:	8f 58       	subi	r24, 0x8F	; 143
     680:	9f 4f       	sbci	r25, 0xFF	; 255
     682:	fc 01       	movw	r30, r24
     684:	80 81       	ld	r24, Z
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	09 f0       	breq	.+2      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
     68a:	8d c1       	rjmp	.+794    	; 0x9a6 <__LOCK_REGION_LENGTH__+0x5a6>
	{
		B0_MCU_set_level(true);
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 b6 00 	call	0x16c	; 0x16c <B0_MCU_set_level>
		_delay_ms(delay_1);
     692:	ce 01       	movw	r24, r28
     694:	8e 58       	subi	r24, 0x8E	; 142
     696:	9f 4f       	sbci	r25, 0xFF	; 255
     698:	fc 01       	movw	r30, r24
     69a:	80 81       	ld	r24, Z
     69c:	91 81       	ldd	r25, Z+1	; 0x01
     69e:	cc 01       	movw	r24, r24
     6a0:	a0 e0       	ldi	r26, 0x00	; 0
     6a2:	b0 e0       	ldi	r27, 0x00	; 0
     6a4:	bc 01       	movw	r22, r24
     6a6:	cd 01       	movw	r24, r26
     6a8:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     6ac:	dc 01       	movw	r26, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	8d 8b       	std	Y+21, r24	; 0x15
     6b2:	9e 8b       	std	Y+22, r25	; 0x16
     6b4:	af 8b       	std	Y+23, r26	; 0x17
     6b6:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     6b8:	8e 01       	movw	r16, r28
     6ba:	0d 5a       	subi	r16, 0xAD	; 173
     6bc:	1f 4f       	sbci	r17, 0xFF	; 255
     6be:	24 e5       	ldi	r18, 0x54	; 84
     6c0:	35 e5       	ldi	r19, 0x55	; 85
     6c2:	40 e5       	ldi	r20, 0x50	; 80
     6c4:	54 e4       	ldi	r21, 0x44	; 68
     6c6:	6d 89       	ldd	r22, Y+21	; 0x15
     6c8:	7e 89       	ldd	r23, Y+22	; 0x16
     6ca:	8f 89       	ldd	r24, Y+23	; 0x17
     6cc:	98 8d       	ldd	r25, Y+24	; 0x18
     6ce:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     6d2:	dc 01       	movw	r26, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	f8 01       	movw	r30, r16
     6d8:	80 83       	st	Z, r24
     6da:	91 83       	std	Z+1, r25	; 0x01
     6dc:	a2 83       	std	Z+2, r26	; 0x02
     6de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6e0:	ce 01       	movw	r24, r28
     6e2:	8d 5a       	subi	r24, 0xAD	; 173
     6e4:	9f 4f       	sbci	r25, 0xFF	; 255
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	5f e3       	ldi	r21, 0x3F	; 63
     6ee:	fc 01       	movw	r30, r24
     6f0:	60 81       	ld	r22, Z
     6f2:	71 81       	ldd	r23, Z+1	; 0x01
     6f4:	82 81       	ldd	r24, Z+2	; 0x02
     6f6:	93 81       	ldd	r25, Z+3	; 0x03
     6f8:	0e 94 65 08 	call	0x10ca	; 0x10ca <__cmpsf2>
     6fc:	88 23       	and	r24, r24
     6fe:	4c f4       	brge	.+18     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
		__ticks = 1;
     700:	ce 01       	movw	r24, r28
     702:	89 5a       	subi	r24, 0xA9	; 169
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	21 e0       	ldi	r18, 0x01	; 1
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
     70e:	31 83       	std	Z+1, r19	; 0x01
     710:	69 c0       	rjmp	.+210    	; 0x7e4 <__LOCK_REGION_LENGTH__+0x3e4>
	else if (__tmp > 65535)
     712:	ce 01       	movw	r24, r28
     714:	8d 5a       	subi	r24, 0xAD	; 173
     716:	9f 4f       	sbci	r25, 0xFF	; 255
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	3f ef       	ldi	r19, 0xFF	; 255
     71c:	4f e7       	ldi	r20, 0x7F	; 127
     71e:	57 e4       	ldi	r21, 0x47	; 71
     720:	fc 01       	movw	r30, r24
     722:	60 81       	ld	r22, Z
     724:	71 81       	ldd	r23, Z+1	; 0x01
     726:	82 81       	ldd	r24, Z+2	; 0x02
     728:	93 81       	ldd	r25, Z+3	; 0x03
     72a:	0e 94 23 09 	call	0x1246	; 0x1246 <__gesf2>
     72e:	18 16       	cp	r1, r24
     730:	0c f0       	brlt	.+2      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     732:	46 c0       	rjmp	.+140    	; 0x7c0 <__LOCK_REGION_LENGTH__+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e2       	ldi	r20, 0x20	; 32
     73a:	51 e4       	ldi	r21, 0x41	; 65
     73c:	6d 89       	ldd	r22, Y+21	; 0x15
     73e:	7e 89       	ldd	r23, Y+22	; 0x16
     740:	8f 89       	ldd	r24, Y+23	; 0x17
     742:	98 8d       	ldd	r25, Y+24	; 0x18
     744:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     748:	dc 01       	movw	r26, r24
     74a:	cb 01       	movw	r24, r22
     74c:	8e 01       	movw	r16, r28
     74e:	09 5a       	subi	r16, 0xA9	; 169
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	bc 01       	movw	r22, r24
     754:	cd 01       	movw	r24, r26
     756:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     75a:	dc 01       	movw	r26, r24
     75c:	cb 01       	movw	r24, r22
     75e:	f8 01       	movw	r30, r16
     760:	80 83       	st	Z, r24
     762:	91 83       	std	Z+1, r25	; 0x01
     764:	24 c0       	rjmp	.+72     	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
     766:	ce 01       	movw	r24, r28
     768:	87 5a       	subi	r24, 0xA7	; 167
     76a:	9f 4f       	sbci	r25, 0xFF	; 255
     76c:	23 e5       	ldi	r18, 0x53	; 83
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
     774:	31 83       	std	Z+1, r19	; 0x01
     776:	ce 01       	movw	r24, r28
     778:	87 5a       	subi	r24, 0xA7	; 167
     77a:	9f 4f       	sbci	r25, 0xFF	; 255
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	91 81       	ldd	r25, Z+1	; 0x01
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
     786:	9e 01       	movw	r18, r28
     788:	27 5a       	subi	r18, 0xA7	; 167
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	f9 01       	movw	r30, r18
     78e:	80 83       	st	Z, r24
     790:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     792:	ce 01       	movw	r24, r28
     794:	89 5a       	subi	r24, 0xA9	; 169
     796:	9f 4f       	sbci	r25, 0xFF	; 255
     798:	9e 01       	movw	r18, r28
     79a:	29 5a       	subi	r18, 0xA9	; 169
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	f9 01       	movw	r30, r18
     7a0:	20 81       	ld	r18, Z
     7a2:	31 81       	ldd	r19, Z+1	; 0x01
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	31 09       	sbc	r19, r1
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
     7ac:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ae:	ce 01       	movw	r24, r28
     7b0:	89 5a       	subi	r24, 0xA9	; 169
     7b2:	9f 4f       	sbci	r25, 0xFF	; 255
     7b4:	fc 01       	movw	r30, r24
     7b6:	80 81       	ld	r24, Z
     7b8:	91 81       	ldd	r25, Z+1	; 0x01
     7ba:	89 2b       	or	r24, r25
     7bc:	a1 f6       	brne	.-88     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     7be:	2c c0       	rjmp	.+88     	; 0x818 <__LOCK_REGION_LENGTH__+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7c0:	8e 01       	movw	r16, r28
     7c2:	09 5a       	subi	r16, 0xA9	; 169
     7c4:	1f 4f       	sbci	r17, 0xFF	; 255
     7c6:	ce 01       	movw	r24, r28
     7c8:	8d 5a       	subi	r24, 0xAD	; 173
     7ca:	9f 4f       	sbci	r25, 0xFF	; 255
     7cc:	fc 01       	movw	r30, r24
     7ce:	60 81       	ld	r22, Z
     7d0:	71 81       	ldd	r23, Z+1	; 0x01
     7d2:	82 81       	ldd	r24, Z+2	; 0x02
     7d4:	93 81       	ldd	r25, Z+3	; 0x03
     7d6:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	f8 01       	movw	r30, r16
     7e0:	80 83       	st	Z, r24
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	ce 01       	movw	r24, r28
     7e6:	85 5a       	subi	r24, 0xA5	; 165
     7e8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ea:	9e 01       	movw	r18, r28
     7ec:	29 5a       	subi	r18, 0xA9	; 169
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	f9 01       	movw	r30, r18
     7f2:	20 81       	ld	r18, Z
     7f4:	31 81       	ldd	r19, Z+1	; 0x01
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
     7fa:	31 83       	std	Z+1, r19	; 0x01
     7fc:	ce 01       	movw	r24, r28
     7fe:	85 5a       	subi	r24, 0xA5	; 165
     800:	9f 4f       	sbci	r25, 0xFF	; 255
     802:	fc 01       	movw	r30, r24
     804:	80 81       	ld	r24, Z
     806:	91 81       	ldd	r25, Z+1	; 0x01
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <__LOCK_REGION_LENGTH__+0x408>
     80c:	9e 01       	movw	r18, r28
     80e:	25 5a       	subi	r18, 0xA5	; 165
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	f9 01       	movw	r30, r18
     814:	80 83       	st	Z, r24
     816:	91 83       	std	Z+1, r25	; 0x01
		B0_MCU_set_level(false);
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	0e 94 b6 00 	call	0x16c	; 0x16c <B0_MCU_set_level>
		_delay_ms(delay_1);
     81e:	ce 01       	movw	r24, r28
     820:	8e 58       	subi	r24, 0x8E	; 142
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	fc 01       	movw	r30, r24
     826:	80 81       	ld	r24, Z
     828:	91 81       	ldd	r25, Z+1	; 0x01
     82a:	cc 01       	movw	r24, r24
     82c:	a0 e0       	ldi	r26, 0x00	; 0
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	bc 01       	movw	r22, r24
     832:	cd 01       	movw	r24, r26
     834:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	89 87       	std	Y+9, r24	; 0x09
     83e:	9a 87       	std	Y+10, r25	; 0x0a
     840:	ab 87       	std	Y+11, r26	; 0x0b
     842:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     844:	8e 01       	movw	r16, r28
     846:	07 5b       	subi	r16, 0xB7	; 183
     848:	1f 4f       	sbci	r17, 0xFF	; 255
     84a:	24 e5       	ldi	r18, 0x54	; 84
     84c:	35 e5       	ldi	r19, 0x55	; 85
     84e:	40 e5       	ldi	r20, 0x50	; 80
     850:	54 e4       	ldi	r21, 0x44	; 68
     852:	69 85       	ldd	r22, Y+9	; 0x09
     854:	7a 85       	ldd	r23, Y+10	; 0x0a
     856:	8b 85       	ldd	r24, Y+11	; 0x0b
     858:	9c 85       	ldd	r25, Y+12	; 0x0c
     85a:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	f8 01       	movw	r30, r16
     864:	80 83       	st	Z, r24
     866:	91 83       	std	Z+1, r25	; 0x01
     868:	a2 83       	std	Z+2, r26	; 0x02
     86a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     86c:	ce 01       	movw	r24, r28
     86e:	87 5b       	subi	r24, 0xB7	; 183
     870:	9f 4f       	sbci	r25, 0xFF	; 255
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e8       	ldi	r20, 0x80	; 128
     878:	5f e3       	ldi	r21, 0x3F	; 63
     87a:	fc 01       	movw	r30, r24
     87c:	60 81       	ld	r22, Z
     87e:	71 81       	ldd	r23, Z+1	; 0x01
     880:	82 81       	ldd	r24, Z+2	; 0x02
     882:	93 81       	ldd	r25, Z+3	; 0x03
     884:	0e 94 65 08 	call	0x10ca	; 0x10ca <__cmpsf2>
     888:	88 23       	and	r24, r24
     88a:	4c f4       	brge	.+18     	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
		__ticks = 1;
     88c:	ce 01       	movw	r24, r28
     88e:	83 5b       	subi	r24, 0xB3	; 179
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	fc 01       	movw	r30, r24
     898:	20 83       	st	Z, r18
     89a:	31 83       	std	Z+1, r19	; 0x01
     89c:	69 c0       	rjmp	.+210    	; 0x970 <__LOCK_REGION_LENGTH__+0x570>
	else if (__tmp > 65535)
     89e:	ce 01       	movw	r24, r28
     8a0:	87 5b       	subi	r24, 0xB7	; 183
     8a2:	9f 4f       	sbci	r25, 0xFF	; 255
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	3f ef       	ldi	r19, 0xFF	; 255
     8a8:	4f e7       	ldi	r20, 0x7F	; 127
     8aa:	57 e4       	ldi	r21, 0x47	; 71
     8ac:	fc 01       	movw	r30, r24
     8ae:	60 81       	ld	r22, Z
     8b0:	71 81       	ldd	r23, Z+1	; 0x01
     8b2:	82 81       	ldd	r24, Z+2	; 0x02
     8b4:	93 81       	ldd	r25, Z+3	; 0x03
     8b6:	0e 94 23 09 	call	0x1246	; 0x1246 <__gesf2>
     8ba:	18 16       	cp	r1, r24
     8bc:	0c f0       	brlt	.+2      	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
     8be:	46 c0       	rjmp	.+140    	; 0x94c <__LOCK_REGION_LENGTH__+0x54c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	40 e2       	ldi	r20, 0x20	; 32
     8c6:	51 e4       	ldi	r21, 0x41	; 65
     8c8:	69 85       	ldd	r22, Y+9	; 0x09
     8ca:	7a 85       	ldd	r23, Y+10	; 0x0a
     8cc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8ce:	9c 85       	ldd	r25, Y+12	; 0x0c
     8d0:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     8d4:	dc 01       	movw	r26, r24
     8d6:	cb 01       	movw	r24, r22
     8d8:	8e 01       	movw	r16, r28
     8da:	03 5b       	subi	r16, 0xB3	; 179
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
     8de:	bc 01       	movw	r22, r24
     8e0:	cd 01       	movw	r24, r26
     8e2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     8e6:	dc 01       	movw	r26, r24
     8e8:	cb 01       	movw	r24, r22
     8ea:	f8 01       	movw	r30, r16
     8ec:	80 83       	st	Z, r24
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	24 c0       	rjmp	.+72     	; 0x93a <__LOCK_REGION_LENGTH__+0x53a>
     8f2:	ce 01       	movw	r24, r28
     8f4:	81 5b       	subi	r24, 0xB1	; 177
     8f6:	9f 4f       	sbci	r25, 0xFF	; 255
     8f8:	23 e5       	ldi	r18, 0x53	; 83
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	fc 01       	movw	r30, r24
     8fe:	20 83       	st	Z, r18
     900:	31 83       	std	Z+1, r19	; 0x01
     902:	ce 01       	movw	r24, r28
     904:	81 5b       	subi	r24, 0xB1	; 177
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	91 81       	ldd	r25, Z+1	; 0x01
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	f1 f7       	brne	.-4      	; 0x90e <__LOCK_REGION_LENGTH__+0x50e>
     912:	9e 01       	movw	r18, r28
     914:	21 5b       	subi	r18, 0xB1	; 177
     916:	3f 4f       	sbci	r19, 0xFF	; 255
     918:	f9 01       	movw	r30, r18
     91a:	80 83       	st	Z, r24
     91c:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     91e:	ce 01       	movw	r24, r28
     920:	83 5b       	subi	r24, 0xB3	; 179
     922:	9f 4f       	sbci	r25, 0xFF	; 255
     924:	9e 01       	movw	r18, r28
     926:	23 5b       	subi	r18, 0xB3	; 179
     928:	3f 4f       	sbci	r19, 0xFF	; 255
     92a:	f9 01       	movw	r30, r18
     92c:	20 81       	ld	r18, Z
     92e:	31 81       	ldd	r19, Z+1	; 0x01
     930:	21 50       	subi	r18, 0x01	; 1
     932:	31 09       	sbc	r19, r1
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
     938:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     93a:	ce 01       	movw	r24, r28
     93c:	83 5b       	subi	r24, 0xB3	; 179
     93e:	9f 4f       	sbci	r25, 0xFF	; 255
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	89 2b       	or	r24, r25
     948:	a1 f6       	brne	.-88     	; 0x8f2 <__LOCK_REGION_LENGTH__+0x4f2>
		W0_MCU_set_level(true);
		_delay_ms(delay_1);
		W0_MCU_set_level(false);
		_delay_ms(delay_1);
	}
     94a:	c1 c1       	rjmp	.+898    	; 0xcce <__LOCK_REGION_LENGTH__+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     94c:	8e 01       	movw	r16, r28
     94e:	03 5b       	subi	r16, 0xB3	; 179
     950:	1f 4f       	sbci	r17, 0xFF	; 255
     952:	ce 01       	movw	r24, r28
     954:	87 5b       	subi	r24, 0xB7	; 183
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	fc 01       	movw	r30, r24
     95a:	60 81       	ld	r22, Z
     95c:	71 81       	ldd	r23, Z+1	; 0x01
     95e:	82 81       	ldd	r24, Z+2	; 0x02
     960:	93 81       	ldd	r25, Z+3	; 0x03
     962:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	f8 01       	movw	r30, r16
     96c:	80 83       	st	Z, r24
     96e:	91 83       	std	Z+1, r25	; 0x01
     970:	ce 01       	movw	r24, r28
     972:	8f 5a       	subi	r24, 0xAF	; 175
     974:	9f 4f       	sbci	r25, 0xFF	; 255
     976:	9e 01       	movw	r18, r28
     978:	23 5b       	subi	r18, 0xB3	; 179
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	f9 01       	movw	r30, r18
     97e:	20 81       	ld	r18, Z
     980:	31 81       	ldd	r19, Z+1	; 0x01
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
     986:	31 83       	std	Z+1, r19	; 0x01
     988:	ce 01       	movw	r24, r28
     98a:	8f 5a       	subi	r24, 0xAF	; 175
     98c:	9f 4f       	sbci	r25, 0xFF	; 255
     98e:	fc 01       	movw	r30, r24
     990:	80 81       	ld	r24, Z
     992:	91 81       	ldd	r25, Z+1	; 0x01
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <__LOCK_REGION_LENGTH__+0x594>
     998:	9e 01       	movw	r18, r28
     99a:	2f 5a       	subi	r18, 0xAF	; 175
     99c:	3f 4f       	sbci	r19, 0xFF	; 255
     99e:	f9 01       	movw	r30, r18
     9a0:	80 83       	st	Z, r24
     9a2:	91 83       	std	Z+1, r25	; 0x01
     9a4:	94 c1       	rjmp	.+808    	; 0xcce <__LOCK_REGION_LENGTH__+0x8ce>
		B0_MCU_set_level(true);
		_delay_ms(delay_1);
		B0_MCU_set_level(false);
		_delay_ms(delay_1);
	}
	else if(led==W)
     9a6:	ce 01       	movw	r24, r28
     9a8:	8f 58       	subi	r24, 0x8F	; 143
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	fc 01       	movw	r30, r24
     9ae:	80 81       	ld	r24, Z
     9b0:	83 30       	cpi	r24, 0x03	; 3
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <__LOCK_REGION_LENGTH__+0x5b6>
     9b4:	8c c1       	rjmp	.+792    	; 0xcce <__LOCK_REGION_LENGTH__+0x8ce>
	{
		W0_MCU_set_level(true);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	0e 94 c5 00 	call	0x18a	; 0x18a <W0_MCU_set_level>
		_delay_ms(delay_1);
     9bc:	ce 01       	movw	r24, r28
     9be:	8e 58       	subi	r24, 0x8E	; 142
     9c0:	9f 4f       	sbci	r25, 0xFF	; 255
     9c2:	fc 01       	movw	r30, r24
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	cc 01       	movw	r24, r24
     9ca:	a0 e0       	ldi	r26, 0x00	; 0
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	bc 01       	movw	r22, r24
     9d0:	cd 01       	movw	r24, r26
     9d2:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	89 8f       	std	Y+25, r24	; 0x19
     9dc:	9a 8f       	std	Y+26, r25	; 0x1a
     9de:	ab 8f       	std	Y+27, r26	; 0x1b
     9e0:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9e2:	8e 01       	movw	r16, r28
     9e4:	09 59       	subi	r16, 0x99	; 153
     9e6:	1f 4f       	sbci	r17, 0xFF	; 255
     9e8:	24 e5       	ldi	r18, 0x54	; 84
     9ea:	35 e5       	ldi	r19, 0x55	; 85
     9ec:	40 e5       	ldi	r20, 0x50	; 80
     9ee:	54 e4       	ldi	r21, 0x44	; 68
     9f0:	69 8d       	ldd	r22, Y+25	; 0x19
     9f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9f8:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     9fc:	dc 01       	movw	r26, r24
     9fe:	cb 01       	movw	r24, r22
     a00:	f8 01       	movw	r30, r16
     a02:	80 83       	st	Z, r24
     a04:	91 83       	std	Z+1, r25	; 0x01
     a06:	a2 83       	std	Z+2, r26	; 0x02
     a08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a0a:	ce 01       	movw	r24, r28
     a0c:	89 59       	subi	r24, 0x99	; 153
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	40 e8       	ldi	r20, 0x80	; 128
     a16:	5f e3       	ldi	r21, 0x3F	; 63
     a18:	fc 01       	movw	r30, r24
     a1a:	60 81       	ld	r22, Z
     a1c:	71 81       	ldd	r23, Z+1	; 0x01
     a1e:	82 81       	ldd	r24, Z+2	; 0x02
     a20:	93 81       	ldd	r25, Z+3	; 0x03
     a22:	0e 94 65 08 	call	0x10ca	; 0x10ca <__cmpsf2>
     a26:	88 23       	and	r24, r24
     a28:	4c f4       	brge	.+18     	; 0xa3c <__LOCK_REGION_LENGTH__+0x63c>
		__ticks = 1;
     a2a:	ce 01       	movw	r24, r28
     a2c:	85 59       	subi	r24, 0x95	; 149
     a2e:	9f 4f       	sbci	r25, 0xFF	; 255
     a30:	21 e0       	ldi	r18, 0x01	; 1
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	fc 01       	movw	r30, r24
     a36:	20 83       	st	Z, r18
     a38:	31 83       	std	Z+1, r19	; 0x01
     a3a:	69 c0       	rjmp	.+210    	; 0xb0e <__LOCK_REGION_LENGTH__+0x70e>
	else if (__tmp > 65535)
     a3c:	ce 01       	movw	r24, r28
     a3e:	89 59       	subi	r24, 0x99	; 153
     a40:	9f 4f       	sbci	r25, 0xFF	; 255
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	3f ef       	ldi	r19, 0xFF	; 255
     a46:	4f e7       	ldi	r20, 0x7F	; 127
     a48:	57 e4       	ldi	r21, 0x47	; 71
     a4a:	fc 01       	movw	r30, r24
     a4c:	60 81       	ld	r22, Z
     a4e:	71 81       	ldd	r23, Z+1	; 0x01
     a50:	82 81       	ldd	r24, Z+2	; 0x02
     a52:	93 81       	ldd	r25, Z+3	; 0x03
     a54:	0e 94 23 09 	call	0x1246	; 0x1246 <__gesf2>
     a58:	18 16       	cp	r1, r24
     a5a:	0c f0       	brlt	.+2      	; 0xa5e <__LOCK_REGION_LENGTH__+0x65e>
     a5c:	46 c0       	rjmp	.+140    	; 0xaea <__LOCK_REGION_LENGTH__+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e2       	ldi	r20, 0x20	; 32
     a64:	51 e4       	ldi	r21, 0x41	; 65
     a66:	69 8d       	ldd	r22, Y+25	; 0x19
     a68:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a6e:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	8e 01       	movw	r16, r28
     a78:	05 59       	subi	r16, 0x95	; 149
     a7a:	1f 4f       	sbci	r17, 0xFF	; 255
     a7c:	bc 01       	movw	r22, r24
     a7e:	cd 01       	movw	r24, r26
     a80:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	f8 01       	movw	r30, r16
     a8a:	80 83       	st	Z, r24
     a8c:	91 83       	std	Z+1, r25	; 0x01
     a8e:	24 c0       	rjmp	.+72     	; 0xad8 <__LOCK_REGION_LENGTH__+0x6d8>
     a90:	ce 01       	movw	r24, r28
     a92:	83 59       	subi	r24, 0x93	; 147
     a94:	9f 4f       	sbci	r25, 0xFF	; 255
     a96:	23 e5       	ldi	r18, 0x53	; 83
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18
     a9e:	31 83       	std	Z+1, r19	; 0x01
     aa0:	ce 01       	movw	r24, r28
     aa2:	83 59       	subi	r24, 0x93	; 147
     aa4:	9f 4f       	sbci	r25, 0xFF	; 255
     aa6:	fc 01       	movw	r30, r24
     aa8:	80 81       	ld	r24, Z
     aaa:	91 81       	ldd	r25, Z+1	; 0x01
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <__LOCK_REGION_LENGTH__+0x6ac>
     ab0:	9e 01       	movw	r18, r28
     ab2:	23 59       	subi	r18, 0x93	; 147
     ab4:	3f 4f       	sbci	r19, 0xFF	; 255
     ab6:	f9 01       	movw	r30, r18
     ab8:	80 83       	st	Z, r24
     aba:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     abc:	ce 01       	movw	r24, r28
     abe:	85 59       	subi	r24, 0x95	; 149
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	9e 01       	movw	r18, r28
     ac4:	25 59       	subi	r18, 0x95	; 149
     ac6:	3f 4f       	sbci	r19, 0xFF	; 255
     ac8:	f9 01       	movw	r30, r18
     aca:	20 81       	ld	r18, Z
     acc:	31 81       	ldd	r19, Z+1	; 0x01
     ace:	21 50       	subi	r18, 0x01	; 1
     ad0:	31 09       	sbc	r19, r1
     ad2:	fc 01       	movw	r30, r24
     ad4:	20 83       	st	Z, r18
     ad6:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad8:	ce 01       	movw	r24, r28
     ada:	85 59       	subi	r24, 0x95	; 149
     adc:	9f 4f       	sbci	r25, 0xFF	; 255
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	89 2b       	or	r24, r25
     ae6:	a1 f6       	brne	.-88     	; 0xa90 <__LOCK_REGION_LENGTH__+0x690>
     ae8:	2c c0       	rjmp	.+88     	; 0xb42 <__LOCK_REGION_LENGTH__+0x742>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aea:	8e 01       	movw	r16, r28
     aec:	05 59       	subi	r16, 0x95	; 149
     aee:	1f 4f       	sbci	r17, 0xFF	; 255
     af0:	ce 01       	movw	r24, r28
     af2:	89 59       	subi	r24, 0x99	; 153
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	fc 01       	movw	r30, r24
     af8:	60 81       	ld	r22, Z
     afa:	71 81       	ldd	r23, Z+1	; 0x01
     afc:	82 81       	ldd	r24, Z+2	; 0x02
     afe:	93 81       	ldd	r25, Z+3	; 0x03
     b00:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     b04:	dc 01       	movw	r26, r24
     b06:	cb 01       	movw	r24, r22
     b08:	f8 01       	movw	r30, r16
     b0a:	80 83       	st	Z, r24
     b0c:	91 83       	std	Z+1, r25	; 0x01
     b0e:	ce 01       	movw	r24, r28
     b10:	81 59       	subi	r24, 0x91	; 145
     b12:	9f 4f       	sbci	r25, 0xFF	; 255
     b14:	9e 01       	movw	r18, r28
     b16:	25 59       	subi	r18, 0x95	; 149
     b18:	3f 4f       	sbci	r19, 0xFF	; 255
     b1a:	f9 01       	movw	r30, r18
     b1c:	20 81       	ld	r18, Z
     b1e:	31 81       	ldd	r19, Z+1	; 0x01
     b20:	fc 01       	movw	r30, r24
     b22:	20 83       	st	Z, r18
     b24:	31 83       	std	Z+1, r19	; 0x01
     b26:	ce 01       	movw	r24, r28
     b28:	81 59       	subi	r24, 0x91	; 145
     b2a:	9f 4f       	sbci	r25, 0xFF	; 255
     b2c:	fc 01       	movw	r30, r24
     b2e:	80 81       	ld	r24, Z
     b30:	91 81       	ldd	r25, Z+1	; 0x01
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <__LOCK_REGION_LENGTH__+0x732>
     b36:	9e 01       	movw	r18, r28
     b38:	21 59       	subi	r18, 0x91	; 145
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	f9 01       	movw	r30, r18
     b3e:	80 83       	st	Z, r24
     b40:	91 83       	std	Z+1, r25	; 0x01
		W0_MCU_set_level(false);
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 c5 00 	call	0x18a	; 0x18a <W0_MCU_set_level>
		_delay_ms(delay_1);
     b48:	ce 01       	movw	r24, r28
     b4a:	8e 58       	subi	r24, 0x8E	; 142
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	fc 01       	movw	r30, r24
     b50:	80 81       	ld	r24, Z
     b52:	91 81       	ldd	r25, Z+1	; 0x01
     b54:	cc 01       	movw	r24, r24
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	bc 01       	movw	r22, r24
     b5c:	cd 01       	movw	r24, r26
     b5e:	0e 94 99 08 	call	0x1132	; 0x1132 <__floatunsisf>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	89 8b       	std	Y+17, r24	; 0x11
     b68:	9a 8b       	std	Y+18, r25	; 0x12
     b6a:	ab 8b       	std	Y+19, r26	; 0x13
     b6c:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b6e:	8e 01       	movw	r16, r28
     b70:	03 5a       	subi	r16, 0xA3	; 163
     b72:	1f 4f       	sbci	r17, 0xFF	; 255
     b74:	24 e5       	ldi	r18, 0x54	; 84
     b76:	35 e5       	ldi	r19, 0x55	; 85
     b78:	40 e5       	ldi	r20, 0x50	; 80
     b7a:	54 e4       	ldi	r21, 0x44	; 68
     b7c:	69 89       	ldd	r22, Y+17	; 0x11
     b7e:	7a 89       	ldd	r23, Y+18	; 0x12
     b80:	8b 89       	ldd	r24, Y+19	; 0x13
     b82:	9c 89       	ldd	r25, Y+20	; 0x14
     b84:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     b88:	dc 01       	movw	r26, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	f8 01       	movw	r30, r16
     b8e:	80 83       	st	Z, r24
     b90:	91 83       	std	Z+1, r25	; 0x01
     b92:	a2 83       	std	Z+2, r26	; 0x02
     b94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b96:	ce 01       	movw	r24, r28
     b98:	83 5a       	subi	r24, 0xA3	; 163
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	40 e8       	ldi	r20, 0x80	; 128
     ba2:	5f e3       	ldi	r21, 0x3F	; 63
     ba4:	fc 01       	movw	r30, r24
     ba6:	60 81       	ld	r22, Z
     ba8:	71 81       	ldd	r23, Z+1	; 0x01
     baa:	82 81       	ldd	r24, Z+2	; 0x02
     bac:	93 81       	ldd	r25, Z+3	; 0x03
     bae:	0e 94 65 08 	call	0x10ca	; 0x10ca <__cmpsf2>
     bb2:	88 23       	and	r24, r24
     bb4:	4c f4       	brge	.+18     	; 0xbc8 <__LOCK_REGION_LENGTH__+0x7c8>
		__ticks = 1;
     bb6:	ce 01       	movw	r24, r28
     bb8:	8f 59       	subi	r24, 0x9F	; 159
     bba:	9f 4f       	sbci	r25, 0xFF	; 255
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	fc 01       	movw	r30, r24
     bc2:	20 83       	st	Z, r18
     bc4:	31 83       	std	Z+1, r19	; 0x01
     bc6:	69 c0       	rjmp	.+210    	; 0xc9a <__LOCK_REGION_LENGTH__+0x89a>
	else if (__tmp > 65535)
     bc8:	ce 01       	movw	r24, r28
     bca:	83 5a       	subi	r24, 0xA3	; 163
     bcc:	9f 4f       	sbci	r25, 0xFF	; 255
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	3f ef       	ldi	r19, 0xFF	; 255
     bd2:	4f e7       	ldi	r20, 0x7F	; 127
     bd4:	57 e4       	ldi	r21, 0x47	; 71
     bd6:	fc 01       	movw	r30, r24
     bd8:	60 81       	ld	r22, Z
     bda:	71 81       	ldd	r23, Z+1	; 0x01
     bdc:	82 81       	ldd	r24, Z+2	; 0x02
     bde:	93 81       	ldd	r25, Z+3	; 0x03
     be0:	0e 94 23 09 	call	0x1246	; 0x1246 <__gesf2>
     be4:	18 16       	cp	r1, r24
     be6:	0c f0       	brlt	.+2      	; 0xbea <__LOCK_REGION_LENGTH__+0x7ea>
     be8:	46 c0       	rjmp	.+140    	; 0xc76 <__LOCK_REGION_LENGTH__+0x876>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e2       	ldi	r20, 0x20	; 32
     bf0:	51 e4       	ldi	r21, 0x41	; 65
     bf2:	69 89       	ldd	r22, Y+17	; 0x11
     bf4:	7a 89       	ldd	r23, Y+18	; 0x12
     bf6:	8b 89       	ldd	r24, Y+19	; 0x13
     bf8:	9c 89       	ldd	r25, Y+20	; 0x14
     bfa:	0e 94 28 09 	call	0x1250	; 0x1250 <__mulsf3>
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	8e 01       	movw	r16, r28
     c04:	0f 59       	subi	r16, 0x9F	; 159
     c06:	1f 4f       	sbci	r17, 0xFF	; 255
     c08:	bc 01       	movw	r22, r24
     c0a:	cd 01       	movw	r24, r26
     c0c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	f8 01       	movw	r30, r16
     c16:	80 83       	st	Z, r24
     c18:	91 83       	std	Z+1, r25	; 0x01
     c1a:	24 c0       	rjmp	.+72     	; 0xc64 <__LOCK_REGION_LENGTH__+0x864>
     c1c:	ce 01       	movw	r24, r28
     c1e:	8d 59       	subi	r24, 0x9D	; 157
     c20:	9f 4f       	sbci	r25, 0xFF	; 255
     c22:	23 e5       	ldi	r18, 0x53	; 83
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	fc 01       	movw	r30, r24
     c28:	20 83       	st	Z, r18
     c2a:	31 83       	std	Z+1, r19	; 0x01
     c2c:	ce 01       	movw	r24, r28
     c2e:	8d 59       	subi	r24, 0x9D	; 157
     c30:	9f 4f       	sbci	r25, 0xFF	; 255
     c32:	fc 01       	movw	r30, r24
     c34:	80 81       	ld	r24, Z
     c36:	91 81       	ldd	r25, Z+1	; 0x01
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <__LOCK_REGION_LENGTH__+0x838>
     c3c:	9e 01       	movw	r18, r28
     c3e:	2d 59       	subi	r18, 0x9D	; 157
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	f9 01       	movw	r30, r18
     c44:	80 83       	st	Z, r24
     c46:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	ce 01       	movw	r24, r28
     c4a:	8f 59       	subi	r24, 0x9F	; 159
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	9e 01       	movw	r18, r28
     c50:	2f 59       	subi	r18, 0x9F	; 159
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	31 81       	ldd	r19, Z+1	; 0x01
     c5a:	21 50       	subi	r18, 0x01	; 1
     c5c:	31 09       	sbc	r19, r1
     c5e:	fc 01       	movw	r30, r24
     c60:	20 83       	st	Z, r18
     c62:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c64:	ce 01       	movw	r24, r28
     c66:	8f 59       	subi	r24, 0x9F	; 159
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	89 2b       	or	r24, r25
     c72:	a1 f6       	brne	.-88     	; 0xc1c <__LOCK_REGION_LENGTH__+0x81c>
	}
     c74:	2c c0       	rjmp	.+88     	; 0xcce <__LOCK_REGION_LENGTH__+0x8ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c76:	8e 01       	movw	r16, r28
     c78:	0f 59       	subi	r16, 0x9F	; 159
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	ce 01       	movw	r24, r28
     c7e:	83 5a       	subi	r24, 0xA3	; 163
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	fc 01       	movw	r30, r24
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	82 81       	ldd	r24, Z+2	; 0x02
     c8a:	93 81       	ldd	r25, Z+3	; 0x03
     c8c:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixunssfsi>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	f8 01       	movw	r30, r16
     c96:	80 83       	st	Z, r24
     c98:	91 83       	std	Z+1, r25	; 0x01
     c9a:	ce 01       	movw	r24, r28
     c9c:	8b 59       	subi	r24, 0x9B	; 155
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	9e 01       	movw	r18, r28
     ca2:	2f 59       	subi	r18, 0x9F	; 159
     ca4:	3f 4f       	sbci	r19, 0xFF	; 255
     ca6:	f9 01       	movw	r30, r18
     ca8:	20 81       	ld	r18, Z
     caa:	31 81       	ldd	r19, Z+1	; 0x01
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
     cb0:	31 83       	std	Z+1, r19	; 0x01
     cb2:	ce 01       	movw	r24, r28
     cb4:	8b 59       	subi	r24, 0x9B	; 155
     cb6:	9f 4f       	sbci	r25, 0xFF	; 255
     cb8:	fc 01       	movw	r30, r24
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <__LOCK_REGION_LENGTH__+0x8be>
     cc2:	9e 01       	movw	r18, r28
     cc4:	2b 59       	subi	r18, 0x9B	; 155
     cc6:	3f 4f       	sbci	r19, 0xFF	; 255
     cc8:	f9 01       	movw	r30, r18
     cca:	80 83       	st	Z, r24
     ccc:	91 83       	std	Z+1, r25	; 0x01
     cce:	00 00       	nop
     cd0:	cd 58       	subi	r28, 0x8D	; 141
     cd2:	df 4f       	sbci	r29, 0xFF	; 255
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	08 95       	ret

00000ce2 <main>:
#include <atmel_start.h>
#include "myfunction.h"
int main(void)
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     cea:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	while(1)
	{
		function(W,1000);
     cee:	68 ee       	ldi	r22, 0xE8	; 232
     cf0:	73 e0       	ldi	r23, 0x03	; 3
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <function>
	}
     cf8:	fa cf       	rjmp	.-12     	; 0xcee <main+0xc>

00000cfa <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     d02:	80 e0       	ldi	r24, 0x00	; 0
}
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     d12:	80 e0       	ldi	r24, 0x00	; 0
}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     d22:	80 e0       	ldi	r24, 0x00	; 0
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <PORTD_set_pin_dir+0x6>
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	89 83       	std	Y+1, r24	; 0x01
     d36:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	91 05       	cpc	r25, r1
     d42:	e1 f0       	breq	.+56     	; 0xd7c <PORTD_set_pin_dir+0x52>
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	91 05       	cpc	r25, r1
     d48:	71 f1       	breq	.+92     	; 0xda6 <PORTD_set_pin_dir+0x7c>
     d4a:	89 2b       	or	r24, r25
     d4c:	09 f0       	breq	.+2      	; 0xd50 <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     d4e:	3b c0       	rjmp	.+118    	; 0xdc6 <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
     d50:	8c e0       	ldi	r24, 0x0C	; 12
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	2c e0       	ldi	r18, 0x0C	; 12
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	f9 01       	movw	r30, r18
     d5a:	20 81       	ld	r18, Z
     d5c:	62 2f       	mov	r22, r18
     d5e:	29 81       	ldd	r18, Y+1	; 0x01
     d60:	42 2f       	mov	r20, r18
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	21 e0       	ldi	r18, 0x01	; 1
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <PORTD_set_pin_dir+0x44>
     d6a:	22 0f       	add	r18, r18
     d6c:	33 1f       	adc	r19, r19
     d6e:	4a 95       	dec	r20
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <PORTD_set_pin_dir+0x40>
     d72:	20 95       	com	r18
     d74:	26 23       	and	r18, r22
     d76:	fc 01       	movw	r30, r24
     d78:	20 83       	st	Z, r18
		break;
     d7a:	25 c0       	rjmp	.+74     	; 0xdc6 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     d7c:	8c e0       	ldi	r24, 0x0C	; 12
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	2c e0       	ldi	r18, 0x0C	; 12
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	f9 01       	movw	r30, r18
     d86:	20 81       	ld	r18, Z
     d88:	62 2f       	mov	r22, r18
     d8a:	29 81       	ldd	r18, Y+1	; 0x01
     d8c:	42 2f       	mov	r20, r18
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <PORTD_set_pin_dir+0x70>
     d96:	22 0f       	add	r18, r18
     d98:	33 1f       	adc	r19, r19
     d9a:	4a 95       	dec	r20
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <PORTD_set_pin_dir+0x6c>
     d9e:	26 2b       	or	r18, r22
     da0:	fc 01       	movw	r30, r24
     da2:	20 83       	st	Z, r18
		break;
     da4:	10 c0       	rjmp	.+32     	; 0xdc6 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	80 59       	subi	r24, 0x90	; 144
     dae:	9b 4f       	sbci	r25, 0xFB	; 251
     db0:	29 81       	ldd	r18, Y+1	; 0x01
     db2:	22 2f       	mov	r18, r18
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	20 59       	subi	r18, 0x90	; 144
     db8:	3b 4f       	sbci	r19, 0xFB	; 251
     dba:	f9 01       	movw	r30, r18
     dbc:	20 81       	ld	r18, Z
     dbe:	28 60       	ori	r18, 0x08	; 8
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
		break;
     dc4:	00 00       	nop
	default:
		break;
	}
}
     dc6:	00 00       	nop
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <PORTD_set_pin_level+0x6>
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	88 23       	and	r24, r24
     de4:	a9 f0       	breq	.+42     	; 0xe10 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
     de6:	8c e0       	ldi	r24, 0x0C	; 12
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	2c e0       	ldi	r18, 0x0C	; 12
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	f9 01       	movw	r30, r18
     df0:	21 81       	ldd	r18, Z+1	; 0x01
     df2:	62 2f       	mov	r22, r18
     df4:	29 81       	ldd	r18, Y+1	; 0x01
     df6:	42 2f       	mov	r20, r18
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <PORTD_set_pin_level+0x32>
     e00:	22 0f       	add	r18, r18
     e02:	33 1f       	adc	r19, r19
     e04:	4a 95       	dec	r20
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <PORTD_set_pin_level+0x2e>
     e08:	26 2b       	or	r18, r22
     e0a:	fc 01       	movw	r30, r24
     e0c:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
     e0e:	15 c0       	rjmp	.+42     	; 0xe3a <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     e10:	8c e0       	ldi	r24, 0x0C	; 12
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	2c e0       	ldi	r18, 0x0C	; 12
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	21 81       	ldd	r18, Z+1	; 0x01
     e1c:	62 2f       	mov	r22, r18
     e1e:	29 81       	ldd	r18, Y+1	; 0x01
     e20:	42 2f       	mov	r20, r18
     e22:	50 e0       	ldi	r21, 0x00	; 0
     e24:	21 e0       	ldi	r18, 0x01	; 1
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <PORTD_set_pin_level+0x5c>
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	4a 95       	dec	r20
     e30:	e2 f7       	brpl	.-8      	; 0xe2a <PORTD_set_pin_level+0x58>
     e32:	20 95       	com	r18
     e34:	26 23       	and	r18, r22
     e36:	fc 01       	movw	r30, r24
     e38:	21 83       	std	Z+1, r18	; 0x01
	}
}
     e3a:	00 00       	nop
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	1f 92       	push	r1
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
     e52:	69 81       	ldd	r22, Y+1	; 0x01
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 95 06 	call	0xd2a	; 0xd2a <PORTD_set_pin_dir>
}
     e5a:	00 00       	nop
     e5c:	0f 90       	pop	r0
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	1f 92       	push	r1
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     e70:	69 81       	ldd	r22, Y+1	; 0x01
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <PORTD_set_pin_level>
}
     e78:	00 00       	nop
     e7a:	0f 90       	pop	r0
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	1f 92       	push	r1
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
     e8e:	69 81       	ldd	r22, Y+1	; 0x01
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 95 06 	call	0xd2a	; 0xd2a <PORTD_set_pin_dir>
}
     e96:	00 00       	nop
     e98:	0f 90       	pop	r0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	1f 92       	push	r1
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     eac:	69 81       	ldd	r22, Y+1	; 0x01
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <PORTD_set_pin_level>
}
     eb4:	00 00       	nop
     eb6:	0f 90       	pop	r0
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
     eca:	69 81       	ldd	r22, Y+1	; 0x01
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	0e 94 95 06 	call	0xd2a	; 0xd2a <PORTD_set_pin_dir>
}
     ed2:	00 00       	nop
     ed4:	0f 90       	pop	r0
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	08 95       	ret

00000edc <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	1f 92       	push	r1
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     ee8:	69 81       	ldd	r22, Y+1	; 0x01
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <PORTD_set_pin_level>
}
     ef0:	00 00       	nop
     ef2:	0f 90       	pop	r0
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	1f 92       	push	r1
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(3, dir);
     f06:	69 81       	ldd	r22, Y+1	; 0x01
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	0e 94 95 06 	call	0xd2a	; 0xd2a <PORTD_set_pin_dir>
}
     f0e:	00 00       	nop
     f10:	0f 90       	pop	r0
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	1f 92       	push	r1
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(3, level);
     f24:	69 81       	ldd	r22, Y+1	; 0x01
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <PORTD_set_pin_level>
}
     f2c:	00 00       	nop
     f2e:	0f 90       	pop	r0
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	26 97       	sbiw	r28, 0x06	; 6
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     f44:	19 82       	std	Y+1, r1	; 0x01
     f46:	12 c0       	rjmp	.+36     	; 0xf6c <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	80 5f       	subi	r24, 0xF0	; 240
     f50:	9b 4f       	sbci	r25, 0xFB	; 251
     f52:	29 81       	ldd	r18, Y+1	; 0x01
     f54:	22 2f       	mov	r18, r18
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	20 5f       	subi	r18, 0xF0	; 240
     f5a:	3b 4f       	sbci	r19, 0xFB	; 251
     f5c:	f9 01       	movw	r30, r18
     f5e:	20 81       	ld	r18, Z
     f60:	28 60       	ori	r18, 0x08	; 8
     f62:	fc 01       	movw	r30, r24
     f64:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	8f 5f       	subi	r24, 0xFF	; 255
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	88 30       	cpi	r24, 0x08	; 8
     f70:	58 f3       	brcs	.-42     	; 0xf48 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f72:	1a 82       	std	Y+2, r1	; 0x02
     f74:	12 c0       	rjmp	.+36     	; 0xf9a <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	80 5d       	subi	r24, 0xD0	; 208
     f7e:	9b 4f       	sbci	r25, 0xFB	; 251
     f80:	2a 81       	ldd	r18, Y+2	; 0x02
     f82:	22 2f       	mov	r18, r18
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	20 5d       	subi	r18, 0xD0	; 208
     f88:	3b 4f       	sbci	r19, 0xFB	; 251
     f8a:	f9 01       	movw	r30, r18
     f8c:	20 81       	ld	r18, Z
     f8e:	28 60       	ori	r18, 0x08	; 8
     f90:	fc 01       	movw	r30, r24
     f92:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	8a 83       	std	Y+2, r24	; 0x02
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	88 30       	cpi	r24, 0x08	; 8
     f9e:	58 f3       	brcs	.-42     	; 0xf76 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     fa0:	1b 82       	std	Y+3, r1	; 0x03
     fa2:	12 c0       	rjmp	.+36     	; 0xfc8 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	80 5b       	subi	r24, 0xB0	; 176
     fac:	9b 4f       	sbci	r25, 0xFB	; 251
     fae:	2b 81       	ldd	r18, Y+3	; 0x03
     fb0:	22 2f       	mov	r18, r18
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	20 5b       	subi	r18, 0xB0	; 176
     fb6:	3b 4f       	sbci	r19, 0xFB	; 251
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	28 60       	ori	r18, 0x08	; 8
     fbe:	fc 01       	movw	r30, r24
     fc0:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	8b 83       	std	Y+3, r24	; 0x03
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 30       	cpi	r24, 0x08	; 8
     fcc:	58 f3       	brcs	.-42     	; 0xfa4 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     fce:	1c 82       	std	Y+4, r1	; 0x04
     fd0:	12 c0       	rjmp	.+36     	; 0xff6 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     fd2:	8c 81       	ldd	r24, Y+4	; 0x04
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	80 59       	subi	r24, 0x90	; 144
     fda:	9b 4f       	sbci	r25, 0xFB	; 251
     fdc:	2c 81       	ldd	r18, Y+4	; 0x04
     fde:	22 2f       	mov	r18, r18
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	20 59       	subi	r18, 0x90	; 144
     fe4:	3b 4f       	sbci	r19, 0xFB	; 251
     fe6:	f9 01       	movw	r30, r18
     fe8:	20 81       	ld	r18, Z
     fea:	28 60       	ori	r18, 0x08	; 8
     fec:	fc 01       	movw	r30, r24
     fee:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	8c 83       	std	Y+4, r24	; 0x04
     ff6:	8c 81       	ldd	r24, Y+4	; 0x04
     ff8:	88 30       	cpi	r24, 0x08	; 8
     ffa:	58 f3       	brcs	.-42     	; 0xfd2 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     ffc:	1d 82       	std	Y+5, r1	; 0x05
     ffe:	12 c0       	rjmp	.+36     	; 0x1024 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	80 57       	subi	r24, 0x70	; 112
    1008:	9b 4f       	sbci	r25, 0xFB	; 251
    100a:	2d 81       	ldd	r18, Y+5	; 0x05
    100c:	22 2f       	mov	r18, r18
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	20 57       	subi	r18, 0x70	; 112
    1012:	3b 4f       	sbci	r19, 0xFB	; 251
    1014:	f9 01       	movw	r30, r18
    1016:	20 81       	ld	r18, Z
    1018:	28 60       	ori	r18, 0x08	; 8
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	8d 83       	std	Y+5, r24	; 0x05
    1024:	8d 81       	ldd	r24, Y+5	; 0x05
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	58 f3       	brcs	.-42     	; 0x1000 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    102a:	1e 82       	std	Y+6, r1	; 0x06
    102c:	12 c0       	rjmp	.+36     	; 0x1052 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    102e:	8e 81       	ldd	r24, Y+6	; 0x06
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	80 55       	subi	r24, 0x50	; 80
    1036:	9b 4f       	sbci	r25, 0xFB	; 251
    1038:	2e 81       	ldd	r18, Y+6	; 0x06
    103a:	22 2f       	mov	r18, r18
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	20 55       	subi	r18, 0x50	; 80
    1040:	3b 4f       	sbci	r19, 0xFB	; 251
    1042:	f9 01       	movw	r30, r18
    1044:	20 81       	ld	r18, Z
    1046:	28 60       	ori	r18, 0x08	; 8
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    104c:	8e 81       	ldd	r24, Y+6	; 0x06
    104e:	8f 5f       	subi	r24, 0xFF	; 255
    1050:	8e 83       	std	Y+6, r24	; 0x06
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	88 30       	cpi	r24, 0x08	; 8
    1056:	58 f3       	brcs	.-42     	; 0x102e <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    1058:	00 00       	nop
    105a:	26 96       	adiw	r28, 0x06	; 6
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret

00001066 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    106e:	0e 94 9b 07 	call	0xf36	; 0xf36 <mcu_init>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	0e 94 32 07 	call	0xe64	; 0xe64 <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	0e 94 23 07 	call	0xe46	; 0xe46 <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	0e 94 50 07 	call	0xea0	; 0xea0 <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	0e 94 41 07 	call	0xe82	; 0xe82 <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	0e 94 6e 07 	call	0xedc	; 0xedc <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	0e 94 5f 07 	call	0xebe	; 0xebe <B0_MCU_set_dir>

	/* PORT setting on PD3 */

	// Set pin direction to output

	W0_MCU_set_level(
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	0e 94 8c 07 	call	0xf18	; 0xf18 <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	0e 94 7d 07 	call	0xefa	; 0xefa <W0_MCU_set_dir>

	CLKCTRL_init();
    10a2:	0e 94 85 06 	call	0xd0a	; 0xd0a <CLKCTRL_init>

	CPUINT_init();
    10a6:	0e 94 8d 06 	call	0xd1a	; 0xd1a <CPUINT_init>

	SLPCTRL_init();
    10aa:	0e 94 5d 08 	call	0x10ba	; 0x10ba <SLPCTRL_init>

	BOD_init();
    10ae:	0e 94 7d 06 	call	0xcfa	; 0xcfa <BOD_init>
}
    10b2:	00 00       	nop
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    10c2:	80 e0       	ldi	r24, 0x00	; 0
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <__cmpsf2>:
    10ca:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_cmp>
    10ce:	08 f4       	brcc	.+2      	; 0x10d2 <__cmpsf2+0x8>
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	08 95       	ret

000010d4 <__fixunssfsi>:
    10d4:	0e 94 02 09 	call	0x1204	; 0x1204 <__fp_splitA>
    10d8:	88 f0       	brcs	.+34     	; 0x10fc <__fixunssfsi+0x28>
    10da:	9f 57       	subi	r25, 0x7F	; 127
    10dc:	98 f0       	brcs	.+38     	; 0x1104 <__fixunssfsi+0x30>
    10de:	b9 2f       	mov	r27, r25
    10e0:	99 27       	eor	r25, r25
    10e2:	b7 51       	subi	r27, 0x17	; 23
    10e4:	b0 f0       	brcs	.+44     	; 0x1112 <__fixunssfsi+0x3e>
    10e6:	e1 f0       	breq	.+56     	; 0x1120 <__fixunssfsi+0x4c>
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	1a f0       	brmi	.+6      	; 0x10f8 <__fixunssfsi+0x24>
    10f2:	ba 95       	dec	r27
    10f4:	c9 f7       	brne	.-14     	; 0x10e8 <__fixunssfsi+0x14>
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <__fixunssfsi+0x4c>
    10f8:	b1 30       	cpi	r27, 0x01	; 1
    10fa:	91 f0       	breq	.+36     	; 0x1120 <__fixunssfsi+0x4c>
    10fc:	0e 94 1c 09 	call	0x1238	; 0x1238 <__fp_zero>
    1100:	b1 e0       	ldi	r27, 0x01	; 1
    1102:	08 95       	ret
    1104:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__fp_zero>
    1108:	67 2f       	mov	r22, r23
    110a:	78 2f       	mov	r23, r24
    110c:	88 27       	eor	r24, r24
    110e:	b8 5f       	subi	r27, 0xF8	; 248
    1110:	39 f0       	breq	.+14     	; 0x1120 <__fixunssfsi+0x4c>
    1112:	b9 3f       	cpi	r27, 0xF9	; 249
    1114:	cc f3       	brlt	.-14     	; 0x1108 <__fixunssfsi+0x34>
    1116:	86 95       	lsr	r24
    1118:	77 95       	ror	r23
    111a:	67 95       	ror	r22
    111c:	b3 95       	inc	r27
    111e:	d9 f7       	brne	.-10     	; 0x1116 <__fixunssfsi+0x42>
    1120:	3e f4       	brtc	.+14     	; 0x1130 <__fixunssfsi+0x5c>
    1122:	90 95       	com	r25
    1124:	80 95       	com	r24
    1126:	70 95       	com	r23
    1128:	61 95       	neg	r22
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	8f 4f       	sbci	r24, 0xFF	; 255
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	08 95       	ret

00001132 <__floatunsisf>:
    1132:	e8 94       	clt
    1134:	09 c0       	rjmp	.+18     	; 0x1148 <__floatsisf+0x12>

00001136 <__floatsisf>:
    1136:	97 fb       	bst	r25, 7
    1138:	3e f4       	brtc	.+14     	; 0x1148 <__floatsisf+0x12>
    113a:	90 95       	com	r25
    113c:	80 95       	com	r24
    113e:	70 95       	com	r23
    1140:	61 95       	neg	r22
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	8f 4f       	sbci	r24, 0xFF	; 255
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	99 23       	and	r25, r25
    114a:	a9 f0       	breq	.+42     	; 0x1176 <__floatsisf+0x40>
    114c:	f9 2f       	mov	r31, r25
    114e:	96 e9       	ldi	r25, 0x96	; 150
    1150:	bb 27       	eor	r27, r27
    1152:	93 95       	inc	r25
    1154:	f6 95       	lsr	r31
    1156:	87 95       	ror	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f1 11       	cpse	r31, r1
    1160:	f8 cf       	rjmp	.-16     	; 0x1152 <__floatsisf+0x1c>
    1162:	fa f4       	brpl	.+62     	; 0x11a2 <__floatsisf+0x6c>
    1164:	bb 0f       	add	r27, r27
    1166:	11 f4       	brne	.+4      	; 0x116c <__floatsisf+0x36>
    1168:	60 ff       	sbrs	r22, 0
    116a:	1b c0       	rjmp	.+54     	; 0x11a2 <__floatsisf+0x6c>
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	8f 4f       	sbci	r24, 0xFF	; 255
    1172:	9f 4f       	sbci	r25, 0xFF	; 255
    1174:	16 c0       	rjmp	.+44     	; 0x11a2 <__floatsisf+0x6c>
    1176:	88 23       	and	r24, r24
    1178:	11 f0       	breq	.+4      	; 0x117e <__floatsisf+0x48>
    117a:	96 e9       	ldi	r25, 0x96	; 150
    117c:	11 c0       	rjmp	.+34     	; 0x11a0 <__floatsisf+0x6a>
    117e:	77 23       	and	r23, r23
    1180:	21 f0       	breq	.+8      	; 0x118a <__floatsisf+0x54>
    1182:	9e e8       	ldi	r25, 0x8E	; 142
    1184:	87 2f       	mov	r24, r23
    1186:	76 2f       	mov	r23, r22
    1188:	05 c0       	rjmp	.+10     	; 0x1194 <__floatsisf+0x5e>
    118a:	66 23       	and	r22, r22
    118c:	71 f0       	breq	.+28     	; 0x11aa <__floatsisf+0x74>
    118e:	96 e8       	ldi	r25, 0x86	; 134
    1190:	86 2f       	mov	r24, r22
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	2a f0       	brmi	.+10     	; 0x11a2 <__floatsisf+0x6c>
    1198:	9a 95       	dec	r25
    119a:	66 0f       	add	r22, r22
    119c:	77 1f       	adc	r23, r23
    119e:	88 1f       	adc	r24, r24
    11a0:	da f7       	brpl	.-10     	; 0x1198 <__floatsisf+0x62>
    11a2:	88 0f       	add	r24, r24
    11a4:	96 95       	lsr	r25
    11a6:	87 95       	ror	r24
    11a8:	97 f9       	bld	r25, 7
    11aa:	08 95       	ret

000011ac <__fp_cmp>:
    11ac:	99 0f       	add	r25, r25
    11ae:	00 08       	sbc	r0, r0
    11b0:	55 0f       	add	r21, r21
    11b2:	aa 0b       	sbc	r26, r26
    11b4:	e0 e8       	ldi	r30, 0x80	; 128
    11b6:	fe ef       	ldi	r31, 0xFE	; 254
    11b8:	16 16       	cp	r1, r22
    11ba:	17 06       	cpc	r1, r23
    11bc:	e8 07       	cpc	r30, r24
    11be:	f9 07       	cpc	r31, r25
    11c0:	c0 f0       	brcs	.+48     	; 0x11f2 <__fp_cmp+0x46>
    11c2:	12 16       	cp	r1, r18
    11c4:	13 06       	cpc	r1, r19
    11c6:	e4 07       	cpc	r30, r20
    11c8:	f5 07       	cpc	r31, r21
    11ca:	98 f0       	brcs	.+38     	; 0x11f2 <__fp_cmp+0x46>
    11cc:	62 1b       	sub	r22, r18
    11ce:	73 0b       	sbc	r23, r19
    11d0:	84 0b       	sbc	r24, r20
    11d2:	95 0b       	sbc	r25, r21
    11d4:	39 f4       	brne	.+14     	; 0x11e4 <__fp_cmp+0x38>
    11d6:	0a 26       	eor	r0, r26
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <__fp_cmp+0x46>
    11da:	23 2b       	or	r18, r19
    11dc:	24 2b       	or	r18, r20
    11de:	25 2b       	or	r18, r21
    11e0:	21 f4       	brne	.+8      	; 0x11ea <__fp_cmp+0x3e>
    11e2:	08 95       	ret
    11e4:	0a 26       	eor	r0, r26
    11e6:	09 f4       	brne	.+2      	; 0x11ea <__fp_cmp+0x3e>
    11e8:	a1 40       	sbci	r26, 0x01	; 1
    11ea:	a6 95       	lsr	r26
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	81 1d       	adc	r24, r1
    11f0:	81 1d       	adc	r24, r1
    11f2:	08 95       	ret

000011f4 <__fp_split3>:
    11f4:	57 fd       	sbrc	r21, 7
    11f6:	90 58       	subi	r25, 0x80	; 128
    11f8:	44 0f       	add	r20, r20
    11fa:	55 1f       	adc	r21, r21
    11fc:	59 f0       	breq	.+22     	; 0x1214 <__fp_splitA+0x10>
    11fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1200:	71 f0       	breq	.+28     	; 0x121e <__fp_splitA+0x1a>
    1202:	47 95       	ror	r20

00001204 <__fp_splitA>:
    1204:	88 0f       	add	r24, r24
    1206:	97 fb       	bst	r25, 7
    1208:	99 1f       	adc	r25, r25
    120a:	61 f0       	breq	.+24     	; 0x1224 <__fp_splitA+0x20>
    120c:	9f 3f       	cpi	r25, 0xFF	; 255
    120e:	79 f0       	breq	.+30     	; 0x122e <__fp_splitA+0x2a>
    1210:	87 95       	ror	r24
    1212:	08 95       	ret
    1214:	12 16       	cp	r1, r18
    1216:	13 06       	cpc	r1, r19
    1218:	14 06       	cpc	r1, r20
    121a:	55 1f       	adc	r21, r21
    121c:	f2 cf       	rjmp	.-28     	; 0x1202 <__fp_split3+0xe>
    121e:	46 95       	lsr	r20
    1220:	f1 df       	rcall	.-30     	; 0x1204 <__fp_splitA>
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <__fp_splitA+0x30>
    1224:	16 16       	cp	r1, r22
    1226:	17 06       	cpc	r1, r23
    1228:	18 06       	cpc	r1, r24
    122a:	99 1f       	adc	r25, r25
    122c:	f1 cf       	rjmp	.-30     	; 0x1210 <__fp_splitA+0xc>
    122e:	86 95       	lsr	r24
    1230:	71 05       	cpc	r23, r1
    1232:	61 05       	cpc	r22, r1
    1234:	08 94       	sec
    1236:	08 95       	ret

00001238 <__fp_zero>:
    1238:	e8 94       	clt

0000123a <__fp_szero>:
    123a:	bb 27       	eor	r27, r27
    123c:	66 27       	eor	r22, r22
    123e:	77 27       	eor	r23, r23
    1240:	cb 01       	movw	r24, r22
    1242:	97 f9       	bld	r25, 7
    1244:	08 95       	ret

00001246 <__gesf2>:
    1246:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_cmp>
    124a:	08 f4       	brcc	.+2      	; 0x124e <__gesf2+0x8>
    124c:	8f ef       	ldi	r24, 0xFF	; 255
    124e:	08 95       	ret

00001250 <__mulsf3>:
    1250:	0e 94 3b 09 	call	0x1276	; 0x1276 <__mulsf3x>
    1254:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__fp_round>
    1258:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_pscA>
    125c:	38 f0       	brcs	.+14     	; 0x126c <__mulsf3+0x1c>
    125e:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_pscB>
    1262:	20 f0       	brcs	.+8      	; 0x126c <__mulsf3+0x1c>
    1264:	95 23       	and	r25, r21
    1266:	11 f0       	breq	.+4      	; 0x126c <__mulsf3+0x1c>
    1268:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_inf>
    126c:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_nan>
    1270:	11 24       	eor	r1, r1
    1272:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__fp_szero>

00001276 <__mulsf3x>:
    1276:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fp_split3>
    127a:	70 f3       	brcs	.-36     	; 0x1258 <__mulsf3+0x8>

0000127c <__mulsf3_pse>:
    127c:	95 9f       	mul	r25, r21
    127e:	c1 f3       	breq	.-16     	; 0x1270 <__mulsf3+0x20>
    1280:	95 0f       	add	r25, r21
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	55 1f       	adc	r21, r21
    1286:	62 9f       	mul	r22, r18
    1288:	f0 01       	movw	r30, r0
    128a:	72 9f       	mul	r23, r18
    128c:	bb 27       	eor	r27, r27
    128e:	f0 0d       	add	r31, r0
    1290:	b1 1d       	adc	r27, r1
    1292:	63 9f       	mul	r22, r19
    1294:	aa 27       	eor	r26, r26
    1296:	f0 0d       	add	r31, r0
    1298:	b1 1d       	adc	r27, r1
    129a:	aa 1f       	adc	r26, r26
    129c:	64 9f       	mul	r22, r20
    129e:	66 27       	eor	r22, r22
    12a0:	b0 0d       	add	r27, r0
    12a2:	a1 1d       	adc	r26, r1
    12a4:	66 1f       	adc	r22, r22
    12a6:	82 9f       	mul	r24, r18
    12a8:	22 27       	eor	r18, r18
    12aa:	b0 0d       	add	r27, r0
    12ac:	a1 1d       	adc	r26, r1
    12ae:	62 1f       	adc	r22, r18
    12b0:	73 9f       	mul	r23, r19
    12b2:	b0 0d       	add	r27, r0
    12b4:	a1 1d       	adc	r26, r1
    12b6:	62 1f       	adc	r22, r18
    12b8:	83 9f       	mul	r24, r19
    12ba:	a0 0d       	add	r26, r0
    12bc:	61 1d       	adc	r22, r1
    12be:	22 1f       	adc	r18, r18
    12c0:	74 9f       	mul	r23, r20
    12c2:	33 27       	eor	r19, r19
    12c4:	a0 0d       	add	r26, r0
    12c6:	61 1d       	adc	r22, r1
    12c8:	23 1f       	adc	r18, r19
    12ca:	84 9f       	mul	r24, r20
    12cc:	60 0d       	add	r22, r0
    12ce:	21 1d       	adc	r18, r1
    12d0:	82 2f       	mov	r24, r18
    12d2:	76 2f       	mov	r23, r22
    12d4:	6a 2f       	mov	r22, r26
    12d6:	11 24       	eor	r1, r1
    12d8:	9f 57       	subi	r25, 0x7F	; 127
    12da:	50 40       	sbci	r21, 0x00	; 0
    12dc:	9a f0       	brmi	.+38     	; 0x1304 <__mulsf3_pse+0x88>
    12de:	f1 f0       	breq	.+60     	; 0x131c <__mulsf3_pse+0xa0>
    12e0:	88 23       	and	r24, r24
    12e2:	4a f0       	brmi	.+18     	; 0x12f6 <__mulsf3_pse+0x7a>
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	bb 1f       	adc	r27, r27
    12ea:	66 1f       	adc	r22, r22
    12ec:	77 1f       	adc	r23, r23
    12ee:	88 1f       	adc	r24, r24
    12f0:	91 50       	subi	r25, 0x01	; 1
    12f2:	50 40       	sbci	r21, 0x00	; 0
    12f4:	a9 f7       	brne	.-22     	; 0x12e0 <__mulsf3_pse+0x64>
    12f6:	9e 3f       	cpi	r25, 0xFE	; 254
    12f8:	51 05       	cpc	r21, r1
    12fa:	80 f0       	brcs	.+32     	; 0x131c <__mulsf3_pse+0xa0>
    12fc:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_inf>
    1300:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__fp_szero>
    1304:	5f 3f       	cpi	r21, 0xFF	; 255
    1306:	e4 f3       	brlt	.-8      	; 0x1300 <__mulsf3_pse+0x84>
    1308:	98 3e       	cpi	r25, 0xE8	; 232
    130a:	d4 f3       	brlt	.-12     	; 0x1300 <__mulsf3_pse+0x84>
    130c:	86 95       	lsr	r24
    130e:	77 95       	ror	r23
    1310:	67 95       	ror	r22
    1312:	b7 95       	ror	r27
    1314:	f7 95       	ror	r31
    1316:	e7 95       	ror	r30
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	c1 f7       	brne	.-16     	; 0x130c <__mulsf3_pse+0x90>
    131c:	fe 2b       	or	r31, r30
    131e:	88 0f       	add	r24, r24
    1320:	91 1d       	adc	r25, r1
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	97 f9       	bld	r25, 7
    1328:	08 95       	ret

0000132a <__fp_inf>:
    132a:	97 f9       	bld	r25, 7
    132c:	9f 67       	ori	r25, 0x7F	; 127
    132e:	80 e8       	ldi	r24, 0x80	; 128
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	08 95       	ret

00001336 <__fp_nan>:
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	80 ec       	ldi	r24, 0xC0	; 192
    133a:	08 95       	ret

0000133c <__fp_pscA>:
    133c:	00 24       	eor	r0, r0
    133e:	0a 94       	dec	r0
    1340:	16 16       	cp	r1, r22
    1342:	17 06       	cpc	r1, r23
    1344:	18 06       	cpc	r1, r24
    1346:	09 06       	cpc	r0, r25
    1348:	08 95       	ret

0000134a <__fp_pscB>:
    134a:	00 24       	eor	r0, r0
    134c:	0a 94       	dec	r0
    134e:	12 16       	cp	r1, r18
    1350:	13 06       	cpc	r1, r19
    1352:	14 06       	cpc	r1, r20
    1354:	05 06       	cpc	r0, r21
    1356:	08 95       	ret

00001358 <__fp_round>:
    1358:	09 2e       	mov	r0, r25
    135a:	03 94       	inc	r0
    135c:	00 0c       	add	r0, r0
    135e:	11 f4       	brne	.+4      	; 0x1364 <__fp_round+0xc>
    1360:	88 23       	and	r24, r24
    1362:	52 f0       	brmi	.+20     	; 0x1378 <__fp_round+0x20>
    1364:	bb 0f       	add	r27, r27
    1366:	40 f4       	brcc	.+16     	; 0x1378 <__fp_round+0x20>
    1368:	bf 2b       	or	r27, r31
    136a:	11 f4       	brne	.+4      	; 0x1370 <__fp_round+0x18>
    136c:	60 ff       	sbrs	r22, 0
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <__fp_round+0x20>
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	08 95       	ret

0000137a <_exit>:
    137a:	f8 94       	cli

0000137c <__stop_program>:
    137c:	ff cf       	rjmp	.-2      	; 0x137c <__stop_program>
