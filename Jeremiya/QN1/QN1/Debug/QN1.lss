
QN1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003083  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002646  00000000  00000000  00003453  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000954  00000000  00000000  00005a99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000063f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001326  00000000  00000000  00006530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002db  00000000  00000000  00007856  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00007b31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  a0:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <system_init>
  ac:	08 95       	ret

000000ae <led_on>:
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
  ae:	88 23       	and	r24, r24
  b0:	21 f0       	breq	.+8      	; 0xba <led_on+0xc>
		VPORTD.OUT |= (1 << pin);
  b2:	8d b1       	in	r24, 0x0d	; 13
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8d b9       	out	0x0d, r24	; 13
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <led_on+0x12>
	} else {
		VPORTD.OUT &= ~(1 << pin);
  ba:	8d b1       	in	r24, 0x0d	; 13
  bc:	8e 7f       	andi	r24, 0xFE	; 254
  be:	8d b9       	out	0x0d, r24	; 13
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
  c0:	66 23       	and	r22, r22
  c2:	21 f0       	breq	.+8      	; 0xcc <led_on+0x1e>
		VPORTD.OUT |= (1 << pin);
  c4:	8d b1       	in	r24, 0x0d	; 13
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8d b9       	out	0x0d, r24	; 13
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <led_on+0x24>
	} else {
		VPORTD.OUT &= ~(1 << pin);
  cc:	8d b1       	in	r24, 0x0d	; 13
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	8d b9       	out	0x0d, r24	; 13
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
  d2:	44 23       	and	r20, r20
  d4:	21 f0       	breq	.+8      	; 0xde <led_on+0x30>
		VPORTD.OUT |= (1 << pin);
  d6:	8d b1       	in	r24, 0x0d	; 13
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	8d b9       	out	0x0d, r24	; 13
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <led_on+0x36>
	} else {
		VPORTD.OUT &= ~(1 << pin);
  de:	8d b1       	in	r24, 0x0d	; 13
  e0:	8b 7f       	andi	r24, 0xFB	; 251
  e2:	8d b9       	out	0x0d, r24	; 13
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
  e4:	22 23       	and	r18, r18
  e6:	21 f0       	breq	.+8      	; 0xf0 <led_on+0x42>
		VPORTD.OUT |= (1 << pin);
  e8:	8d b1       	in	r24, 0x0d	; 13
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	8d b9       	out	0x0d, r24	; 13
  ee:	08 95       	ret
	} else {
		VPORTD.OUT &= ~(1 << pin);
  f0:	8d b1       	in	r24, 0x0d	; 13
  f2:	87 7f       	andi	r24, 0xF7	; 247
  f4:	8d b9       	out	0x0d, r24	; 13
  f6:	08 95       	ret

000000f8 <main>:
#include "function.h"
#include <stdint.h>
int main(void)
{
	/* Initializes MCU, drivers and middle ware */
	atmel_start_init();
  f8:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	//led_on(R,G,B,W);
	led_on(0,1,1,0);
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	41 e0       	ldi	r20, 0x01	; 1
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 57 00 	call	0xae	; 0xae <led_on>
	return 0;
}
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	08 95       	ret

0000010e <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret

00000112 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret

00000116 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 95       	ret

0000011a <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 c0       	rjmp	.+16     	; 0x12e <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 11e:	e8 2f       	mov	r30, r24
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	e0 5f       	subi	r30, 0xF0	; 240
 124:	fb 4f       	sbci	r31, 0xFB	; 251
 126:	90 81       	ld	r25, Z
 128:	98 60       	ori	r25, 0x08	; 8
 12a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	b0 f3       	brcs	.-20     	; 0x11e <mcu_init+0x4>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 c0       	rjmp	.+16     	; 0x146 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	e0 5d       	subi	r30, 0xD0	; 208
 13c:	fb 4f       	sbci	r31, 0xFB	; 251
 13e:	90 81       	ld	r25, Z
 140:	98 60       	ori	r25, 0x08	; 8
 142:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	b0 f3       	brcs	.-20     	; 0x136 <mcu_init+0x1c>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 c0       	rjmp	.+16     	; 0x15e <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 14e:	e8 2f       	mov	r30, r24
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e0 5b       	subi	r30, 0xB0	; 176
 154:	fb 4f       	sbci	r31, 0xFB	; 251
 156:	90 81       	ld	r25, Z
 158:	98 60       	ori	r25, 0x08	; 8
 15a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	b0 f3       	brcs	.-20     	; 0x14e <mcu_init+0x34>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 c0       	rjmp	.+16     	; 0x176 <mcu_init+0x5c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e0 59       	subi	r30, 0x90	; 144
 16c:	fb 4f       	sbci	r31, 0xFB	; 251
 16e:	90 81       	ld	r25, Z
 170:	98 60       	ori	r25, 0x08	; 8
 172:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	b0 f3       	brcs	.-20     	; 0x166 <mcu_init+0x4c>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	08 c0       	rjmp	.+16     	; 0x18e <mcu_init+0x74>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 17e:	e8 2f       	mov	r30, r24
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e0 57       	subi	r30, 0x70	; 112
 184:	fb 4f       	sbci	r31, 0xFB	; 251
 186:	90 81       	ld	r25, Z
 188:	98 60       	ori	r25, 0x08	; 8
 18a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	88 30       	cpi	r24, 0x08	; 8
 190:	b0 f3       	brcs	.-20     	; 0x17e <mcu_init+0x64>
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 c0       	rjmp	.+16     	; 0x1a6 <mcu_init+0x8c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 196:	e8 2f       	mov	r30, r24
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	e0 55       	subi	r30, 0x50	; 80
 19c:	fb 4f       	sbci	r31, 0xFB	; 251
 19e:	90 81       	ld	r25, Z
 1a0:	98 60       	ori	r25, 0x08	; 8
 1a2:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 1a4:	8f 5f       	subi	r24, 0xFF	; 255
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	b0 f3       	brcs	.-20     	; 0x196 <mcu_init+0x7c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 1aa:	08 95       	ret

000001ac <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1ac:	0e 94 8d 00 	call	0x11a	; 0x11a <mcu_init>
 1b0:	8d b1       	in	r24, 0x0d	; 13
 1b2:	8e 7f       	andi	r24, 0xFE	; 254
 1b4:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 1b6:	8c b1       	in	r24, 0x0c	; 12
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 1bc:	8d b1       	in	r24, 0x0d	; 13
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 1c2:	8c b1       	in	r24, 0x0c	; 12
 1c4:	82 60       	ori	r24, 0x02	; 2
 1c6:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 1c8:	8d b1       	in	r24, 0x0d	; 13
 1ca:	8b 7f       	andi	r24, 0xFB	; 251
 1cc:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 1ce:	8c b1       	in	r24, 0x0c	; 12
 1d0:	84 60       	ori	r24, 0x04	; 4
 1d2:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 1d4:	8d b1       	in	r24, 0x0d	; 13
 1d6:	87 7f       	andi	r24, 0xF7	; 247
 1d8:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 1da:	8c b1       	in	r24, 0x0c	; 12
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	8c b9       	out	0x0c, r24	; 12
	    // <true"> High
	    false);

	W_MCU_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 1e0:	0e 94 89 00 	call	0x112	; 0x112 <CLKCTRL_init>

	CPUINT_init();
 1e4:	0e 94 8b 00 	call	0x116	; 0x116 <CPUINT_init>

	SLPCTRL_init();
 1e8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <SLPCTRL_init>

	BOD_init();
 1ec:	0e 94 87 00 	call	0x10e	; 0x10e <BOD_init>
 1f0:	08 95       	ret

000001f2 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
