
QN3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f64  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003000  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002634  00000000  00000000  00004198  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d29  00000000  00000000  000067cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000036c  00000000  00000000  000074f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001347  00000000  00000000  00007864  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ee  00000000  00000000  00008bab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00009199  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 81 04 	call	0x902	; 0x902 <main>
  a0:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 2c 06 	call	0xc58	; 0xc58 <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <PORTD_set_pin_level+0x6>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	88 23       	and	r24, r24
  ce:	a9 f0       	breq	.+42     	; 0xfa <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
  d0:	8c e0       	ldi	r24, 0x0C	; 12
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2c e0       	ldi	r18, 0x0C	; 12
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	f9 01       	movw	r30, r18
  da:	21 81       	ldd	r18, Z+1	; 0x01
  dc:	62 2f       	mov	r22, r18
  de:	29 81       	ldd	r18, Y+1	; 0x01
  e0:	42 2f       	mov	r20, r18
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <PORTD_set_pin_level+0x32>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	4a 95       	dec	r20
  f0:	e2 f7       	brpl	.-8      	; 0xea <PORTD_set_pin_level+0x2e>
  f2:	26 2b       	or	r18, r22
  f4:	fc 01       	movw	r30, r24
  f6:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
  f8:	15 c0       	rjmp	.+42     	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
  fa:	8c e0       	ldi	r24, 0x0C	; 12
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2c e0       	ldi	r18, 0x0C	; 12
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	21 81       	ldd	r18, Z+1	; 0x01
 106:	62 2f       	mov	r22, r18
 108:	29 81       	ldd	r18, Y+1	; 0x01
 10a:	42 2f       	mov	r20, r18
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	4a 95       	dec	r20
 11a:	e2 f7       	brpl	.-8      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 11c:	20 95       	com	r18
 11e:	26 23       	and	r18, r22
 120:	fc 01       	movw	r30, r24
 122:	21 83       	std	Z+1, r18	; 0x01
	}
}
 124:	00 00       	nop
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <R_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R_MCU_set_level(const bool level)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	1f 92       	push	r1
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 13c:	69 81       	ldd	r22, Y+1	; 0x01
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
 144:	00 00       	nop
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <G_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G_MCU_set_level(const bool level)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	1f 92       	push	r1
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 15a:	69 81       	ldd	r22, Y+1	; 0x01
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
 162:	00 00       	nop
 164:	0f 90       	pop	r0
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <B_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B_MCU_set_level(const bool level)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	1f 92       	push	r1
 172:	cd b7       	in	r28, 0x3d	; 61
 174:	de b7       	in	r29, 0x3e	; 62
 176:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 178:	69 81       	ldd	r22, Y+1	; 0x01
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
 180:	00 00       	nop
 182:	0f 90       	pop	r0
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <delayfn>:
#include <atmel_start.h>
#include <stdbool.h>
#include <util/delay.h>
#define __DELAY_BACKWARD_COMPATIBLE__
void delayfn(uint16_t dr,uint16_t dg,uint16_t db)
{
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	ca 55       	subi	r28, 0x5A	; 90
 198:	d1 09       	sbc	r29, r1
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	9e 01       	movw	r18, r28
 1a0:	2b 5a       	subi	r18, 0xAB	; 171
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	f9 01       	movw	r30, r18
 1a6:	80 83       	st	Z, r24
 1a8:	91 83       	std	Z+1, r25	; 0x01
 1aa:	ce 01       	movw	r24, r28
 1ac:	89 5a       	subi	r24, 0xA9	; 169
 1ae:	9f 4f       	sbci	r25, 0xFF	; 255
 1b0:	fc 01       	movw	r30, r24
 1b2:	60 83       	st	Z, r22
 1b4:	71 83       	std	Z+1, r23	; 0x01
 1b6:	ce 01       	movw	r24, r28
 1b8:	87 5a       	subi	r24, 0xA7	; 167
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
 1bc:	fc 01       	movw	r30, r24
 1be:	40 83       	st	Z, r20
 1c0:	51 83       	std	Z+1, r21	; 0x01
	R_MCU_set_level(true);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 98 00 	call	0x130	; 0x130 <R_MCU_set_level>
	_delay_ms(dr);
 1c8:	ce 01       	movw	r24, r28
 1ca:	8b 5a       	subi	r24, 0xAB	; 171
 1cc:	9f 4f       	sbci	r25, 0xFF	; 255
 1ce:	fc 01       	movw	r30, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	91 81       	ldd	r25, Z+1	; 0x01
 1d4:	cc 01       	movw	r24, r24
 1d6:	a0 e0       	ldi	r26, 0x00	; 0
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	bc 01       	movw	r22, r24
 1dc:	cd 01       	movw	r24, r26
 1de:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatunsisf>
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22
 1e6:	89 83       	std	Y+1, r24	; 0x01
 1e8:	9a 83       	std	Y+2, r25	; 0x02
 1ea:	ab 83       	std	Y+3, r26	; 0x03
 1ec:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1ee:	8e 01       	movw	r16, r28
 1f0:	05 5b       	subi	r16, 0xB5	; 181
 1f2:	1f 4f       	sbci	r17, 0xFF	; 255
 1f4:	24 e5       	ldi	r18, 0x54	; 84
 1f6:	35 e5       	ldi	r19, 0x55	; 85
 1f8:	40 e5       	ldi	r20, 0x50	; 80
 1fa:	54 e4       	ldi	r21, 0x44	; 68
 1fc:	69 81       	ldd	r22, Y+1	; 0x01
 1fe:	7a 81       	ldd	r23, Y+2	; 0x02
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	9c 81       	ldd	r25, Y+4	; 0x04
 204:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 208:	dc 01       	movw	r26, r24
 20a:	cb 01       	movw	r24, r22
 20c:	f8 01       	movw	r30, r16
 20e:	80 83       	st	Z, r24
 210:	91 83       	std	Z+1, r25	; 0x01
 212:	a2 83       	std	Z+2, r26	; 0x02
 214:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 216:	ce 01       	movw	r24, r28
 218:	85 5b       	subi	r24, 0xB5	; 181
 21a:	9f 4f       	sbci	r25, 0xFF	; 255
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	40 e8       	ldi	r20, 0x80	; 128
 222:	5f e3       	ldi	r21, 0x3F	; 63
 224:	fc 01       	movw	r30, r24
 226:	60 81       	ld	r22, Z
 228:	71 81       	ldd	r23, Z+1	; 0x01
 22a:	82 81       	ldd	r24, Z+2	; 0x02
 22c:	93 81       	ldd	r25, Z+3	; 0x03
 22e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__cmpsf2>
 232:	88 23       	and	r24, r24
 234:	4c f4       	brge	.+18     	; 0x248 <delayfn+0xbe>
		__ticks = 1;
 236:	ce 01       	movw	r24, r28
 238:	81 5b       	subi	r24, 0xB1	; 177
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
 244:	31 83       	std	Z+1, r19	; 0x01
 246:	69 c0       	rjmp	.+210    	; 0x31a <delayfn+0x190>
	else if (__tmp > 65535)
 248:	ce 01       	movw	r24, r28
 24a:	85 5b       	subi	r24, 0xB5	; 181
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	3f ef       	ldi	r19, 0xFF	; 255
 252:	4f e7       	ldi	r20, 0x7F	; 127
 254:	57 e4       	ldi	r21, 0x47	; 71
 256:	fc 01       	movw	r30, r24
 258:	60 81       	ld	r22, Z
 25a:	71 81       	ldd	r23, Z+1	; 0x01
 25c:	82 81       	ldd	r24, Z+2	; 0x02
 25e:	93 81       	ldd	r25, Z+3	; 0x03
 260:	0e 94 16 07 	call	0xe2c	; 0xe2c <__gesf2>
 264:	18 16       	cp	r1, r24
 266:	0c f0       	brlt	.+2      	; 0x26a <delayfn+0xe0>
 268:	46 c0       	rjmp	.+140    	; 0x2f6 <delayfn+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 e2       	ldi	r20, 0x20	; 32
 270:	51 e4       	ldi	r21, 0x41	; 65
 272:	69 81       	ldd	r22, Y+1	; 0x01
 274:	7a 81       	ldd	r23, Y+2	; 0x02
 276:	8b 81       	ldd	r24, Y+3	; 0x03
 278:	9c 81       	ldd	r25, Y+4	; 0x04
 27a:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 27e:	dc 01       	movw	r26, r24
 280:	cb 01       	movw	r24, r22
 282:	8e 01       	movw	r16, r28
 284:	01 5b       	subi	r16, 0xB1	; 177
 286:	1f 4f       	sbci	r17, 0xFF	; 255
 288:	bc 01       	movw	r22, r24
 28a:	cd 01       	movw	r24, r26
 28c:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 290:	dc 01       	movw	r26, r24
 292:	cb 01       	movw	r24, r22
 294:	f8 01       	movw	r30, r16
 296:	80 83       	st	Z, r24
 298:	91 83       	std	Z+1, r25	; 0x01
 29a:	24 c0       	rjmp	.+72     	; 0x2e4 <delayfn+0x15a>
 29c:	ce 01       	movw	r24, r28
 29e:	8f 5a       	subi	r24, 0xAF	; 175
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	23 e5       	ldi	r18, 0x53	; 83
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	fc 01       	movw	r30, r24
 2a8:	20 83       	st	Z, r18
 2aa:	31 83       	std	Z+1, r19	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2ac:	ce 01       	movw	r24, r28
 2ae:	8f 5a       	subi	r24, 0xAF	; 175
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
 2b2:	fc 01       	movw	r30, r24
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <delayfn+0x12e>
 2bc:	9e 01       	movw	r18, r28
 2be:	2f 5a       	subi	r18, 0xAF	; 175
 2c0:	3f 4f       	sbci	r19, 0xFF	; 255
 2c2:	f9 01       	movw	r30, r18
 2c4:	80 83       	st	Z, r24
 2c6:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c8:	ce 01       	movw	r24, r28
 2ca:	81 5b       	subi	r24, 0xB1	; 177
 2cc:	9f 4f       	sbci	r25, 0xFF	; 255
 2ce:	9e 01       	movw	r18, r28
 2d0:	21 5b       	subi	r18, 0xB1	; 177
 2d2:	3f 4f       	sbci	r19, 0xFF	; 255
 2d4:	f9 01       	movw	r30, r18
 2d6:	20 81       	ld	r18, Z
 2d8:	31 81       	ldd	r19, Z+1	; 0x01
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	31 09       	sbc	r19, r1
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2e4:	ce 01       	movw	r24, r28
 2e6:	81 5b       	subi	r24, 0xB1	; 177
 2e8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ea:	fc 01       	movw	r30, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	91 81       	ldd	r25, Z+1	; 0x01
 2f0:	89 2b       	or	r24, r25
 2f2:	a1 f6       	brne	.-88     	; 0x29c <delayfn+0x112>
 2f4:	2c c0       	rjmp	.+88     	; 0x34e <delayfn+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2f6:	8e 01       	movw	r16, r28
 2f8:	01 5b       	subi	r16, 0xB1	; 177
 2fa:	1f 4f       	sbci	r17, 0xFF	; 255
 2fc:	ce 01       	movw	r24, r28
 2fe:	85 5b       	subi	r24, 0xB5	; 181
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	fc 01       	movw	r30, r24
 304:	60 81       	ld	r22, Z
 306:	71 81       	ldd	r23, Z+1	; 0x01
 308:	82 81       	ldd	r24, Z+2	; 0x02
 30a:	93 81       	ldd	r25, Z+3	; 0x03
 30c:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 310:	dc 01       	movw	r26, r24
 312:	cb 01       	movw	r24, r22
 314:	f8 01       	movw	r30, r16
 316:	80 83       	st	Z, r24
 318:	91 83       	std	Z+1, r25	; 0x01
 31a:	ce 01       	movw	r24, r28
 31c:	8d 5a       	subi	r24, 0xAD	; 173
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	9e 01       	movw	r18, r28
 322:	21 5b       	subi	r18, 0xB1	; 177
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	31 81       	ldd	r19, Z+1	; 0x01
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
 330:	31 83       	std	Z+1, r19	; 0x01
 332:	ce 01       	movw	r24, r28
 334:	8d 5a       	subi	r24, 0xAD	; 173
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	fc 01       	movw	r30, r24
 33a:	80 81       	ld	r24, Z
 33c:	91 81       	ldd	r25, Z+1	; 0x01
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <delayfn+0x1b4>
 342:	9e 01       	movw	r18, r28
 344:	2d 5a       	subi	r18, 0xAD	; 173
 346:	3f 4f       	sbci	r19, 0xFF	; 255
 348:	f9 01       	movw	r30, r18
 34a:	80 83       	st	Z, r24
 34c:	91 83       	std	Z+1, r25	; 0x01
	R_MCU_set_level(false);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 98 00 	call	0x130	; 0x130 <R_MCU_set_level>
	_delay_ms(dr);
 354:	ce 01       	movw	r24, r28
 356:	8b 5a       	subi	r24, 0xAB	; 171
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	fc 01       	movw	r30, r24
 35c:	80 81       	ld	r24, Z
 35e:	91 81       	ldd	r25, Z+1	; 0x01
 360:	cc 01       	movw	r24, r24
 362:	a0 e0       	ldi	r26, 0x00	; 0
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	bc 01       	movw	r22, r24
 368:	cd 01       	movw	r24, r26
 36a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatunsisf>
 36e:	dc 01       	movw	r26, r24
 370:	cb 01       	movw	r24, r22
 372:	8d 83       	std	Y+5, r24	; 0x05
 374:	9e 83       	std	Y+6, r25	; 0x06
 376:	af 83       	std	Y+7, r26	; 0x07
 378:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 37a:	8e 01       	movw	r16, r28
 37c:	0f 5b       	subi	r16, 0xBF	; 191
 37e:	1f 4f       	sbci	r17, 0xFF	; 255
 380:	24 e5       	ldi	r18, 0x54	; 84
 382:	35 e5       	ldi	r19, 0x55	; 85
 384:	40 e5       	ldi	r20, 0x50	; 80
 386:	54 e4       	ldi	r21, 0x44	; 68
 388:	6d 81       	ldd	r22, Y+5	; 0x05
 38a:	7e 81       	ldd	r23, Y+6	; 0x06
 38c:	8f 81       	ldd	r24, Y+7	; 0x07
 38e:	98 85       	ldd	r25, Y+8	; 0x08
 390:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 394:	dc 01       	movw	r26, r24
 396:	cb 01       	movw	r24, r22
 398:	f8 01       	movw	r30, r16
 39a:	80 83       	st	Z, r24
 39c:	91 83       	std	Z+1, r25	; 0x01
 39e:	a2 83       	std	Z+2, r26	; 0x02
 3a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
 3a2:	ce 01       	movw	r24, r28
 3a4:	8f 5b       	subi	r24, 0xBF	; 191
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	40 e8       	ldi	r20, 0x80	; 128
 3ae:	5f e3       	ldi	r21, 0x3F	; 63
 3b0:	fc 01       	movw	r30, r24
 3b2:	60 81       	ld	r22, Z
 3b4:	71 81       	ldd	r23, Z+1	; 0x01
 3b6:	82 81       	ldd	r24, Z+2	; 0x02
 3b8:	93 81       	ldd	r25, Z+3	; 0x03
 3ba:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__cmpsf2>
 3be:	88 23       	and	r24, r24
 3c0:	4c f4       	brge	.+18     	; 0x3d4 <delayfn+0x24a>
		__ticks = 1;
 3c2:	ce 01       	movw	r24, r28
 3c4:	8b 5b       	subi	r24, 0xBB	; 187
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
 3d0:	31 83       	std	Z+1, r19	; 0x01
 3d2:	69 c0       	rjmp	.+210    	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
	else if (__tmp > 65535)
 3d4:	ce 01       	movw	r24, r28
 3d6:	8f 5b       	subi	r24, 0xBF	; 191
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	3f ef       	ldi	r19, 0xFF	; 255
 3de:	4f e7       	ldi	r20, 0x7F	; 127
 3e0:	57 e4       	ldi	r21, 0x47	; 71
 3e2:	fc 01       	movw	r30, r24
 3e4:	60 81       	ld	r22, Z
 3e6:	71 81       	ldd	r23, Z+1	; 0x01
 3e8:	82 81       	ldd	r24, Z+2	; 0x02
 3ea:	93 81       	ldd	r25, Z+3	; 0x03
 3ec:	0e 94 16 07 	call	0xe2c	; 0xe2c <__gesf2>
 3f0:	18 16       	cp	r1, r24
 3f2:	0c f0       	brlt	.+2      	; 0x3f6 <delayfn+0x26c>
 3f4:	46 c0       	rjmp	.+140    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	40 e2       	ldi	r20, 0x20	; 32
 3fc:	51 e4       	ldi	r21, 0x41	; 65
 3fe:	6d 81       	ldd	r22, Y+5	; 0x05
 400:	7e 81       	ldd	r23, Y+6	; 0x06
 402:	8f 81       	ldd	r24, Y+7	; 0x07
 404:	98 85       	ldd	r25, Y+8	; 0x08
 406:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 40a:	dc 01       	movw	r26, r24
 40c:	cb 01       	movw	r24, r22
 40e:	8e 01       	movw	r16, r28
 410:	0b 5b       	subi	r16, 0xBB	; 187
 412:	1f 4f       	sbci	r17, 0xFF	; 255
 414:	bc 01       	movw	r22, r24
 416:	cd 01       	movw	r24, r26
 418:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 41c:	dc 01       	movw	r26, r24
 41e:	cb 01       	movw	r24, r22
 420:	f8 01       	movw	r30, r16
 422:	80 83       	st	Z, r24
 424:	91 83       	std	Z+1, r25	; 0x01
 426:	24 c0       	rjmp	.+72     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 428:	ce 01       	movw	r24, r28
 42a:	89 5b       	subi	r24, 0xB9	; 185
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	23 e5       	ldi	r18, 0x53	; 83
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
 436:	31 83       	std	Z+1, r19	; 0x01
 438:	ce 01       	movw	r24, r28
 43a:	89 5b       	subi	r24, 0xB9	; 185
 43c:	9f 4f       	sbci	r25, 0xFF	; 255
 43e:	fc 01       	movw	r30, r24
 440:	80 81       	ld	r24, Z
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	9e 01       	movw	r18, r28
 44a:	29 5b       	subi	r18, 0xB9	; 185
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	f9 01       	movw	r30, r18
 450:	80 83       	st	Z, r24
 452:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 454:	ce 01       	movw	r24, r28
 456:	8b 5b       	subi	r24, 0xBB	; 187
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	9e 01       	movw	r18, r28
 45c:	2b 5b       	subi	r18, 0xBB	; 187
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	f9 01       	movw	r30, r18
 462:	20 81       	ld	r18, Z
 464:	31 81       	ldd	r19, Z+1	; 0x01
 466:	21 50       	subi	r18, 0x01	; 1
 468:	31 09       	sbc	r19, r1
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
 46e:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 470:	ce 01       	movw	r24, r28
 472:	8b 5b       	subi	r24, 0xBB	; 187
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	fc 01       	movw	r30, r24
 478:	80 81       	ld	r24, Z
 47a:	91 81       	ldd	r25, Z+1	; 0x01
 47c:	89 2b       	or	r24, r25
 47e:	a1 f6       	brne	.-88     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 480:	2c c0       	rjmp	.+88     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 482:	8e 01       	movw	r16, r28
 484:	0b 5b       	subi	r16, 0xBB	; 187
 486:	1f 4f       	sbci	r17, 0xFF	; 255
 488:	ce 01       	movw	r24, r28
 48a:	8f 5b       	subi	r24, 0xBF	; 191
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	fc 01       	movw	r30, r24
 490:	60 81       	ld	r22, Z
 492:	71 81       	ldd	r23, Z+1	; 0x01
 494:	82 81       	ldd	r24, Z+2	; 0x02
 496:	93 81       	ldd	r25, Z+3	; 0x03
 498:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 49c:	dc 01       	movw	r26, r24
 49e:	cb 01       	movw	r24, r22
 4a0:	f8 01       	movw	r30, r16
 4a2:	80 83       	st	Z, r24
 4a4:	91 83       	std	Z+1, r25	; 0x01
 4a6:	ce 01       	movw	r24, r28
 4a8:	87 5b       	subi	r24, 0xB7	; 183
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	9e 01       	movw	r18, r28
 4ae:	2b 5b       	subi	r18, 0xBB	; 187
 4b0:	3f 4f       	sbci	r19, 0xFF	; 255
 4b2:	f9 01       	movw	r30, r18
 4b4:	20 81       	ld	r18, Z
 4b6:	31 81       	ldd	r19, Z+1	; 0x01
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
 4bc:	31 83       	std	Z+1, r19	; 0x01
 4be:	ce 01       	movw	r24, r28
 4c0:	87 5b       	subi	r24, 0xB7	; 183
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	fc 01       	movw	r30, r24
 4c6:	80 81       	ld	r24, Z
 4c8:	91 81       	ldd	r25, Z+1	; 0x01
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4ce:	9e 01       	movw	r18, r28
 4d0:	27 5b       	subi	r18, 0xB7	; 183
 4d2:	3f 4f       	sbci	r19, 0xFF	; 255
 4d4:	f9 01       	movw	r30, r18
 4d6:	80 83       	st	Z, r24
 4d8:	91 83       	std	Z+1, r25	; 0x01
	G_MCU_set_level(true);
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 a7 00 	call	0x14e	; 0x14e <G_MCU_set_level>
	_delay_ms(dg);
 4e0:	ce 01       	movw	r24, r28
 4e2:	89 5a       	subi	r24, 0xA9	; 169
 4e4:	9f 4f       	sbci	r25, 0xFF	; 255
 4e6:	fc 01       	movw	r30, r24
 4e8:	80 81       	ld	r24, Z
 4ea:	91 81       	ldd	r25, Z+1	; 0x01
 4ec:	cc 01       	movw	r24, r24
 4ee:	a0 e0       	ldi	r26, 0x00	; 0
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	bc 01       	movw	r22, r24
 4f4:	cd 01       	movw	r24, r26
 4f6:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatunsisf>
 4fa:	dc 01       	movw	r26, r24
 4fc:	cb 01       	movw	r24, r22
 4fe:	89 87       	std	Y+9, r24	; 0x09
 500:	9a 87       	std	Y+10, r25	; 0x0a
 502:	ab 87       	std	Y+11, r26	; 0x0b
 504:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 506:	24 e5       	ldi	r18, 0x54	; 84
 508:	35 e5       	ldi	r19, 0x55	; 85
 50a:	40 e5       	ldi	r20, 0x50	; 80
 50c:	54 e4       	ldi	r21, 0x44	; 68
 50e:	69 85       	ldd	r22, Y+9	; 0x09
 510:	7a 85       	ldd	r23, Y+10	; 0x0a
 512:	8b 85       	ldd	r24, Y+11	; 0x0b
 514:	9c 85       	ldd	r25, Y+12	; 0x0c
 516:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 51a:	dc 01       	movw	r26, r24
 51c:	cb 01       	movw	r24, r22
 51e:	8f ab       	std	Y+55, r24	; 0x37
 520:	98 af       	std	Y+56, r25	; 0x38
 522:	a9 af       	std	Y+57, r26	; 0x39
 524:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	40 e8       	ldi	r20, 0x80	; 128
 52c:	5f e3       	ldi	r21, 0x3F	; 63
 52e:	6f a9       	ldd	r22, Y+55	; 0x37
 530:	78 ad       	ldd	r23, Y+56	; 0x38
 532:	89 ad       	ldd	r24, Y+57	; 0x39
 534:	9a ad       	ldd	r25, Y+58	; 0x3a
 536:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__cmpsf2>
 53a:	88 23       	and	r24, r24
 53c:	2c f4       	brge	.+10     	; 0x548 <__LOCK_REGION_LENGTH__+0x148>
		__ticks = 1;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	8b af       	std	Y+59, r24	; 0x3b
 544:	9c af       	std	Y+60, r25	; 0x3c
 546:	3f c0       	rjmp	.+126    	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
	else if (__tmp > 65535)
 548:	20 e0       	ldi	r18, 0x00	; 0
 54a:	3f ef       	ldi	r19, 0xFF	; 255
 54c:	4f e7       	ldi	r20, 0x7F	; 127
 54e:	57 e4       	ldi	r21, 0x47	; 71
 550:	6f a9       	ldd	r22, Y+55	; 0x37
 552:	78 ad       	ldd	r23, Y+56	; 0x38
 554:	89 ad       	ldd	r24, Y+57	; 0x39
 556:	9a ad       	ldd	r25, Y+58	; 0x3a
 558:	0e 94 16 07 	call	0xe2c	; 0xe2c <__gesf2>
 55c:	18 16       	cp	r1, r24
 55e:	4c f5       	brge	.+82     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	40 e2       	ldi	r20, 0x20	; 32
 566:	51 e4       	ldi	r21, 0x41	; 65
 568:	69 85       	ldd	r22, Y+9	; 0x09
 56a:	7a 85       	ldd	r23, Y+10	; 0x0a
 56c:	8b 85       	ldd	r24, Y+11	; 0x0b
 56e:	9c 85       	ldd	r25, Y+12	; 0x0c
 570:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 574:	dc 01       	movw	r26, r24
 576:	cb 01       	movw	r24, r22
 578:	bc 01       	movw	r22, r24
 57a:	cd 01       	movw	r24, r26
 57c:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 580:	dc 01       	movw	r26, r24
 582:	cb 01       	movw	r24, r22
 584:	8b af       	std	Y+59, r24	; 0x3b
 586:	9c af       	std	Y+60, r25	; 0x3c
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
 58a:	83 e5       	ldi	r24, 0x53	; 83
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	8d af       	std	Y+61, r24	; 0x3d
 590:	9e af       	std	Y+62, r25	; 0x3e
 592:	8d ad       	ldd	r24, Y+61	; 0x3d
 594:	9e ad       	ldd	r25, Y+62	; 0x3e
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 59a:	8d af       	std	Y+61, r24	; 0x3d
 59c:	9e af       	std	Y+62, r25	; 0x3e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 59e:	8b ad       	ldd	r24, Y+59	; 0x3b
 5a0:	9c ad       	ldd	r25, Y+60	; 0x3c
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	8b af       	std	Y+59, r24	; 0x3b
 5a6:	9c af       	std	Y+60, r25	; 0x3c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5a8:	8b ad       	ldd	r24, Y+59	; 0x3b
 5aa:	9c ad       	ldd	r25, Y+60	; 0x3c
 5ac:	89 2b       	or	r24, r25
 5ae:	69 f7       	brne	.-38     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 5b0:	1e c0       	rjmp	.+60     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5b2:	6f a9       	ldd	r22, Y+55	; 0x37
 5b4:	78 ad       	ldd	r23, Y+56	; 0x38
 5b6:	89 ad       	ldd	r24, Y+57	; 0x39
 5b8:	9a ad       	ldd	r25, Y+58	; 0x3a
 5ba:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 5be:	dc 01       	movw	r26, r24
 5c0:	cb 01       	movw	r24, r22
 5c2:	8b af       	std	Y+59, r24	; 0x3b
 5c4:	9c af       	std	Y+60, r25	; 0x3c
 5c6:	2b ad       	ldd	r18, Y+59	; 0x3b
 5c8:	3c ad       	ldd	r19, Y+60	; 0x3c
 5ca:	ce 01       	movw	r24, r28
 5cc:	cf 96       	adiw	r24, 0x3f	; 63
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 83       	st	Z, r18
 5d2:	31 83       	std	Z+1, r19	; 0x01
 5d4:	ce 01       	movw	r24, r28
 5d6:	cf 96       	adiw	r24, 0x3f	; 63
 5d8:	fc 01       	movw	r30, r24
 5da:	80 81       	ld	r24, Z
 5dc:	91 81       	ldd	r25, Z+1	; 0x01
 5de:	01 97       	sbiw	r24, 0x01	; 1
 5e0:	f1 f7       	brne	.-4      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
 5e2:	9e 01       	movw	r18, r28
 5e4:	21 5c       	subi	r18, 0xC1	; 193
 5e6:	3f 4f       	sbci	r19, 0xFF	; 255
 5e8:	f9 01       	movw	r30, r18
 5ea:	80 83       	st	Z, r24
 5ec:	91 83       	std	Z+1, r25	; 0x01
	G_MCU_set_level(false);
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	0e 94 a7 00 	call	0x14e	; 0x14e <G_MCU_set_level>
	_delay_ms(dg);
 5f4:	ce 01       	movw	r24, r28
 5f6:	89 5a       	subi	r24, 0xA9	; 169
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	fc 01       	movw	r30, r24
 5fc:	80 81       	ld	r24, Z
 5fe:	91 81       	ldd	r25, Z+1	; 0x01
 600:	cc 01       	movw	r24, r24
 602:	a0 e0       	ldi	r26, 0x00	; 0
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	bc 01       	movw	r22, r24
 608:	cd 01       	movw	r24, r26
 60a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatunsisf>
 60e:	dc 01       	movw	r26, r24
 610:	cb 01       	movw	r24, r22
 612:	8d 87       	std	Y+13, r24	; 0x0d
 614:	9e 87       	std	Y+14, r25	; 0x0e
 616:	af 87       	std	Y+15, r26	; 0x0f
 618:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 61a:	24 e5       	ldi	r18, 0x54	; 84
 61c:	35 e5       	ldi	r19, 0x55	; 85
 61e:	40 e5       	ldi	r20, 0x50	; 80
 620:	54 e4       	ldi	r21, 0x44	; 68
 622:	6d 85       	ldd	r22, Y+13	; 0x0d
 624:	7e 85       	ldd	r23, Y+14	; 0x0e
 626:	8f 85       	ldd	r24, Y+15	; 0x0f
 628:	98 89       	ldd	r25, Y+16	; 0x10
 62a:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 62e:	dc 01       	movw	r26, r24
 630:	cb 01       	movw	r24, r22
 632:	8d a7       	std	Y+45, r24	; 0x2d
 634:	9e a7       	std	Y+46, r25	; 0x2e
 636:	af a7       	std	Y+47, r26	; 0x2f
 638:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
 63a:	20 e0       	ldi	r18, 0x00	; 0
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	40 e8       	ldi	r20, 0x80	; 128
 640:	5f e3       	ldi	r21, 0x3F	; 63
 642:	6d a5       	ldd	r22, Y+45	; 0x2d
 644:	7e a5       	ldd	r23, Y+46	; 0x2e
 646:	8f a5       	ldd	r24, Y+47	; 0x2f
 648:	98 a9       	ldd	r25, Y+48	; 0x30
 64a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__cmpsf2>
 64e:	88 23       	and	r24, r24
 650:	2c f4       	brge	.+10     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
		__ticks = 1;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	89 ab       	std	Y+49, r24	; 0x31
 658:	9a ab       	std	Y+50, r25	; 0x32
 65a:	3f c0       	rjmp	.+126    	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
	else if (__tmp > 65535)
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	3f ef       	ldi	r19, 0xFF	; 255
 660:	4f e7       	ldi	r20, 0x7F	; 127
 662:	57 e4       	ldi	r21, 0x47	; 71
 664:	6d a5       	ldd	r22, Y+45	; 0x2d
 666:	7e a5       	ldd	r23, Y+46	; 0x2e
 668:	8f a5       	ldd	r24, Y+47	; 0x2f
 66a:	98 a9       	ldd	r25, Y+48	; 0x30
 66c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__gesf2>
 670:	18 16       	cp	r1, r24
 672:	4c f5       	brge	.+82     	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	40 e2       	ldi	r20, 0x20	; 32
 67a:	51 e4       	ldi	r21, 0x41	; 65
 67c:	6d 85       	ldd	r22, Y+13	; 0x0d
 67e:	7e 85       	ldd	r23, Y+14	; 0x0e
 680:	8f 85       	ldd	r24, Y+15	; 0x0f
 682:	98 89       	ldd	r25, Y+16	; 0x10
 684:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 688:	dc 01       	movw	r26, r24
 68a:	cb 01       	movw	r24, r22
 68c:	bc 01       	movw	r22, r24
 68e:	cd 01       	movw	r24, r26
 690:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 694:	dc 01       	movw	r26, r24
 696:	cb 01       	movw	r24, r22
 698:	89 ab       	std	Y+49, r24	; 0x31
 69a:	9a ab       	std	Y+50, r25	; 0x32
 69c:	0f c0       	rjmp	.+30     	; 0x6bc <__LOCK_REGION_LENGTH__+0x2bc>
 69e:	83 e5       	ldi	r24, 0x53	; 83
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	8b ab       	std	Y+51, r24	; 0x33
 6a4:	9c ab       	std	Y+52, r25	; 0x34
 6a6:	8b a9       	ldd	r24, Y+51	; 0x33
 6a8:	9c a9       	ldd	r25, Y+52	; 0x34
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
 6ae:	8b ab       	std	Y+51, r24	; 0x33
 6b0:	9c ab       	std	Y+52, r25	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6b2:	89 a9       	ldd	r24, Y+49	; 0x31
 6b4:	9a a9       	ldd	r25, Y+50	; 0x32
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	89 ab       	std	Y+49, r24	; 0x31
 6ba:	9a ab       	std	Y+50, r25	; 0x32
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6bc:	89 a9       	ldd	r24, Y+49	; 0x31
 6be:	9a a9       	ldd	r25, Y+50	; 0x32
 6c0:	89 2b       	or	r24, r25
 6c2:	69 f7       	brne	.-38     	; 0x69e <__LOCK_REGION_LENGTH__+0x29e>
 6c4:	14 c0       	rjmp	.+40     	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6c6:	6d a5       	ldd	r22, Y+45	; 0x2d
 6c8:	7e a5       	ldd	r23, Y+46	; 0x2e
 6ca:	8f a5       	ldd	r24, Y+47	; 0x2f
 6cc:	98 a9       	ldd	r25, Y+48	; 0x30
 6ce:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 6d2:	dc 01       	movw	r26, r24
 6d4:	cb 01       	movw	r24, r22
 6d6:	89 ab       	std	Y+49, r24	; 0x31
 6d8:	9a ab       	std	Y+50, r25	; 0x32
 6da:	89 a9       	ldd	r24, Y+49	; 0x31
 6dc:	9a a9       	ldd	r25, Y+50	; 0x32
 6de:	8d ab       	std	Y+53, r24	; 0x35
 6e0:	9e ab       	std	Y+54, r25	; 0x36
 6e2:	8d a9       	ldd	r24, Y+53	; 0x35
 6e4:	9e a9       	ldd	r25, Y+54	; 0x36
 6e6:	01 97       	sbiw	r24, 0x01	; 1
 6e8:	f1 f7       	brne	.-4      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
 6ea:	8d ab       	std	Y+53, r24	; 0x35
 6ec:	9e ab       	std	Y+54, r25	; 0x36
	B_MCU_set_level(true);
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	0e 94 b6 00 	call	0x16c	; 0x16c <B_MCU_set_level>
	_delay_ms(db);
 6f4:	ce 01       	movw	r24, r28
 6f6:	87 5a       	subi	r24, 0xA7	; 167
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	fc 01       	movw	r30, r24
 6fc:	80 81       	ld	r24, Z
 6fe:	91 81       	ldd	r25, Z+1	; 0x01
 700:	cc 01       	movw	r24, r24
 702:	a0 e0       	ldi	r26, 0x00	; 0
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	bc 01       	movw	r22, r24
 708:	cd 01       	movw	r24, r26
 70a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatunsisf>
 70e:	dc 01       	movw	r26, r24
 710:	cb 01       	movw	r24, r22
 712:	89 8b       	std	Y+17, r24	; 0x11
 714:	9a 8b       	std	Y+18, r25	; 0x12
 716:	ab 8b       	std	Y+19, r26	; 0x13
 718:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 71a:	24 e5       	ldi	r18, 0x54	; 84
 71c:	35 e5       	ldi	r19, 0x55	; 85
 71e:	40 e5       	ldi	r20, 0x50	; 80
 720:	54 e4       	ldi	r21, 0x44	; 68
 722:	69 89       	ldd	r22, Y+17	; 0x11
 724:	7a 89       	ldd	r23, Y+18	; 0x12
 726:	8b 89       	ldd	r24, Y+19	; 0x13
 728:	9c 89       	ldd	r25, Y+20	; 0x14
 72a:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 72e:	dc 01       	movw	r26, r24
 730:	cb 01       	movw	r24, r22
 732:	8b a3       	std	Y+35, r24	; 0x23
 734:	9c a3       	std	Y+36, r25	; 0x24
 736:	ad a3       	std	Y+37, r26	; 0x25
 738:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
 73a:	20 e0       	ldi	r18, 0x00	; 0
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	40 e8       	ldi	r20, 0x80	; 128
 740:	5f e3       	ldi	r21, 0x3F	; 63
 742:	6b a1       	ldd	r22, Y+35	; 0x23
 744:	7c a1       	ldd	r23, Y+36	; 0x24
 746:	8d a1       	ldd	r24, Y+37	; 0x25
 748:	9e a1       	ldd	r25, Y+38	; 0x26
 74a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__cmpsf2>
 74e:	88 23       	and	r24, r24
 750:	2c f4       	brge	.+10     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
		__ticks = 1;
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	8f a3       	std	Y+39, r24	; 0x27
 758:	98 a7       	std	Y+40, r25	; 0x28
 75a:	3f c0       	rjmp	.+126    	; 0x7da <__LOCK_REGION_LENGTH__+0x3da>
	else if (__tmp > 65535)
 75c:	20 e0       	ldi	r18, 0x00	; 0
 75e:	3f ef       	ldi	r19, 0xFF	; 255
 760:	4f e7       	ldi	r20, 0x7F	; 127
 762:	57 e4       	ldi	r21, 0x47	; 71
 764:	6b a1       	ldd	r22, Y+35	; 0x23
 766:	7c a1       	ldd	r23, Y+36	; 0x24
 768:	8d a1       	ldd	r24, Y+37	; 0x25
 76a:	9e a1       	ldd	r25, Y+38	; 0x26
 76c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__gesf2>
 770:	18 16       	cp	r1, r24
 772:	4c f5       	brge	.+82     	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	40 e2       	ldi	r20, 0x20	; 32
 77a:	51 e4       	ldi	r21, 0x41	; 65
 77c:	69 89       	ldd	r22, Y+17	; 0x11
 77e:	7a 89       	ldd	r23, Y+18	; 0x12
 780:	8b 89       	ldd	r24, Y+19	; 0x13
 782:	9c 89       	ldd	r25, Y+20	; 0x14
 784:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 788:	dc 01       	movw	r26, r24
 78a:	cb 01       	movw	r24, r22
 78c:	bc 01       	movw	r22, r24
 78e:	cd 01       	movw	r24, r26
 790:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 794:	dc 01       	movw	r26, r24
 796:	cb 01       	movw	r24, r22
 798:	8f a3       	std	Y+39, r24	; 0x27
 79a:	98 a7       	std	Y+40, r25	; 0x28
 79c:	0f c0       	rjmp	.+30     	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
 79e:	83 e5       	ldi	r24, 0x53	; 83
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	89 a7       	std	Y+41, r24	; 0x29
 7a4:	9a a7       	std	Y+42, r25	; 0x2a
 7a6:	89 a5       	ldd	r24, Y+41	; 0x29
 7a8:	9a a5       	ldd	r25, Y+42	; 0x2a
 7aa:	01 97       	sbiw	r24, 0x01	; 1
 7ac:	f1 f7       	brne	.-4      	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
 7ae:	89 a7       	std	Y+41, r24	; 0x29
 7b0:	9a a7       	std	Y+42, r25	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7b2:	8f a1       	ldd	r24, Y+39	; 0x27
 7b4:	98 a5       	ldd	r25, Y+40	; 0x28
 7b6:	01 97       	sbiw	r24, 0x01	; 1
 7b8:	8f a3       	std	Y+39, r24	; 0x27
 7ba:	98 a7       	std	Y+40, r25	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7bc:	8f a1       	ldd	r24, Y+39	; 0x27
 7be:	98 a5       	ldd	r25, Y+40	; 0x28
 7c0:	89 2b       	or	r24, r25
 7c2:	69 f7       	brne	.-38     	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
 7c4:	14 c0       	rjmp	.+40     	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 7c6:	6b a1       	ldd	r22, Y+35	; 0x23
 7c8:	7c a1       	ldd	r23, Y+36	; 0x24
 7ca:	8d a1       	ldd	r24, Y+37	; 0x25
 7cc:	9e a1       	ldd	r25, Y+38	; 0x26
 7ce:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 7d2:	dc 01       	movw	r26, r24
 7d4:	cb 01       	movw	r24, r22
 7d6:	8f a3       	std	Y+39, r24	; 0x27
 7d8:	98 a7       	std	Y+40, r25	; 0x28
 7da:	8f a1       	ldd	r24, Y+39	; 0x27
 7dc:	98 a5       	ldd	r25, Y+40	; 0x28
 7de:	8b a7       	std	Y+43, r24	; 0x2b
 7e0:	9c a7       	std	Y+44, r25	; 0x2c
 7e2:	8b a5       	ldd	r24, Y+43	; 0x2b
 7e4:	9c a5       	ldd	r25, Y+44	; 0x2c
 7e6:	01 97       	sbiw	r24, 0x01	; 1
 7e8:	f1 f7       	brne	.-4      	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
 7ea:	8b a7       	std	Y+43, r24	; 0x2b
 7ec:	9c a7       	std	Y+44, r25	; 0x2c
	B_MCU_set_level(false);
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	0e 94 b6 00 	call	0x16c	; 0x16c <B_MCU_set_level>
	_delay_ms(db);
 7f4:	ce 01       	movw	r24, r28
 7f6:	87 5a       	subi	r24, 0xA7	; 167
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	fc 01       	movw	r30, r24
 7fc:	80 81       	ld	r24, Z
 7fe:	91 81       	ldd	r25, Z+1	; 0x01
 800:	cc 01       	movw	r24, r24
 802:	a0 e0       	ldi	r26, 0x00	; 0
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	bc 01       	movw	r22, r24
 808:	cd 01       	movw	r24, r26
 80a:	0e 94 8c 06 	call	0xd18	; 0xd18 <__floatunsisf>
 80e:	dc 01       	movw	r26, r24
 810:	cb 01       	movw	r24, r22
 812:	8d 8b       	std	Y+21, r24	; 0x15
 814:	9e 8b       	std	Y+22, r25	; 0x16
 816:	af 8b       	std	Y+23, r26	; 0x17
 818:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 81a:	24 e5       	ldi	r18, 0x54	; 84
 81c:	35 e5       	ldi	r19, 0x55	; 85
 81e:	40 e5       	ldi	r20, 0x50	; 80
 820:	54 e4       	ldi	r21, 0x44	; 68
 822:	6d 89       	ldd	r22, Y+21	; 0x15
 824:	7e 89       	ldd	r23, Y+22	; 0x16
 826:	8f 89       	ldd	r24, Y+23	; 0x17
 828:	98 8d       	ldd	r25, Y+24	; 0x18
 82a:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 82e:	dc 01       	movw	r26, r24
 830:	cb 01       	movw	r24, r22
 832:	89 8f       	std	Y+25, r24	; 0x19
 834:	9a 8f       	std	Y+26, r25	; 0x1a
 836:	ab 8f       	std	Y+27, r26	; 0x1b
 838:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
 83a:	20 e0       	ldi	r18, 0x00	; 0
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	40 e8       	ldi	r20, 0x80	; 128
 840:	5f e3       	ldi	r21, 0x3F	; 63
 842:	69 8d       	ldd	r22, Y+25	; 0x19
 844:	7a 8d       	ldd	r23, Y+26	; 0x1a
 846:	8b 8d       	ldd	r24, Y+27	; 0x1b
 848:	9c 8d       	ldd	r25, Y+28	; 0x1c
 84a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__cmpsf2>
 84e:	88 23       	and	r24, r24
 850:	2c f4       	brge	.+10     	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
		__ticks = 1;
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	8d 8f       	std	Y+29, r24	; 0x1d
 858:	9e 8f       	std	Y+30, r25	; 0x1e
 85a:	3f c0       	rjmp	.+126    	; 0x8da <__LOCK_REGION_LENGTH__+0x4da>
	else if (__tmp > 65535)
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	3f ef       	ldi	r19, 0xFF	; 255
 860:	4f e7       	ldi	r20, 0x7F	; 127
 862:	57 e4       	ldi	r21, 0x47	; 71
 864:	69 8d       	ldd	r22, Y+25	; 0x19
 866:	7a 8d       	ldd	r23, Y+26	; 0x1a
 868:	8b 8d       	ldd	r24, Y+27	; 0x1b
 86a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 86c:	0e 94 16 07 	call	0xe2c	; 0xe2c <__gesf2>
 870:	18 16       	cp	r1, r24
 872:	4c f5       	brge	.+82     	; 0x8c6 <__LOCK_REGION_LENGTH__+0x4c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	40 e2       	ldi	r20, 0x20	; 32
 87a:	51 e4       	ldi	r21, 0x41	; 65
 87c:	6d 89       	ldd	r22, Y+21	; 0x15
 87e:	7e 89       	ldd	r23, Y+22	; 0x16
 880:	8f 89       	ldd	r24, Y+23	; 0x17
 882:	98 8d       	ldd	r25, Y+24	; 0x18
 884:	0e 94 1b 07 	call	0xe36	; 0xe36 <__mulsf3>
 888:	dc 01       	movw	r26, r24
 88a:	cb 01       	movw	r24, r22
 88c:	bc 01       	movw	r22, r24
 88e:	cd 01       	movw	r24, r26
 890:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 894:	dc 01       	movw	r26, r24
 896:	cb 01       	movw	r24, r22
 898:	8d 8f       	std	Y+29, r24	; 0x1d
 89a:	9e 8f       	std	Y+30, r25	; 0x1e
 89c:	0f c0       	rjmp	.+30     	; 0x8bc <__LOCK_REGION_LENGTH__+0x4bc>
 89e:	83 e5       	ldi	r24, 0x53	; 83
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	8f 8f       	std	Y+31, r24	; 0x1f
 8a4:	98 a3       	std	Y+32, r25	; 0x20
 8a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
 8a8:	98 a1       	ldd	r25, Y+32	; 0x20
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
 8ae:	8f 8f       	std	Y+31, r24	; 0x1f
 8b0:	98 a3       	std	Y+32, r25	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
 8b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	8d 8f       	std	Y+29, r24	; 0x1d
 8ba:	9e 8f       	std	Y+30, r25	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
 8be:	9e 8d       	ldd	r25, Y+30	; 0x1e
 8c0:	89 2b       	or	r24, r25
 8c2:	69 f7       	brne	.-38     	; 0x89e <__LOCK_REGION_LENGTH__+0x49e>
 8c4:	14 c0       	rjmp	.+40     	; 0x8ee <__LOCK_REGION_LENGTH__+0x4ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 8c6:	69 8d       	ldd	r22, Y+25	; 0x19
 8c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 8ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
 8cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
 8ce:	0e 94 5d 06 	call	0xcba	; 0xcba <__fixunssfsi>
 8d2:	dc 01       	movw	r26, r24
 8d4:	cb 01       	movw	r24, r22
 8d6:	8d 8f       	std	Y+29, r24	; 0x1d
 8d8:	9e 8f       	std	Y+30, r25	; 0x1e
 8da:	8d 8d       	ldd	r24, Y+29	; 0x1d
 8dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
 8de:	89 a3       	std	Y+33, r24	; 0x21
 8e0:	9a a3       	std	Y+34, r25	; 0x22
 8e2:	89 a1       	ldd	r24, Y+33	; 0x21
 8e4:	9a a1       	ldd	r25, Y+34	; 0x22
 8e6:	01 97       	sbiw	r24, 0x01	; 1
 8e8:	f1 f7       	brne	.-4      	; 0x8e6 <__LOCK_REGION_LENGTH__+0x4e6>
 8ea:	89 a3       	std	Y+33, r24	; 0x21
 8ec:	9a a3       	std	Y+34, r25	; 0x22
 8ee:	00 00       	nop
 8f0:	c6 5a       	subi	r28, 0xA6	; 166
 8f2:	df 4f       	sbci	r29, 0xFF	; 255
 8f4:	cd bf       	out	0x3d, r28	; 61
 8f6:	de bf       	out	0x3e, r29	; 62
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	1f 91       	pop	r17
 8fe:	0f 91       	pop	r16
 900:	08 95       	ret

00000902 <main>:
#include <atmel_start.h>
void delayfn(uint16_t ,uint16_t ,uint16_t );
int main(void)
{
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 90a:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	delayfn(100,0,100);
 90e:	44 e6       	ldi	r20, 0x64	; 100
 910:	50 e0       	ldi	r21, 0x00	; 0
 912:	60 e0       	ldi	r22, 0x00	; 0
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	84 e6       	ldi	r24, 0x64	; 100
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 c5 00 	call	0x18a	; 0x18a <delayfn>
	return 0;
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	90 e0       	ldi	r25, 0x00	; 0
	
}
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	08 95       	ret

00000928 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 928:	cf 93       	push	r28
 92a:	df 93       	push	r29
 92c:	cd b7       	in	r28, 0x3d	; 61
 92e:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 930:	80 e0       	ldi	r24, 0x00	; 0
}
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 938:	cf 93       	push	r28
 93a:	df 93       	push	r29
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 940:	80 e0       	ldi	r24, 0x00	; 0
}
 942:	df 91       	pop	r29
 944:	cf 91       	pop	r28
 946:	08 95       	ret

00000948 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 948:	cf 93       	push	r28
 94a:	df 93       	push	r29
 94c:	cd b7       	in	r28, 0x3d	; 61
 94e:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 950:	80 e0       	ldi	r24, 0x00	; 0
}
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	08 95       	ret

00000958 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	00 d0       	rcall	.+0      	; 0x95e <PORTD_set_pin_dir+0x6>
 95e:	cd b7       	in	r28, 0x3d	; 61
 960:	de b7       	in	r29, 0x3e	; 62
 962:	89 83       	std	Y+1, r24	; 0x01
 964:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 966:	8a 81       	ldd	r24, Y+2	; 0x02
 968:	88 2f       	mov	r24, r24
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	81 30       	cpi	r24, 0x01	; 1
 96e:	91 05       	cpc	r25, r1
 970:	e1 f0       	breq	.+56     	; 0x9aa <PORTD_set_pin_dir+0x52>
 972:	82 30       	cpi	r24, 0x02	; 2
 974:	91 05       	cpc	r25, r1
 976:	71 f1       	breq	.+92     	; 0x9d4 <PORTD_set_pin_dir+0x7c>
 978:	89 2b       	or	r24, r25
 97a:	09 f0       	breq	.+2      	; 0x97e <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 97c:	3b c0       	rjmp	.+118    	; 0x9f4 <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
 97e:	8c e0       	ldi	r24, 0x0C	; 12
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	2c e0       	ldi	r18, 0x0C	; 12
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	f9 01       	movw	r30, r18
 988:	20 81       	ld	r18, Z
 98a:	62 2f       	mov	r22, r18
 98c:	29 81       	ldd	r18, Y+1	; 0x01
 98e:	42 2f       	mov	r20, r18
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	21 e0       	ldi	r18, 0x01	; 1
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	02 c0       	rjmp	.+4      	; 0x99c <PORTD_set_pin_dir+0x44>
 998:	22 0f       	add	r18, r18
 99a:	33 1f       	adc	r19, r19
 99c:	4a 95       	dec	r20
 99e:	e2 f7       	brpl	.-8      	; 0x998 <PORTD_set_pin_dir+0x40>
 9a0:	20 95       	com	r18
 9a2:	26 23       	and	r18, r22
 9a4:	fc 01       	movw	r30, r24
 9a6:	20 83       	st	Z, r18
		break;
 9a8:	25 c0       	rjmp	.+74     	; 0x9f4 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 9aa:	8c e0       	ldi	r24, 0x0C	; 12
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	2c e0       	ldi	r18, 0x0C	; 12
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	f9 01       	movw	r30, r18
 9b4:	20 81       	ld	r18, Z
 9b6:	62 2f       	mov	r22, r18
 9b8:	29 81       	ldd	r18, Y+1	; 0x01
 9ba:	42 2f       	mov	r20, r18
 9bc:	50 e0       	ldi	r21, 0x00	; 0
 9be:	21 e0       	ldi	r18, 0x01	; 1
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <PORTD_set_pin_dir+0x70>
 9c4:	22 0f       	add	r18, r18
 9c6:	33 1f       	adc	r19, r19
 9c8:	4a 95       	dec	r20
 9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <PORTD_set_pin_dir+0x6c>
 9cc:	26 2b       	or	r18, r22
 9ce:	fc 01       	movw	r30, r24
 9d0:	20 83       	st	Z, r18
		break;
 9d2:	10 c0       	rjmp	.+32     	; 0x9f4 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 9d4:	89 81       	ldd	r24, Y+1	; 0x01
 9d6:	88 2f       	mov	r24, r24
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	80 59       	subi	r24, 0x90	; 144
 9dc:	9b 4f       	sbci	r25, 0xFB	; 251
 9de:	29 81       	ldd	r18, Y+1	; 0x01
 9e0:	22 2f       	mov	r18, r18
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	20 59       	subi	r18, 0x90	; 144
 9e6:	3b 4f       	sbci	r19, 0xFB	; 251
 9e8:	f9 01       	movw	r30, r18
 9ea:	20 81       	ld	r18, Z
 9ec:	28 60       	ori	r18, 0x08	; 8
 9ee:	fc 01       	movw	r30, r24
 9f0:	20 83       	st	Z, r18
		break;
 9f2:	00 00       	nop
	default:
		break;
	}
}
 9f4:	00 00       	nop
 9f6:	0f 90       	pop	r0
 9f8:	0f 90       	pop	r0
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 a00:	cf 93       	push	r28
 a02:	df 93       	push	r29
 a04:	00 d0       	rcall	.+0      	; 0xa06 <PORTD_set_pin_level+0x6>
 a06:	cd b7       	in	r28, 0x3d	; 61
 a08:	de b7       	in	r29, 0x3e	; 62
 a0a:	89 83       	std	Y+1, r24	; 0x01
 a0c:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 a0e:	8a 81       	ldd	r24, Y+2	; 0x02
 a10:	88 23       	and	r24, r24
 a12:	a9 f0       	breq	.+42     	; 0xa3e <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 a14:	8c e0       	ldi	r24, 0x0C	; 12
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	2c e0       	ldi	r18, 0x0C	; 12
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	f9 01       	movw	r30, r18
 a1e:	21 81       	ldd	r18, Z+1	; 0x01
 a20:	62 2f       	mov	r22, r18
 a22:	29 81       	ldd	r18, Y+1	; 0x01
 a24:	42 2f       	mov	r20, r18
 a26:	50 e0       	ldi	r21, 0x00	; 0
 a28:	21 e0       	ldi	r18, 0x01	; 1
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <PORTD_set_pin_level+0x32>
 a2e:	22 0f       	add	r18, r18
 a30:	33 1f       	adc	r19, r19
 a32:	4a 95       	dec	r20
 a34:	e2 f7       	brpl	.-8      	; 0xa2e <PORTD_set_pin_level+0x2e>
 a36:	26 2b       	or	r18, r22
 a38:	fc 01       	movw	r30, r24
 a3a:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 a3c:	15 c0       	rjmp	.+42     	; 0xa68 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 a3e:	8c e0       	ldi	r24, 0x0C	; 12
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	2c e0       	ldi	r18, 0x0C	; 12
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	f9 01       	movw	r30, r18
 a48:	21 81       	ldd	r18, Z+1	; 0x01
 a4a:	62 2f       	mov	r22, r18
 a4c:	29 81       	ldd	r18, Y+1	; 0x01
 a4e:	42 2f       	mov	r20, r18
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	21 e0       	ldi	r18, 0x01	; 1
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	02 c0       	rjmp	.+4      	; 0xa5c <PORTD_set_pin_level+0x5c>
 a58:	22 0f       	add	r18, r18
 a5a:	33 1f       	adc	r19, r19
 a5c:	4a 95       	dec	r20
 a5e:	e2 f7       	brpl	.-8      	; 0xa58 <PORTD_set_pin_level+0x58>
 a60:	20 95       	com	r18
 a62:	26 23       	and	r18, r22
 a64:	fc 01       	movw	r30, r24
 a66:	21 83       	std	Z+1, r18	; 0x01
	}
}
 a68:	00 00       	nop
 a6a:	0f 90       	pop	r0
 a6c:	0f 90       	pop	r0
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	08 95       	ret

00000a74 <R_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R_MCU_set_dir(const enum port_dir dir)
{
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
 a78:	1f 92       	push	r1
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
 a7e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
 a80:	69 81       	ldd	r22, Y+1	; 0x01
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	0e 94 ac 04 	call	0x958	; 0x958 <PORTD_set_pin_dir>
}
 a88:	00 00       	nop
 a8a:	0f 90       	pop	r0
 a8c:	df 91       	pop	r29
 a8e:	cf 91       	pop	r28
 a90:	08 95       	ret

00000a92 <R_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R_MCU_set_level(const bool level)
{
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
 a96:	1f 92       	push	r1
 a98:	cd b7       	in	r28, 0x3d	; 61
 a9a:	de b7       	in	r29, 0x3e	; 62
 a9c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 a9e:	69 81       	ldd	r22, Y+1	; 0x01
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	0e 94 00 05 	call	0xa00	; 0xa00 <PORTD_set_pin_level>
}
 aa6:	00 00       	nop
 aa8:	0f 90       	pop	r0
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	08 95       	ret

00000ab0 <G_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G_MCU_set_dir(const enum port_dir dir)
{
 ab0:	cf 93       	push	r28
 ab2:	df 93       	push	r29
 ab4:	1f 92       	push	r1
 ab6:	cd b7       	in	r28, 0x3d	; 61
 ab8:	de b7       	in	r29, 0x3e	; 62
 aba:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
 abc:	69 81       	ldd	r22, Y+1	; 0x01
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	0e 94 ac 04 	call	0x958	; 0x958 <PORTD_set_pin_dir>
}
 ac4:	00 00       	nop
 ac6:	0f 90       	pop	r0
 ac8:	df 91       	pop	r29
 aca:	cf 91       	pop	r28
 acc:	08 95       	ret

00000ace <G_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G_MCU_set_level(const bool level)
{
 ace:	cf 93       	push	r28
 ad0:	df 93       	push	r29
 ad2:	1f 92       	push	r1
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62
 ad8:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 ada:	69 81       	ldd	r22, Y+1	; 0x01
 adc:	81 e0       	ldi	r24, 0x01	; 1
 ade:	0e 94 00 05 	call	0xa00	; 0xa00 <PORTD_set_pin_level>
}
 ae2:	00 00       	nop
 ae4:	0f 90       	pop	r0
 ae6:	df 91       	pop	r29
 ae8:	cf 91       	pop	r28
 aea:	08 95       	ret

00000aec <B_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B_MCU_set_dir(const enum port_dir dir)
{
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	1f 92       	push	r1
 af2:	cd b7       	in	r28, 0x3d	; 61
 af4:	de b7       	in	r29, 0x3e	; 62
 af6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
 af8:	69 81       	ldd	r22, Y+1	; 0x01
 afa:	82 e0       	ldi	r24, 0x02	; 2
 afc:	0e 94 ac 04 	call	0x958	; 0x958 <PORTD_set_pin_dir>
}
 b00:	00 00       	nop
 b02:	0f 90       	pop	r0
 b04:	df 91       	pop	r29
 b06:	cf 91       	pop	r28
 b08:	08 95       	ret

00000b0a <B_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B_MCU_set_level(const bool level)
{
 b0a:	cf 93       	push	r28
 b0c:	df 93       	push	r29
 b0e:	1f 92       	push	r1
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
 b14:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 b16:	69 81       	ldd	r22, Y+1	; 0x01
 b18:	82 e0       	ldi	r24, 0x02	; 2
 b1a:	0e 94 00 05 	call	0xa00	; 0xa00 <PORTD_set_pin_level>
}
 b1e:	00 00       	nop
 b20:	0f 90       	pop	r0
 b22:	df 91       	pop	r29
 b24:	cf 91       	pop	r28
 b26:	08 95       	ret

00000b28 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 b28:	cf 93       	push	r28
 b2a:	df 93       	push	r29
 b2c:	cd b7       	in	r28, 0x3d	; 61
 b2e:	de b7       	in	r29, 0x3e	; 62
 b30:	26 97       	sbiw	r28, 0x06	; 6
 b32:	cd bf       	out	0x3d, r28	; 61
 b34:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 b36:	19 82       	std	Y+1, r1	; 0x01
 b38:	12 c0       	rjmp	.+36     	; 0xb5e <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 b3a:	89 81       	ldd	r24, Y+1	; 0x01
 b3c:	88 2f       	mov	r24, r24
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	80 5f       	subi	r24, 0xF0	; 240
 b42:	9b 4f       	sbci	r25, 0xFB	; 251
 b44:	29 81       	ldd	r18, Y+1	; 0x01
 b46:	22 2f       	mov	r18, r18
 b48:	30 e0       	ldi	r19, 0x00	; 0
 b4a:	20 5f       	subi	r18, 0xF0	; 240
 b4c:	3b 4f       	sbci	r19, 0xFB	; 251
 b4e:	f9 01       	movw	r30, r18
 b50:	20 81       	ld	r18, Z
 b52:	28 60       	ori	r18, 0x08	; 8
 b54:	fc 01       	movw	r30, r24
 b56:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 b58:	89 81       	ldd	r24, Y+1	; 0x01
 b5a:	8f 5f       	subi	r24, 0xFF	; 255
 b5c:	89 83       	std	Y+1, r24	; 0x01
 b5e:	89 81       	ldd	r24, Y+1	; 0x01
 b60:	88 30       	cpi	r24, 0x08	; 8
 b62:	58 f3       	brcs	.-42     	; 0xb3a <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b64:	1a 82       	std	Y+2, r1	; 0x02
 b66:	12 c0       	rjmp	.+36     	; 0xb8c <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 b68:	8a 81       	ldd	r24, Y+2	; 0x02
 b6a:	88 2f       	mov	r24, r24
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	80 5d       	subi	r24, 0xD0	; 208
 b70:	9b 4f       	sbci	r25, 0xFB	; 251
 b72:	2a 81       	ldd	r18, Y+2	; 0x02
 b74:	22 2f       	mov	r18, r18
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	20 5d       	subi	r18, 0xD0	; 208
 b7a:	3b 4f       	sbci	r19, 0xFB	; 251
 b7c:	f9 01       	movw	r30, r18
 b7e:	20 81       	ld	r18, Z
 b80:	28 60       	ori	r18, 0x08	; 8
 b82:	fc 01       	movw	r30, r24
 b84:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b86:	8a 81       	ldd	r24, Y+2	; 0x02
 b88:	8f 5f       	subi	r24, 0xFF	; 255
 b8a:	8a 83       	std	Y+2, r24	; 0x02
 b8c:	8a 81       	ldd	r24, Y+2	; 0x02
 b8e:	88 30       	cpi	r24, 0x08	; 8
 b90:	58 f3       	brcs	.-42     	; 0xb68 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b92:	1b 82       	std	Y+3, r1	; 0x03
 b94:	12 c0       	rjmp	.+36     	; 0xbba <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 b96:	8b 81       	ldd	r24, Y+3	; 0x03
 b98:	88 2f       	mov	r24, r24
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	80 5b       	subi	r24, 0xB0	; 176
 b9e:	9b 4f       	sbci	r25, 0xFB	; 251
 ba0:	2b 81       	ldd	r18, Y+3	; 0x03
 ba2:	22 2f       	mov	r18, r18
 ba4:	30 e0       	ldi	r19, 0x00	; 0
 ba6:	20 5b       	subi	r18, 0xB0	; 176
 ba8:	3b 4f       	sbci	r19, 0xFB	; 251
 baa:	f9 01       	movw	r30, r18
 bac:	20 81       	ld	r18, Z
 bae:	28 60       	ori	r18, 0x08	; 8
 bb0:	fc 01       	movw	r30, r24
 bb2:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 bb4:	8b 81       	ldd	r24, Y+3	; 0x03
 bb6:	8f 5f       	subi	r24, 0xFF	; 255
 bb8:	8b 83       	std	Y+3, r24	; 0x03
 bba:	8b 81       	ldd	r24, Y+3	; 0x03
 bbc:	88 30       	cpi	r24, 0x08	; 8
 bbe:	58 f3       	brcs	.-42     	; 0xb96 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 bc0:	1c 82       	std	Y+4, r1	; 0x04
 bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 bc4:	8c 81       	ldd	r24, Y+4	; 0x04
 bc6:	88 2f       	mov	r24, r24
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	80 59       	subi	r24, 0x90	; 144
 bcc:	9b 4f       	sbci	r25, 0xFB	; 251
 bce:	2c 81       	ldd	r18, Y+4	; 0x04
 bd0:	22 2f       	mov	r18, r18
 bd2:	30 e0       	ldi	r19, 0x00	; 0
 bd4:	20 59       	subi	r18, 0x90	; 144
 bd6:	3b 4f       	sbci	r19, 0xFB	; 251
 bd8:	f9 01       	movw	r30, r18
 bda:	20 81       	ld	r18, Z
 bdc:	28 60       	ori	r18, 0x08	; 8
 bde:	fc 01       	movw	r30, r24
 be0:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 be2:	8c 81       	ldd	r24, Y+4	; 0x04
 be4:	8f 5f       	subi	r24, 0xFF	; 255
 be6:	8c 83       	std	Y+4, r24	; 0x04
 be8:	8c 81       	ldd	r24, Y+4	; 0x04
 bea:	88 30       	cpi	r24, 0x08	; 8
 bec:	58 f3       	brcs	.-42     	; 0xbc4 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 bee:	1d 82       	std	Y+5, r1	; 0x05
 bf0:	12 c0       	rjmp	.+36     	; 0xc16 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 bf2:	8d 81       	ldd	r24, Y+5	; 0x05
 bf4:	88 2f       	mov	r24, r24
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	80 57       	subi	r24, 0x70	; 112
 bfa:	9b 4f       	sbci	r25, 0xFB	; 251
 bfc:	2d 81       	ldd	r18, Y+5	; 0x05
 bfe:	22 2f       	mov	r18, r18
 c00:	30 e0       	ldi	r19, 0x00	; 0
 c02:	20 57       	subi	r18, 0x70	; 112
 c04:	3b 4f       	sbci	r19, 0xFB	; 251
 c06:	f9 01       	movw	r30, r18
 c08:	20 81       	ld	r18, Z
 c0a:	28 60       	ori	r18, 0x08	; 8
 c0c:	fc 01       	movw	r30, r24
 c0e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 c10:	8d 81       	ldd	r24, Y+5	; 0x05
 c12:	8f 5f       	subi	r24, 0xFF	; 255
 c14:	8d 83       	std	Y+5, r24	; 0x05
 c16:	8d 81       	ldd	r24, Y+5	; 0x05
 c18:	88 30       	cpi	r24, 0x08	; 8
 c1a:	58 f3       	brcs	.-42     	; 0xbf2 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 c1c:	1e 82       	std	Y+6, r1	; 0x06
 c1e:	12 c0       	rjmp	.+36     	; 0xc44 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 c20:	8e 81       	ldd	r24, Y+6	; 0x06
 c22:	88 2f       	mov	r24, r24
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	80 55       	subi	r24, 0x50	; 80
 c28:	9b 4f       	sbci	r25, 0xFB	; 251
 c2a:	2e 81       	ldd	r18, Y+6	; 0x06
 c2c:	22 2f       	mov	r18, r18
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	20 55       	subi	r18, 0x50	; 80
 c32:	3b 4f       	sbci	r19, 0xFB	; 251
 c34:	f9 01       	movw	r30, r18
 c36:	20 81       	ld	r18, Z
 c38:	28 60       	ori	r18, 0x08	; 8
 c3a:	fc 01       	movw	r30, r24
 c3c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 c3e:	8e 81       	ldd	r24, Y+6	; 0x06
 c40:	8f 5f       	subi	r24, 0xFF	; 255
 c42:	8e 83       	std	Y+6, r24	; 0x06
 c44:	8e 81       	ldd	r24, Y+6	; 0x06
 c46:	88 30       	cpi	r24, 0x08	; 8
 c48:	58 f3       	brcs	.-42     	; 0xc20 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 c4a:	00 00       	nop
 c4c:	26 96       	adiw	r28, 0x06	; 6
 c4e:	cd bf       	out	0x3d, r28	; 61
 c50:	de bf       	out	0x3e, r29	; 62
 c52:	df 91       	pop	r29
 c54:	cf 91       	pop	r28
 c56:	08 95       	ret

00000c58 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 c58:	cf 93       	push	r28
 c5a:	df 93       	push	r29
 c5c:	cd b7       	in	r28, 0x3d	; 61
 c5e:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 c60:	0e 94 94 05 	call	0xb28	; 0xb28 <mcu_init>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R_MCU_set_level(
 c64:	80 e0       	ldi	r24, 0x00	; 0
 c66:	0e 94 49 05 	call	0xa92	; 0xa92 <R_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R_MCU_set_dir(PORT_DIR_OUT);
 c6a:	81 e0       	ldi	r24, 0x01	; 1
 c6c:	0e 94 3a 05 	call	0xa74	; 0xa74 <R_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G_MCU_set_level(
 c70:	80 e0       	ldi	r24, 0x00	; 0
 c72:	0e 94 67 05 	call	0xace	; 0xace <G_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G_MCU_set_dir(PORT_DIR_OUT);
 c76:	81 e0       	ldi	r24, 0x01	; 1
 c78:	0e 94 58 05 	call	0xab0	; 0xab0 <G_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B_MCU_set_level(
 c7c:	80 e0       	ldi	r24, 0x00	; 0
 c7e:	0e 94 85 05 	call	0xb0a	; 0xb0a <B_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B_MCU_set_dir(PORT_DIR_OUT);
 c82:	81 e0       	ldi	r24, 0x01	; 1
 c84:	0e 94 76 05 	call	0xaec	; 0xaec <B_MCU_set_dir>

	CLKCTRL_init();
 c88:	0e 94 9c 04 	call	0x938	; 0x938 <CLKCTRL_init>

	CPUINT_init();
 c8c:	0e 94 a4 04 	call	0x948	; 0x948 <CPUINT_init>

	SLPCTRL_init();
 c90:	0e 94 50 06 	call	0xca0	; 0xca0 <SLPCTRL_init>

	BOD_init();
 c94:	0e 94 94 04 	call	0x928	; 0x928 <BOD_init>
}
 c98:	00 00       	nop
 c9a:	df 91       	pop	r29
 c9c:	cf 91       	pop	r28
 c9e:	08 95       	ret

00000ca0 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 ca0:	cf 93       	push	r28
 ca2:	df 93       	push	r29
 ca4:	cd b7       	in	r28, 0x3d	; 61
 ca6:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 ca8:	80 e0       	ldi	r24, 0x00	; 0
}
 caa:	df 91       	pop	r29
 cac:	cf 91       	pop	r28
 cae:	08 95       	ret

00000cb0 <__cmpsf2>:
 cb0:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fp_cmp>
 cb4:	08 f4       	brcc	.+2      	; 0xcb8 <__cmpsf2+0x8>
 cb6:	81 e0       	ldi	r24, 0x01	; 1
 cb8:	08 95       	ret

00000cba <__fixunssfsi>:
 cba:	0e 94 f5 06 	call	0xdea	; 0xdea <__fp_splitA>
 cbe:	88 f0       	brcs	.+34     	; 0xce2 <__fixunssfsi+0x28>
 cc0:	9f 57       	subi	r25, 0x7F	; 127
 cc2:	98 f0       	brcs	.+38     	; 0xcea <__fixunssfsi+0x30>
 cc4:	b9 2f       	mov	r27, r25
 cc6:	99 27       	eor	r25, r25
 cc8:	b7 51       	subi	r27, 0x17	; 23
 cca:	b0 f0       	brcs	.+44     	; 0xcf8 <__fixunssfsi+0x3e>
 ccc:	e1 f0       	breq	.+56     	; 0xd06 <__fixunssfsi+0x4c>
 cce:	66 0f       	add	r22, r22
 cd0:	77 1f       	adc	r23, r23
 cd2:	88 1f       	adc	r24, r24
 cd4:	99 1f       	adc	r25, r25
 cd6:	1a f0       	brmi	.+6      	; 0xcde <__fixunssfsi+0x24>
 cd8:	ba 95       	dec	r27
 cda:	c9 f7       	brne	.-14     	; 0xcce <__fixunssfsi+0x14>
 cdc:	14 c0       	rjmp	.+40     	; 0xd06 <__fixunssfsi+0x4c>
 cde:	b1 30       	cpi	r27, 0x01	; 1
 ce0:	91 f0       	breq	.+36     	; 0xd06 <__fixunssfsi+0x4c>
 ce2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fp_zero>
 ce6:	b1 e0       	ldi	r27, 0x01	; 1
 ce8:	08 95       	ret
 cea:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__fp_zero>
 cee:	67 2f       	mov	r22, r23
 cf0:	78 2f       	mov	r23, r24
 cf2:	88 27       	eor	r24, r24
 cf4:	b8 5f       	subi	r27, 0xF8	; 248
 cf6:	39 f0       	breq	.+14     	; 0xd06 <__fixunssfsi+0x4c>
 cf8:	b9 3f       	cpi	r27, 0xF9	; 249
 cfa:	cc f3       	brlt	.-14     	; 0xcee <__fixunssfsi+0x34>
 cfc:	86 95       	lsr	r24
 cfe:	77 95       	ror	r23
 d00:	67 95       	ror	r22
 d02:	b3 95       	inc	r27
 d04:	d9 f7       	brne	.-10     	; 0xcfc <__fixunssfsi+0x42>
 d06:	3e f4       	brtc	.+14     	; 0xd16 <__fixunssfsi+0x5c>
 d08:	90 95       	com	r25
 d0a:	80 95       	com	r24
 d0c:	70 95       	com	r23
 d0e:	61 95       	neg	r22
 d10:	7f 4f       	sbci	r23, 0xFF	; 255
 d12:	8f 4f       	sbci	r24, 0xFF	; 255
 d14:	9f 4f       	sbci	r25, 0xFF	; 255
 d16:	08 95       	ret

00000d18 <__floatunsisf>:
 d18:	e8 94       	clt
 d1a:	09 c0       	rjmp	.+18     	; 0xd2e <__floatsisf+0x12>

00000d1c <__floatsisf>:
 d1c:	97 fb       	bst	r25, 7
 d1e:	3e f4       	brtc	.+14     	; 0xd2e <__floatsisf+0x12>
 d20:	90 95       	com	r25
 d22:	80 95       	com	r24
 d24:	70 95       	com	r23
 d26:	61 95       	neg	r22
 d28:	7f 4f       	sbci	r23, 0xFF	; 255
 d2a:	8f 4f       	sbci	r24, 0xFF	; 255
 d2c:	9f 4f       	sbci	r25, 0xFF	; 255
 d2e:	99 23       	and	r25, r25
 d30:	a9 f0       	breq	.+42     	; 0xd5c <__floatsisf+0x40>
 d32:	f9 2f       	mov	r31, r25
 d34:	96 e9       	ldi	r25, 0x96	; 150
 d36:	bb 27       	eor	r27, r27
 d38:	93 95       	inc	r25
 d3a:	f6 95       	lsr	r31
 d3c:	87 95       	ror	r24
 d3e:	77 95       	ror	r23
 d40:	67 95       	ror	r22
 d42:	b7 95       	ror	r27
 d44:	f1 11       	cpse	r31, r1
 d46:	f8 cf       	rjmp	.-16     	; 0xd38 <__floatsisf+0x1c>
 d48:	fa f4       	brpl	.+62     	; 0xd88 <__floatsisf+0x6c>
 d4a:	bb 0f       	add	r27, r27
 d4c:	11 f4       	brne	.+4      	; 0xd52 <__floatsisf+0x36>
 d4e:	60 ff       	sbrs	r22, 0
 d50:	1b c0       	rjmp	.+54     	; 0xd88 <__floatsisf+0x6c>
 d52:	6f 5f       	subi	r22, 0xFF	; 255
 d54:	7f 4f       	sbci	r23, 0xFF	; 255
 d56:	8f 4f       	sbci	r24, 0xFF	; 255
 d58:	9f 4f       	sbci	r25, 0xFF	; 255
 d5a:	16 c0       	rjmp	.+44     	; 0xd88 <__floatsisf+0x6c>
 d5c:	88 23       	and	r24, r24
 d5e:	11 f0       	breq	.+4      	; 0xd64 <__floatsisf+0x48>
 d60:	96 e9       	ldi	r25, 0x96	; 150
 d62:	11 c0       	rjmp	.+34     	; 0xd86 <__floatsisf+0x6a>
 d64:	77 23       	and	r23, r23
 d66:	21 f0       	breq	.+8      	; 0xd70 <__floatsisf+0x54>
 d68:	9e e8       	ldi	r25, 0x8E	; 142
 d6a:	87 2f       	mov	r24, r23
 d6c:	76 2f       	mov	r23, r22
 d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__floatsisf+0x5e>
 d70:	66 23       	and	r22, r22
 d72:	71 f0       	breq	.+28     	; 0xd90 <__floatsisf+0x74>
 d74:	96 e8       	ldi	r25, 0x86	; 134
 d76:	86 2f       	mov	r24, r22
 d78:	70 e0       	ldi	r23, 0x00	; 0
 d7a:	60 e0       	ldi	r22, 0x00	; 0
 d7c:	2a f0       	brmi	.+10     	; 0xd88 <__floatsisf+0x6c>
 d7e:	9a 95       	dec	r25
 d80:	66 0f       	add	r22, r22
 d82:	77 1f       	adc	r23, r23
 d84:	88 1f       	adc	r24, r24
 d86:	da f7       	brpl	.-10     	; 0xd7e <__floatsisf+0x62>
 d88:	88 0f       	add	r24, r24
 d8a:	96 95       	lsr	r25
 d8c:	87 95       	ror	r24
 d8e:	97 f9       	bld	r25, 7
 d90:	08 95       	ret

00000d92 <__fp_cmp>:
 d92:	99 0f       	add	r25, r25
 d94:	00 08       	sbc	r0, r0
 d96:	55 0f       	add	r21, r21
 d98:	aa 0b       	sbc	r26, r26
 d9a:	e0 e8       	ldi	r30, 0x80	; 128
 d9c:	fe ef       	ldi	r31, 0xFE	; 254
 d9e:	16 16       	cp	r1, r22
 da0:	17 06       	cpc	r1, r23
 da2:	e8 07       	cpc	r30, r24
 da4:	f9 07       	cpc	r31, r25
 da6:	c0 f0       	brcs	.+48     	; 0xdd8 <__fp_cmp+0x46>
 da8:	12 16       	cp	r1, r18
 daa:	13 06       	cpc	r1, r19
 dac:	e4 07       	cpc	r30, r20
 dae:	f5 07       	cpc	r31, r21
 db0:	98 f0       	brcs	.+38     	; 0xdd8 <__fp_cmp+0x46>
 db2:	62 1b       	sub	r22, r18
 db4:	73 0b       	sbc	r23, r19
 db6:	84 0b       	sbc	r24, r20
 db8:	95 0b       	sbc	r25, r21
 dba:	39 f4       	brne	.+14     	; 0xdca <__fp_cmp+0x38>
 dbc:	0a 26       	eor	r0, r26
 dbe:	61 f0       	breq	.+24     	; 0xdd8 <__fp_cmp+0x46>
 dc0:	23 2b       	or	r18, r19
 dc2:	24 2b       	or	r18, r20
 dc4:	25 2b       	or	r18, r21
 dc6:	21 f4       	brne	.+8      	; 0xdd0 <__fp_cmp+0x3e>
 dc8:	08 95       	ret
 dca:	0a 26       	eor	r0, r26
 dcc:	09 f4       	brne	.+2      	; 0xdd0 <__fp_cmp+0x3e>
 dce:	a1 40       	sbci	r26, 0x01	; 1
 dd0:	a6 95       	lsr	r26
 dd2:	8f ef       	ldi	r24, 0xFF	; 255
 dd4:	81 1d       	adc	r24, r1
 dd6:	81 1d       	adc	r24, r1
 dd8:	08 95       	ret

00000dda <__fp_split3>:
 dda:	57 fd       	sbrc	r21, 7
 ddc:	90 58       	subi	r25, 0x80	; 128
 dde:	44 0f       	add	r20, r20
 de0:	55 1f       	adc	r21, r21
 de2:	59 f0       	breq	.+22     	; 0xdfa <__fp_splitA+0x10>
 de4:	5f 3f       	cpi	r21, 0xFF	; 255
 de6:	71 f0       	breq	.+28     	; 0xe04 <__fp_splitA+0x1a>
 de8:	47 95       	ror	r20

00000dea <__fp_splitA>:
 dea:	88 0f       	add	r24, r24
 dec:	97 fb       	bst	r25, 7
 dee:	99 1f       	adc	r25, r25
 df0:	61 f0       	breq	.+24     	; 0xe0a <__fp_splitA+0x20>
 df2:	9f 3f       	cpi	r25, 0xFF	; 255
 df4:	79 f0       	breq	.+30     	; 0xe14 <__fp_splitA+0x2a>
 df6:	87 95       	ror	r24
 df8:	08 95       	ret
 dfa:	12 16       	cp	r1, r18
 dfc:	13 06       	cpc	r1, r19
 dfe:	14 06       	cpc	r1, r20
 e00:	55 1f       	adc	r21, r21
 e02:	f2 cf       	rjmp	.-28     	; 0xde8 <__fp_split3+0xe>
 e04:	46 95       	lsr	r20
 e06:	f1 df       	rcall	.-30     	; 0xdea <__fp_splitA>
 e08:	08 c0       	rjmp	.+16     	; 0xe1a <__fp_splitA+0x30>
 e0a:	16 16       	cp	r1, r22
 e0c:	17 06       	cpc	r1, r23
 e0e:	18 06       	cpc	r1, r24
 e10:	99 1f       	adc	r25, r25
 e12:	f1 cf       	rjmp	.-30     	; 0xdf6 <__fp_splitA+0xc>
 e14:	86 95       	lsr	r24
 e16:	71 05       	cpc	r23, r1
 e18:	61 05       	cpc	r22, r1
 e1a:	08 94       	sec
 e1c:	08 95       	ret

00000e1e <__fp_zero>:
 e1e:	e8 94       	clt

00000e20 <__fp_szero>:
 e20:	bb 27       	eor	r27, r27
 e22:	66 27       	eor	r22, r22
 e24:	77 27       	eor	r23, r23
 e26:	cb 01       	movw	r24, r22
 e28:	97 f9       	bld	r25, 7
 e2a:	08 95       	ret

00000e2c <__gesf2>:
 e2c:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fp_cmp>
 e30:	08 f4       	brcc	.+2      	; 0xe34 <__gesf2+0x8>
 e32:	8f ef       	ldi	r24, 0xFF	; 255
 e34:	08 95       	ret

00000e36 <__mulsf3>:
 e36:	0e 94 2e 07 	call	0xe5c	; 0xe5c <__mulsf3x>
 e3a:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_round>
 e3e:	0e 94 91 07 	call	0xf22	; 0xf22 <__fp_pscA>
 e42:	38 f0       	brcs	.+14     	; 0xe52 <__mulsf3+0x1c>
 e44:	0e 94 98 07 	call	0xf30	; 0xf30 <__fp_pscB>
 e48:	20 f0       	brcs	.+8      	; 0xe52 <__mulsf3+0x1c>
 e4a:	95 23       	and	r25, r21
 e4c:	11 f0       	breq	.+4      	; 0xe52 <__mulsf3+0x1c>
 e4e:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_inf>
 e52:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__fp_nan>
 e56:	11 24       	eor	r1, r1
 e58:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__fp_szero>

00000e5c <__mulsf3x>:
 e5c:	0e 94 ed 06 	call	0xdda	; 0xdda <__fp_split3>
 e60:	70 f3       	brcs	.-36     	; 0xe3e <__mulsf3+0x8>

00000e62 <__mulsf3_pse>:
 e62:	95 9f       	mul	r25, r21
 e64:	c1 f3       	breq	.-16     	; 0xe56 <__mulsf3+0x20>
 e66:	95 0f       	add	r25, r21
 e68:	50 e0       	ldi	r21, 0x00	; 0
 e6a:	55 1f       	adc	r21, r21
 e6c:	62 9f       	mul	r22, r18
 e6e:	f0 01       	movw	r30, r0
 e70:	72 9f       	mul	r23, r18
 e72:	bb 27       	eor	r27, r27
 e74:	f0 0d       	add	r31, r0
 e76:	b1 1d       	adc	r27, r1
 e78:	63 9f       	mul	r22, r19
 e7a:	aa 27       	eor	r26, r26
 e7c:	f0 0d       	add	r31, r0
 e7e:	b1 1d       	adc	r27, r1
 e80:	aa 1f       	adc	r26, r26
 e82:	64 9f       	mul	r22, r20
 e84:	66 27       	eor	r22, r22
 e86:	b0 0d       	add	r27, r0
 e88:	a1 1d       	adc	r26, r1
 e8a:	66 1f       	adc	r22, r22
 e8c:	82 9f       	mul	r24, r18
 e8e:	22 27       	eor	r18, r18
 e90:	b0 0d       	add	r27, r0
 e92:	a1 1d       	adc	r26, r1
 e94:	62 1f       	adc	r22, r18
 e96:	73 9f       	mul	r23, r19
 e98:	b0 0d       	add	r27, r0
 e9a:	a1 1d       	adc	r26, r1
 e9c:	62 1f       	adc	r22, r18
 e9e:	83 9f       	mul	r24, r19
 ea0:	a0 0d       	add	r26, r0
 ea2:	61 1d       	adc	r22, r1
 ea4:	22 1f       	adc	r18, r18
 ea6:	74 9f       	mul	r23, r20
 ea8:	33 27       	eor	r19, r19
 eaa:	a0 0d       	add	r26, r0
 eac:	61 1d       	adc	r22, r1
 eae:	23 1f       	adc	r18, r19
 eb0:	84 9f       	mul	r24, r20
 eb2:	60 0d       	add	r22, r0
 eb4:	21 1d       	adc	r18, r1
 eb6:	82 2f       	mov	r24, r18
 eb8:	76 2f       	mov	r23, r22
 eba:	6a 2f       	mov	r22, r26
 ebc:	11 24       	eor	r1, r1
 ebe:	9f 57       	subi	r25, 0x7F	; 127
 ec0:	50 40       	sbci	r21, 0x00	; 0
 ec2:	9a f0       	brmi	.+38     	; 0xeea <__mulsf3_pse+0x88>
 ec4:	f1 f0       	breq	.+60     	; 0xf02 <__mulsf3_pse+0xa0>
 ec6:	88 23       	and	r24, r24
 ec8:	4a f0       	brmi	.+18     	; 0xedc <__mulsf3_pse+0x7a>
 eca:	ee 0f       	add	r30, r30
 ecc:	ff 1f       	adc	r31, r31
 ece:	bb 1f       	adc	r27, r27
 ed0:	66 1f       	adc	r22, r22
 ed2:	77 1f       	adc	r23, r23
 ed4:	88 1f       	adc	r24, r24
 ed6:	91 50       	subi	r25, 0x01	; 1
 ed8:	50 40       	sbci	r21, 0x00	; 0
 eda:	a9 f7       	brne	.-22     	; 0xec6 <__mulsf3_pse+0x64>
 edc:	9e 3f       	cpi	r25, 0xFE	; 254
 ede:	51 05       	cpc	r21, r1
 ee0:	80 f0       	brcs	.+32     	; 0xf02 <__mulsf3_pse+0xa0>
 ee2:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__fp_inf>
 ee6:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__fp_szero>
 eea:	5f 3f       	cpi	r21, 0xFF	; 255
 eec:	e4 f3       	brlt	.-8      	; 0xee6 <__mulsf3_pse+0x84>
 eee:	98 3e       	cpi	r25, 0xE8	; 232
 ef0:	d4 f3       	brlt	.-12     	; 0xee6 <__mulsf3_pse+0x84>
 ef2:	86 95       	lsr	r24
 ef4:	77 95       	ror	r23
 ef6:	67 95       	ror	r22
 ef8:	b7 95       	ror	r27
 efa:	f7 95       	ror	r31
 efc:	e7 95       	ror	r30
 efe:	9f 5f       	subi	r25, 0xFF	; 255
 f00:	c1 f7       	brne	.-16     	; 0xef2 <__mulsf3_pse+0x90>
 f02:	fe 2b       	or	r31, r30
 f04:	88 0f       	add	r24, r24
 f06:	91 1d       	adc	r25, r1
 f08:	96 95       	lsr	r25
 f0a:	87 95       	ror	r24
 f0c:	97 f9       	bld	r25, 7
 f0e:	08 95       	ret

00000f10 <__fp_inf>:
 f10:	97 f9       	bld	r25, 7
 f12:	9f 67       	ori	r25, 0x7F	; 127
 f14:	80 e8       	ldi	r24, 0x80	; 128
 f16:	70 e0       	ldi	r23, 0x00	; 0
 f18:	60 e0       	ldi	r22, 0x00	; 0
 f1a:	08 95       	ret

00000f1c <__fp_nan>:
 f1c:	9f ef       	ldi	r25, 0xFF	; 255
 f1e:	80 ec       	ldi	r24, 0xC0	; 192
 f20:	08 95       	ret

00000f22 <__fp_pscA>:
 f22:	00 24       	eor	r0, r0
 f24:	0a 94       	dec	r0
 f26:	16 16       	cp	r1, r22
 f28:	17 06       	cpc	r1, r23
 f2a:	18 06       	cpc	r1, r24
 f2c:	09 06       	cpc	r0, r25
 f2e:	08 95       	ret

00000f30 <__fp_pscB>:
 f30:	00 24       	eor	r0, r0
 f32:	0a 94       	dec	r0
 f34:	12 16       	cp	r1, r18
 f36:	13 06       	cpc	r1, r19
 f38:	14 06       	cpc	r1, r20
 f3a:	05 06       	cpc	r0, r21
 f3c:	08 95       	ret

00000f3e <__fp_round>:
 f3e:	09 2e       	mov	r0, r25
 f40:	03 94       	inc	r0
 f42:	00 0c       	add	r0, r0
 f44:	11 f4       	brne	.+4      	; 0xf4a <__fp_round+0xc>
 f46:	88 23       	and	r24, r24
 f48:	52 f0       	brmi	.+20     	; 0xf5e <__fp_round+0x20>
 f4a:	bb 0f       	add	r27, r27
 f4c:	40 f4       	brcc	.+16     	; 0xf5e <__fp_round+0x20>
 f4e:	bf 2b       	or	r27, r31
 f50:	11 f4       	brne	.+4      	; 0xf56 <__fp_round+0x18>
 f52:	60 ff       	sbrs	r22, 0
 f54:	04 c0       	rjmp	.+8      	; 0xf5e <__fp_round+0x20>
 f56:	6f 5f       	subi	r22, 0xFF	; 255
 f58:	7f 4f       	sbci	r23, 0xFF	; 255
 f5a:	8f 4f       	sbci	r24, 0xFF	; 255
 f5c:	9f 4f       	sbci	r25, 0xFF	; 255
 f5e:	08 95       	ret

00000f60 <_exit>:
 f60:	f8 94       	cli

00000f62 <__stop_program>:
 f62:	ff cf       	rjmp	.-2      	; 0xf62 <__stop_program>
