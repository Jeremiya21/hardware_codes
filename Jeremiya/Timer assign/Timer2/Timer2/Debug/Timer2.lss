
Timer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  000002c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038e7  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002796  00000000  00000000  00003d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b1f  00000000  00000000  0000649d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00006fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000189b  00000000  00000000  00007130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017d  00000000  00000000  000089cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00008b48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 67 00 	call	0xce	; 0xce <main>
  a0:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <system_init>
  ac:	08 95       	ret

000000ae <led_cntrl>:
 */ 

#include "led_cntrl.h"
void led_cntrl(uint8_t red,uint8_t green, uint8_t blue)
{
	TCA0_SINGLE_CMP0BUF=red;
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7f4a38>
  b4:	90 93 39 0a 	sts	0x0A39, r25	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7f4a39>
	//TCA0_SINGLE_CMP0=red;
	TCA0_SINGLE_CMP1BUF=green;
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	60 93 3a 0a 	sts	0x0A3A, r22	; 0x800a3a <__TEXT_REGION_LENGTH__+0x7f4a3a>
  be:	70 93 3b 0a 	sts	0x0A3B, r23	; 0x800a3b <__TEXT_REGION_LENGTH__+0x7f4a3b>
	//TCA0_SINGLE_CMP1=green;
	TCA0_SINGLE_CMP2BUF=blue;
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	40 93 3c 0a 	sts	0x0A3C, r20	; 0x800a3c <__TEXT_REGION_LENGTH__+0x7f4a3c>
  c8:	50 93 3d 0a 	sts	0x0A3D, r21	; 0x800a3d <__TEXT_REGION_LENGTH__+0x7f4a3d>
  cc:	08 95       	ret

000000ce <main>:
#include "led_cntrl.h"

int main(void)
{

	atmel_start_init();
  ce:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	uint8_t red=100,green=50,blue=200;
	
	while (1) 
	{
		
		led_cntrl(red,green,blue);
  d2:	48 ec       	ldi	r20, 0xC8	; 200
  d4:	62 e3       	ldi	r22, 0x32	; 50
  d6:	84 e6       	ldi	r24, 0x64	; 100
  d8:	0e 94 57 00 	call	0xae	; 0xae <led_cntrl>
  dc:	fa cf       	rjmp	.-12     	; 0xd2 <main+0x4>

000000de <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret

000000e2 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  e2:	40 e1       	ldi	r20, 0x10	; 16
  e4:	68 ed       	ldi	r22, 0xD8	; 216
  e6:	81 e6       	ldi	r24, 0x61	; 97
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret

000000f2 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret

000000f6 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 c0       	rjmp	.+16     	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  fa:	e8 2f       	mov	r30, r24
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	e0 5f       	subi	r30, 0xF0	; 240
 100:	fb 4f       	sbci	r31, 0xFB	; 251
 102:	90 81       	ld	r25, Z
 104:	98 60       	ori	r25, 0x08	; 8
 106:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	b0 f3       	brcs	.-20     	; 0xfa <mcu_init+0x4>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 c0       	rjmp	.+16     	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 112:	e8 2f       	mov	r30, r24
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e0 5d       	subi	r30, 0xD0	; 208
 118:	fb 4f       	sbci	r31, 0xFB	; 251
 11a:	90 81       	ld	r25, Z
 11c:	98 60       	ori	r25, 0x08	; 8
 11e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	b0 f3       	brcs	.-20     	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 c0       	rjmp	.+16     	; 0x13a <__EEPROM_REGION_LENGTH__+0x3a>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 12a:	e8 2f       	mov	r30, r24
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e0 5b       	subi	r30, 0xB0	; 176
 130:	fb 4f       	sbci	r31, 0xFB	; 251
 132:	90 81       	ld	r25, Z
 134:	98 60       	ori	r25, 0x08	; 8
 136:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	b0 f3       	brcs	.-20     	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 c0       	rjmp	.+16     	; 0x152 <__EEPROM_REGION_LENGTH__+0x52>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 142:	e8 2f       	mov	r30, r24
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	e0 59       	subi	r30, 0x90	; 144
 148:	fb 4f       	sbci	r31, 0xFB	; 251
 14a:	90 81       	ld	r25, Z
 14c:	98 60       	ori	r25, 0x08	; 8
 14e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	b0 f3       	brcs	.-20     	; 0x142 <__EEPROM_REGION_LENGTH__+0x42>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 c0       	rjmp	.+16     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 15a:	e8 2f       	mov	r30, r24
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e0 57       	subi	r30, 0x70	; 112
 160:	fb 4f       	sbci	r31, 0xFB	; 251
 162:	90 81       	ld	r25, Z
 164:	98 60       	ori	r25, 0x08	; 8
 166:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	b0 f3       	brcs	.-20     	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	08 c0       	rjmp	.+16     	; 0x182 <__EEPROM_REGION_LENGTH__+0x82>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 172:	e8 2f       	mov	r30, r24
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e0 55       	subi	r30, 0x50	; 80
 178:	fb 4f       	sbci	r31, 0xFB	; 251
 17a:	90 81       	ld	r25, Z
 17c:	98 60       	ori	r25, 0x08	; 8
 17e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	b0 f3       	brcs	.-20     	; 0x172 <__EEPROM_REGION_LENGTH__+0x72>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 186:	08 95       	ret

00000188 <TIMER_0_initialization>:
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 188:	8d b1       	in	r24, 0x0d	; 13
 18a:	8e 7f       	andi	r24, 0xFE	; 254
 18c:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 18e:	8c b1       	in	r24, 0x0c	; 12
 190:	81 60       	ori	r24, 0x01	; 1
 192:	8c b9       	out	0x0c, r24	; 12

	PD0_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 194:	e0 ee       	ldi	r30, 0xE0	; 224
 196:	f5 e0       	ldi	r31, 0x05	; 5
 198:	84 81       	ldd	r24, Z+4	; 0x04
 19a:	83 60       	ori	r24, 0x03	; 3
 19c:	84 83       	std	Z+4, r24	; 0x04
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 19e:	8d b1       	in	r24, 0x0d	; 13
 1a0:	8d 7f       	andi	r24, 0xFD	; 253
 1a2:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 1a4:	8c b1       	in	r24, 0x0c	; 12
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	8c b9       	out	0x0c, r24	; 12

	PD1_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 1aa:	84 81       	ldd	r24, Z+4	; 0x04
 1ac:	83 60       	ori	r24, 0x03	; 3
 1ae:	84 83       	std	Z+4, r24	; 0x04
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 1b0:	8d b1       	in	r24, 0x0d	; 13
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 1b6:	8c b1       	in	r24, 0x0c	; 12
 1b8:	84 60       	ori	r24, 0x04	; 4
 1ba:	8c b9       	out	0x0c, r24	; 12

	PD2_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 1bc:	84 81       	ldd	r24, Z+4	; 0x04
 1be:	83 60       	ori	r24, 0x03	; 3
 1c0:	84 83       	std	Z+4, r24	; 0x04

	TIMER_0_init();
 1c2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <TIMER_0_init>
 1c6:	08 95       	ret

000001c8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1c8:	0e 94 7b 00 	call	0xf6	; 0xf6 <mcu_init>

	CLKCTRL_init();
 1cc:	0e 94 71 00 	call	0xe2	; 0xe2 <CLKCTRL_init>

	TIMER_0_initialization();
 1d0:	0e 94 c4 00 	call	0x188	; 0x188 <TIMER_0_initialization>

	CPUINT_init();
 1d4:	0e 94 79 00 	call	0xf2	; 0xf2 <CPUINT_init>

	SLPCTRL_init();
 1d8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <SLPCTRL_init>

	BOD_init();
 1dc:	0e 94 6f 00 	call	0xde	; 0xde <BOD_init>
 1e0:	08 95       	ret

000001e2 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1e2:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1e4:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1e6:	40 83       	st	Z, r20
	ret                             // Return to caller
 1e8:	08 95       	ret

000001ea <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret

000001ee <TIMER_0_init>:

	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 1ee:	e0 e0       	ldi	r30, 0x00	; 0
 1f0:	fa e0       	ldi	r31, 0x0A	; 10
 1f2:	83 e7       	ldi	r24, 0x73	; 115
 1f4:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	// TCA0.SINGLE.PER = 0xffff; /* Period: 0xffff */

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
