
Timer2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000008e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031fe  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000271d  00000000  00000000  00003c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b9b  00000000  00000000  0000637b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d4  00000000  00000000  00006f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001605  00000000  00000000  000071ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045f  00000000  00000000  000087f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00008c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  a0:	0c 94 0b 04 	jmp	0x816	; 0x816 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 36 02 	call	0x46c	; 0x46c <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <buzzerfreq>:
 */ 

#include "buzzerfreq.h"

void buzzerfreq(int f)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <buzzerfreq+0x6>
  c2:	1f 92       	push	r1
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	8a 83       	std	Y+2, r24	; 0x02
  ca:	9b 83       	std	Y+3, r25	; 0x03
	uint8_t num;
	num=(1/(0.00000032*f));
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	9b 81       	ldd	r25, Y+3	; 0x03
  d0:	09 2e       	mov	r0, r25
  d2:	00 0c       	add	r0, r0
  d4:	aa 0b       	sbc	r26, r26
  d6:	bb 0b       	sbc	r27, r27
  d8:	bc 01       	movw	r22, r24
  da:	cd 01       	movw	r24, r26
  dc:	0e 94 12 03 	call	0x624	; 0x624 <__floatsisf>
  e0:	dc 01       	movw	r26, r24
  e2:	cb 01       	movw	r24, r22
  e4:	27 e7       	ldi	r18, 0x77	; 119
  e6:	3c ec       	ldi	r19, 0xCC	; 204
  e8:	4b ea       	ldi	r20, 0xAB	; 171
  ea:	54 e3       	ldi	r21, 0x34	; 52
  ec:	bc 01       	movw	r22, r24
  ee:	cd 01       	movw	r24, r26
  f0:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
  f4:	dc 01       	movw	r26, r24
  f6:	cb 01       	movw	r24, r22
  f8:	9c 01       	movw	r18, r24
  fa:	ad 01       	movw	r20, r26
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	9f e3       	ldi	r25, 0x3F	; 63
 104:	0e 94 6f 02 	call	0x4de	; 0x4de <__divsf3>
 108:	dc 01       	movw	r26, r24
 10a:	cb 01       	movw	r24, r22
 10c:	bc 01       	movw	r22, r24
 10e:	cd 01       	movw	r24, r26
 110:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__fixunssfsi>
 114:	dc 01       	movw	r26, r24
 116:	cb 01       	movw	r24, r22
 118:	89 83       	std	Y+1, r24	; 0x01
	TCB0.CCMPL=num ;
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	9a e0       	ldi	r25, 0x0A	; 10
 11e:	29 81       	ldd	r18, Y+1	; 0x01
 120:	fc 01       	movw	r30, r24
 122:	24 87       	std	Z+12, r18	; 0x0c
	TCB0.CCMPH= (num)/2 ;
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	9a e0       	ldi	r25, 0x0A	; 10
 128:	29 81       	ldd	r18, Y+1	; 0x01
 12a:	26 95       	lsr	r18
 12c:	fc 01       	movw	r30, r24
 12e:	25 87       	std	Z+13, r18	; 0x0d
 130:	00 00       	nop
 132:	23 96       	adiw	r28, 0x03	; 3
 134:	cd bf       	out	0x3d, r28	; 61
 136:	de bf       	out	0x3e, r29	; 62
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <main>:
#include <atmel_start.h>

int main(void)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	00 d0       	rcall	.+0      	; 0x144 <main+0x6>
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 148:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) 
	{
		int frequency=1400; //should be between 1300 and 200000
 14c:	88 e7       	ldi	r24, 0x78	; 120
 14e:	95 e0       	ldi	r25, 0x05	; 5
 150:	89 83       	std	Y+1, r24	; 0x01
 152:	9a 83       	std	Y+2, r25	; 0x02
		buzzerfreq(frequency);
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	0e 94 5e 00 	call	0xbc	; 0xbc <buzzerfreq>
	}
 15c:	f7 cf       	rjmp	.-18     	; 0x14c <main+0xe>

0000015e <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 166:	80 e0       	ldi	r24, 0x00	; 0
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <ccp_write_io+0x6>
 174:	1f 92       	push	r1
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	4b 81       	ldd	r20, Y+3	; 0x03
 186:	68 ed       	ldi	r22, 0xD8	; 216
 188:	0e 94 4a 02 	call	0x494	; 0x494 <protected_write_io>
}
 18c:	00 00       	nop
 18e:	23 96       	adiw	r28, 0x03	; 3
 190:	cd bf       	out	0x3d, r28	; 61
 192:	de bf       	out	0x3e, r29	; 62
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
 1a2:	6b e0       	ldi	r22, 0x0B	; 11
 1a4:	81 e6       	ldi	r24, 0x61	; 97
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 b7 00 	call	0x16e	; 0x16e <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 1ac:	80 e0       	ldi	r24, 0x00	; 0
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 1bc:	80 e0       	ldi	r24, 0x00	; 0
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <PORTA_set_pin_dir+0x6>
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	91 05       	cpc	r25, r1
 1dc:	e1 f0       	breq	.+56     	; 0x216 <PORTA_set_pin_dir+0x52>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	91 05       	cpc	r25, r1
 1e2:	71 f1       	breq	.+92     	; 0x240 <PORTA_set_pin_dir+0x7c>
 1e4:	89 2b       	or	r24, r25
 1e6:	09 f0       	breq	.+2      	; 0x1ea <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 1e8:	3b c0       	rjmp	.+118    	; 0x260 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 81       	ld	r24, Z
 1f6:	68 2f       	mov	r22, r24
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	48 2f       	mov	r20, r24
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <PORTA_set_pin_dir+0x44>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	4a 95       	dec	r20
 20a:	e2 f7       	brpl	.-8      	; 0x204 <PORTA_set_pin_dir+0x40>
 20c:	80 95       	com	r24
 20e:	86 23       	and	r24, r22
 210:	f9 01       	movw	r30, r18
 212:	80 83       	st	Z, r24
		break;
 214:	25 c0       	rjmp	.+74     	; 0x260 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	68 2f       	mov	r22, r24
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	48 2f       	mov	r20, r24
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <PORTA_set_pin_dir+0x70>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	4a 95       	dec	r20
 236:	e2 f7       	brpl	.-8      	; 0x230 <PORTA_set_pin_dir+0x6c>
 238:	86 2b       	or	r24, r22
 23a:	f9 01       	movw	r30, r18
 23c:	80 83       	st	Z, r24
		break;
 23e:	10 c0       	rjmp	.+32     	; 0x260 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	80 5f       	subi	r24, 0xF0	; 240
 248:	9b 4f       	sbci	r25, 0xFB	; 251
 24a:	29 81       	ldd	r18, Y+1	; 0x01
 24c:	22 2f       	mov	r18, r18
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	20 5f       	subi	r18, 0xF0	; 240
 252:	3b 4f       	sbci	r19, 0xFB	; 251
 254:	f9 01       	movw	r30, r18
 256:	20 81       	ld	r18, Z
 258:	28 60       	ori	r18, 0x08	; 8
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
		break;
 25e:	00 00       	nop
	default:
		break;
	}
}
 260:	00 00       	nop
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	00 d0       	rcall	.+0      	; 0x272 <PORTA_set_pin_level+0x6>
 272:	cd b7       	in	r28, 0x3d	; 61
 274:	de b7       	in	r29, 0x3e	; 62
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	88 23       	and	r24, r24
 27e:	a9 f0       	breq	.+42     	; 0x2aa <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	fc 01       	movw	r30, r24
 28a:	81 81       	ldd	r24, Z+1	; 0x01
 28c:	68 2f       	mov	r22, r24
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	48 2f       	mov	r20, r24
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <PORTA_set_pin_level+0x32>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	4a 95       	dec	r20
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <PORTA_set_pin_level+0x2e>
 2a2:	86 2b       	or	r24, r22
 2a4:	f9 01       	movw	r30, r18
 2a6:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 2a8:	15 c0       	rjmp	.+42     	; 0x2d4 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	fc 01       	movw	r30, r24
 2b4:	81 81       	ldd	r24, Z+1	; 0x01
 2b6:	68 2f       	mov	r22, r24
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	48 2f       	mov	r20, r24
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <PORTA_set_pin_level+0x5c>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	4a 95       	dec	r20
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <PORTA_set_pin_level+0x58>
 2cc:	80 95       	com	r24
 2ce:	86 23       	and	r24, r22
 2d0:	f9 01       	movw	r30, r18
 2d2:	81 83       	std	Z+1, r24	; 0x01
	}
}
 2d4:	00 00       	nop
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	08 95       	ret

000002e0 <PA2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA2_set_dir(const enum port_dir dir)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	1f 92       	push	r1
 2e6:	cd b7       	in	r28, 0x3d	; 61
 2e8:	de b7       	in	r29, 0x3e	; 62
 2ea:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
 2ec:	69 81       	ldd	r22, Y+1	; 0x01
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <PORTA_set_pin_dir>
}
 2f4:	00 00       	nop
 2f6:	0f 90       	pop	r0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <PA2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PA2_set_level(const bool level)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	1f 92       	push	r1
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(2, level);
 30a:	69 81       	ldd	r22, Y+1	; 0x01
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 36 01 	call	0x26c	; 0x26c <PORTA_set_pin_level>
}
 312:	00 00       	nop
 314:	0f 90       	pop	r0
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	26 97       	sbiw	r28, 0x06	; 6
 326:	cd bf       	out	0x3d, r28	; 61
 328:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 32a:	19 82       	std	Y+1, r1	; 0x01
 32c:	12 c0       	rjmp	.+36     	; 0x352 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	88 2f       	mov	r24, r24
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	80 5f       	subi	r24, 0xF0	; 240
 336:	9b 4f       	sbci	r25, 0xFB	; 251
 338:	29 81       	ldd	r18, Y+1	; 0x01
 33a:	22 2f       	mov	r18, r18
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	20 5f       	subi	r18, 0xF0	; 240
 340:	3b 4f       	sbci	r19, 0xFB	; 251
 342:	f9 01       	movw	r30, r18
 344:	20 81       	ld	r18, Z
 346:	28 60       	ori	r18, 0x08	; 8
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 34c:	89 81       	ldd	r24, Y+1	; 0x01
 34e:	8f 5f       	subi	r24, 0xFF	; 255
 350:	89 83       	std	Y+1, r24	; 0x01
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	88 30       	cpi	r24, 0x08	; 8
 356:	58 f3       	brcs	.-42     	; 0x32e <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 358:	1a 82       	std	Y+2, r1	; 0x02
 35a:	12 c0       	rjmp	.+36     	; 0x380 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	80 5d       	subi	r24, 0xD0	; 208
 364:	9b 4f       	sbci	r25, 0xFB	; 251
 366:	2a 81       	ldd	r18, Y+2	; 0x02
 368:	22 2f       	mov	r18, r18
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	20 5d       	subi	r18, 0xD0	; 208
 36e:	3b 4f       	sbci	r19, 0xFB	; 251
 370:	f9 01       	movw	r30, r18
 372:	20 81       	ld	r18, Z
 374:	28 60       	ori	r18, 0x08	; 8
 376:	fc 01       	movw	r30, r24
 378:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	8a 83       	std	Y+2, r24	; 0x02
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	88 30       	cpi	r24, 0x08	; 8
 384:	58 f3       	brcs	.-42     	; 0x35c <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 386:	1b 82       	std	Y+3, r1	; 0x03
 388:	12 c0       	rjmp	.+36     	; 0x3ae <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	88 2f       	mov	r24, r24
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	80 5b       	subi	r24, 0xB0	; 176
 392:	9b 4f       	sbci	r25, 0xFB	; 251
 394:	2b 81       	ldd	r18, Y+3	; 0x03
 396:	22 2f       	mov	r18, r18
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	20 5b       	subi	r18, 0xB0	; 176
 39c:	3b 4f       	sbci	r19, 0xFB	; 251
 39e:	f9 01       	movw	r30, r18
 3a0:	20 81       	ld	r18, Z
 3a2:	28 60       	ori	r18, 0x08	; 8
 3a4:	fc 01       	movw	r30, r24
 3a6:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3a8:	8b 81       	ldd	r24, Y+3	; 0x03
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	8b 83       	std	Y+3, r24	; 0x03
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	88 30       	cpi	r24, 0x08	; 8
 3b2:	58 f3       	brcs	.-42     	; 0x38a <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3b4:	1c 82       	std	Y+4, r1	; 0x04
 3b6:	12 c0       	rjmp	.+36     	; 0x3dc <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 3b8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ba:	88 2f       	mov	r24, r24
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	80 59       	subi	r24, 0x90	; 144
 3c0:	9b 4f       	sbci	r25, 0xFB	; 251
 3c2:	2c 81       	ldd	r18, Y+4	; 0x04
 3c4:	22 2f       	mov	r18, r18
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	20 59       	subi	r18, 0x90	; 144
 3ca:	3b 4f       	sbci	r19, 0xFB	; 251
 3cc:	f9 01       	movw	r30, r18
 3ce:	20 81       	ld	r18, Z
 3d0:	28 60       	ori	r18, 0x08	; 8
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3d6:	8c 81       	ldd	r24, Y+4	; 0x04
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	8c 83       	std	Y+4, r24	; 0x04
 3dc:	8c 81       	ldd	r24, Y+4	; 0x04
 3de:	88 30       	cpi	r24, 0x08	; 8
 3e0:	58 f3       	brcs	.-42     	; 0x3b8 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3e2:	1d 82       	std	Y+5, r1	; 0x05
 3e4:	12 c0       	rjmp	.+36     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 3e6:	8d 81       	ldd	r24, Y+5	; 0x05
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	80 57       	subi	r24, 0x70	; 112
 3ee:	9b 4f       	sbci	r25, 0xFB	; 251
 3f0:	2d 81       	ldd	r18, Y+5	; 0x05
 3f2:	22 2f       	mov	r18, r18
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	20 57       	subi	r18, 0x70	; 112
 3f8:	3b 4f       	sbci	r19, 0xFB	; 251
 3fa:	f9 01       	movw	r30, r18
 3fc:	20 81       	ld	r18, Z
 3fe:	28 60       	ori	r18, 0x08	; 8
 400:	fc 01       	movw	r30, r24
 402:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 404:	8d 81       	ldd	r24, Y+5	; 0x05
 406:	8f 5f       	subi	r24, 0xFF	; 255
 408:	8d 83       	std	Y+5, r24	; 0x05
 40a:	8d 81       	ldd	r24, Y+5	; 0x05
 40c:	88 30       	cpi	r24, 0x08	; 8
 40e:	58 f3       	brcs	.-42     	; 0x3e6 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 410:	1e 82       	std	Y+6, r1	; 0x06
 412:	12 c0       	rjmp	.+36     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 414:	8e 81       	ldd	r24, Y+6	; 0x06
 416:	88 2f       	mov	r24, r24
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	80 55       	subi	r24, 0x50	; 80
 41c:	9b 4f       	sbci	r25, 0xFB	; 251
 41e:	2e 81       	ldd	r18, Y+6	; 0x06
 420:	22 2f       	mov	r18, r18
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	20 55       	subi	r18, 0x50	; 80
 426:	3b 4f       	sbci	r19, 0xFB	; 251
 428:	f9 01       	movw	r30, r18
 42a:	20 81       	ld	r18, Z
 42c:	28 60       	ori	r18, 0x08	; 8
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 432:	8e 81       	ldd	r24, Y+6	; 0x06
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	8e 83       	std	Y+6, r24	; 0x06
 438:	8e 81       	ldd	r24, Y+6	; 0x06
 43a:	88 30       	cpi	r24, 0x08	; 8
 43c:	58 f3       	brcs	.-42     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 43e:	00 00       	nop
 440:	26 96       	adiw	r28, 0x06	; 6
 442:	cd bf       	out	0x3d, r28	; 61
 444:	de bf       	out	0x3e, r29	; 62
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <TIMER_0_initialization>:

#include "driver_init.h"
#include <system.h>

void TIMER_0_initialization(void)
{
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to output

	PA2_set_level(
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 7f 01 	call	0x2fe	; 0x2fe <PA2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	PA2_set_dir(PORT_DIR_OUT);
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <PA2_set_dir>

	TIMER_0_init();
 460:	0e 94 56 02 	call	0x4ac	; 0x4ac <TIMER_0_init>
}
 464:	00 00       	nop
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 474:	0e 94 8e 01 	call	0x31c	; 0x31c <mcu_init>

	CLKCTRL_init();
 478:	0e 94 cd 00 	call	0x19a	; 0x19a <CLKCTRL_init>

	TIMER_0_initialization();
 47c:	0e 94 26 02 	call	0x44c	; 0x44c <TIMER_0_initialization>

	CPUINT_init();
 480:	0e 94 da 00 	call	0x1b4	; 0x1b4 <CPUINT_init>

	SLPCTRL_init();
 484:	0e 94 4e 02 	call	0x49c	; 0x49c <SLPCTRL_init>

	BOD_init();
 488:	0e 94 af 00 	call	0x15e	; 0x15e <BOD_init>
}
 48c:	00 00       	nop
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 494:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 496:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 498:	40 83       	st	Z, r20
	ret                             // Return to caller
 49a:	08 95       	ret

0000049c <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <TIMER_0_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62

	TCB0.CCMP = 0xffff; /* Compare or Capture: 0xffff */
 4b4:	80 e8       	ldi	r24, 0x80	; 128
 4b6:	9a e0       	ldi	r25, 0x0A	; 10
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	3f ef       	ldi	r19, 0xFF	; 255
 4bc:	fc 01       	movw	r30, r24
 4be:	24 87       	std	Z+12, r18	; 0x0c
 4c0:	35 87       	std	Z+13, r19	; 0x0d

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	9a e0       	ldi	r25, 0x0A	; 10
 4c6:	27 e1       	ldi	r18, 0x17	; 23
 4c8:	fc 01       	movw	r30, r24
 4ca:	21 83       	std	Z+1, r18	; 0x01
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB0.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */;

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc  /* CLK_PER (No Prescaling) */
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	9a e0       	ldi	r25, 0x0A	; 10
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
 4d6:	80 e0       	ldi	r24, 0x00	; 0
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <__divsf3>:
 4de:	0e 94 83 02 	call	0x506	; 0x506 <__divsf3x>
 4e2:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 4e6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 4ea:	58 f0       	brcs	.+22     	; 0x502 <__divsf3+0x24>
 4ec:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 4f0:	40 f0       	brcs	.+16     	; 0x502 <__divsf3+0x24>
 4f2:	29 f4       	brne	.+10     	; 0x4fe <__divsf3+0x20>
 4f4:	5f 3f       	cpi	r21, 0xFF	; 255
 4f6:	29 f0       	breq	.+10     	; 0x502 <__divsf3+0x24>
 4f8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 4fc:	51 11       	cpse	r21, r1
 4fe:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 502:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>

00000506 <__divsf3x>:
 506:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 50a:	68 f3       	brcs	.-38     	; 0x4e6 <__divsf3+0x8>

0000050c <__divsf3_pse>:
 50c:	99 23       	and	r25, r25
 50e:	b1 f3       	breq	.-20     	; 0x4fc <__divsf3+0x1e>
 510:	55 23       	and	r21, r21
 512:	91 f3       	breq	.-28     	; 0x4f8 <__divsf3+0x1a>
 514:	95 1b       	sub	r25, r21
 516:	55 0b       	sbc	r21, r21
 518:	bb 27       	eor	r27, r27
 51a:	aa 27       	eor	r26, r26
 51c:	62 17       	cp	r22, r18
 51e:	73 07       	cpc	r23, r19
 520:	84 07       	cpc	r24, r20
 522:	38 f0       	brcs	.+14     	; 0x532 <__divsf3_pse+0x26>
 524:	9f 5f       	subi	r25, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	44 1f       	adc	r20, r20
 52e:	aa 1f       	adc	r26, r26
 530:	a9 f3       	breq	.-22     	; 0x51c <__divsf3_pse+0x10>
 532:	35 d0       	rcall	.+106    	; 0x59e <__divsf3_pse+0x92>
 534:	0e 2e       	mov	r0, r30
 536:	3a f0       	brmi	.+14     	; 0x546 <__divsf3_pse+0x3a>
 538:	e0 e8       	ldi	r30, 0x80	; 128
 53a:	32 d0       	rcall	.+100    	; 0x5a0 <__divsf3_pse+0x94>
 53c:	91 50       	subi	r25, 0x01	; 1
 53e:	50 40       	sbci	r21, 0x00	; 0
 540:	e6 95       	lsr	r30
 542:	00 1c       	adc	r0, r0
 544:	ca f7       	brpl	.-14     	; 0x538 <__divsf3_pse+0x2c>
 546:	2b d0       	rcall	.+86     	; 0x59e <__divsf3_pse+0x92>
 548:	fe 2f       	mov	r31, r30
 54a:	29 d0       	rcall	.+82     	; 0x59e <__divsf3_pse+0x92>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	bb 1f       	adc	r27, r27
 554:	26 17       	cp	r18, r22
 556:	37 07       	cpc	r19, r23
 558:	48 07       	cpc	r20, r24
 55a:	ab 07       	cpc	r26, r27
 55c:	b0 e8       	ldi	r27, 0x80	; 128
 55e:	09 f0       	breq	.+2      	; 0x562 <__divsf3_pse+0x56>
 560:	bb 0b       	sbc	r27, r27
 562:	80 2d       	mov	r24, r0
 564:	bf 01       	movw	r22, r30
 566:	ff 27       	eor	r31, r31
 568:	93 58       	subi	r25, 0x83	; 131
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	3a f0       	brmi	.+14     	; 0x57c <__divsf3_pse+0x70>
 56e:	9e 3f       	cpi	r25, 0xFE	; 254
 570:	51 05       	cpc	r21, r1
 572:	78 f0       	brcs	.+30     	; 0x592 <__divsf3_pse+0x86>
 574:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 578:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 57c:	5f 3f       	cpi	r21, 0xFF	; 255
 57e:	e4 f3       	brlt	.-8      	; 0x578 <__divsf3_pse+0x6c>
 580:	98 3e       	cpi	r25, 0xE8	; 232
 582:	d4 f3       	brlt	.-12     	; 0x578 <__divsf3_pse+0x6c>
 584:	86 95       	lsr	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b7 95       	ror	r27
 58c:	f7 95       	ror	r31
 58e:	9f 5f       	subi	r25, 0xFF	; 255
 590:	c9 f7       	brne	.-14     	; 0x584 <__divsf3_pse+0x78>
 592:	88 0f       	add	r24, r24
 594:	91 1d       	adc	r25, r1
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	97 f9       	bld	r25, 7
 59c:	08 95       	ret
 59e:	e1 e0       	ldi	r30, 0x01	; 1
 5a0:	66 0f       	add	r22, r22
 5a2:	77 1f       	adc	r23, r23
 5a4:	88 1f       	adc	r24, r24
 5a6:	bb 1f       	adc	r27, r27
 5a8:	62 17       	cp	r22, r18
 5aa:	73 07       	cpc	r23, r19
 5ac:	84 07       	cpc	r24, r20
 5ae:	ba 07       	cpc	r27, r26
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__divsf3_pse+0xae>
 5b2:	62 1b       	sub	r22, r18
 5b4:	73 0b       	sbc	r23, r19
 5b6:	84 0b       	sbc	r24, r20
 5b8:	ba 0b       	sbc	r27, r26
 5ba:	ee 1f       	adc	r30, r30
 5bc:	88 f7       	brcc	.-30     	; 0x5a0 <__divsf3_pse+0x94>
 5be:	e0 95       	com	r30
 5c0:	08 95       	ret

000005c2 <__fixunssfsi>:
 5c2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_splitA>
 5c6:	88 f0       	brcs	.+34     	; 0x5ea <__fixunssfsi+0x28>
 5c8:	9f 57       	subi	r25, 0x7F	; 127
 5ca:	98 f0       	brcs	.+38     	; 0x5f2 <__fixunssfsi+0x30>
 5cc:	b9 2f       	mov	r27, r25
 5ce:	99 27       	eor	r25, r25
 5d0:	b7 51       	subi	r27, 0x17	; 23
 5d2:	b0 f0       	brcs	.+44     	; 0x600 <__fixunssfsi+0x3e>
 5d4:	e1 f0       	breq	.+56     	; 0x60e <__fixunssfsi+0x4c>
 5d6:	66 0f       	add	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	1a f0       	brmi	.+6      	; 0x5e6 <__fixunssfsi+0x24>
 5e0:	ba 95       	dec	r27
 5e2:	c9 f7       	brne	.-14     	; 0x5d6 <__fixunssfsi+0x14>
 5e4:	14 c0       	rjmp	.+40     	; 0x60e <__fixunssfsi+0x4c>
 5e6:	b1 30       	cpi	r27, 0x01	; 1
 5e8:	91 f0       	breq	.+36     	; 0x60e <__fixunssfsi+0x4c>
 5ea:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_zero>
 5ee:	b1 e0       	ldi	r27, 0x01	; 1
 5f0:	08 95       	ret
 5f2:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_zero>
 5f6:	67 2f       	mov	r22, r23
 5f8:	78 2f       	mov	r23, r24
 5fa:	88 27       	eor	r24, r24
 5fc:	b8 5f       	subi	r27, 0xF8	; 248
 5fe:	39 f0       	breq	.+14     	; 0x60e <__fixunssfsi+0x4c>
 600:	b9 3f       	cpi	r27, 0xF9	; 249
 602:	cc f3       	brlt	.-14     	; 0x5f6 <__fixunssfsi+0x34>
 604:	86 95       	lsr	r24
 606:	77 95       	ror	r23
 608:	67 95       	ror	r22
 60a:	b3 95       	inc	r27
 60c:	d9 f7       	brne	.-10     	; 0x604 <__fixunssfsi+0x42>
 60e:	3e f4       	brtc	.+14     	; 0x61e <__fixunssfsi+0x5c>
 610:	90 95       	com	r25
 612:	80 95       	com	r24
 614:	70 95       	com	r23
 616:	61 95       	neg	r22
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <__floatunsisf>:
 620:	e8 94       	clt
 622:	09 c0       	rjmp	.+18     	; 0x636 <__floatsisf+0x12>

00000624 <__floatsisf>:
 624:	97 fb       	bst	r25, 7
 626:	3e f4       	brtc	.+14     	; 0x636 <__floatsisf+0x12>
 628:	90 95       	com	r25
 62a:	80 95       	com	r24
 62c:	70 95       	com	r23
 62e:	61 95       	neg	r22
 630:	7f 4f       	sbci	r23, 0xFF	; 255
 632:	8f 4f       	sbci	r24, 0xFF	; 255
 634:	9f 4f       	sbci	r25, 0xFF	; 255
 636:	99 23       	and	r25, r25
 638:	a9 f0       	breq	.+42     	; 0x664 <__floatsisf+0x40>
 63a:	f9 2f       	mov	r31, r25
 63c:	96 e9       	ldi	r25, 0x96	; 150
 63e:	bb 27       	eor	r27, r27
 640:	93 95       	inc	r25
 642:	f6 95       	lsr	r31
 644:	87 95       	ror	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b7 95       	ror	r27
 64c:	f1 11       	cpse	r31, r1
 64e:	f8 cf       	rjmp	.-16     	; 0x640 <__floatsisf+0x1c>
 650:	fa f4       	brpl	.+62     	; 0x690 <__floatsisf+0x6c>
 652:	bb 0f       	add	r27, r27
 654:	11 f4       	brne	.+4      	; 0x65a <__floatsisf+0x36>
 656:	60 ff       	sbrs	r22, 0
 658:	1b c0       	rjmp	.+54     	; 0x690 <__floatsisf+0x6c>
 65a:	6f 5f       	subi	r22, 0xFF	; 255
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	16 c0       	rjmp	.+44     	; 0x690 <__floatsisf+0x6c>
 664:	88 23       	and	r24, r24
 666:	11 f0       	breq	.+4      	; 0x66c <__floatsisf+0x48>
 668:	96 e9       	ldi	r25, 0x96	; 150
 66a:	11 c0       	rjmp	.+34     	; 0x68e <__floatsisf+0x6a>
 66c:	77 23       	and	r23, r23
 66e:	21 f0       	breq	.+8      	; 0x678 <__floatsisf+0x54>
 670:	9e e8       	ldi	r25, 0x8E	; 142
 672:	87 2f       	mov	r24, r23
 674:	76 2f       	mov	r23, r22
 676:	05 c0       	rjmp	.+10     	; 0x682 <__floatsisf+0x5e>
 678:	66 23       	and	r22, r22
 67a:	71 f0       	breq	.+28     	; 0x698 <__floatsisf+0x74>
 67c:	96 e8       	ldi	r25, 0x86	; 134
 67e:	86 2f       	mov	r24, r22
 680:	70 e0       	ldi	r23, 0x00	; 0
 682:	60 e0       	ldi	r22, 0x00	; 0
 684:	2a f0       	brmi	.+10     	; 0x690 <__floatsisf+0x6c>
 686:	9a 95       	dec	r25
 688:	66 0f       	add	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	da f7       	brpl	.-10     	; 0x686 <__floatsisf+0x62>
 690:	88 0f       	add	r24, r24
 692:	96 95       	lsr	r25
 694:	87 95       	ror	r24
 696:	97 f9       	bld	r25, 7
 698:	08 95       	ret

0000069a <__fp_inf>:
 69a:	97 f9       	bld	r25, 7
 69c:	9f 67       	ori	r25, 0x7F	; 127
 69e:	80 e8       	ldi	r24, 0x80	; 128
 6a0:	70 e0       	ldi	r23, 0x00	; 0
 6a2:	60 e0       	ldi	r22, 0x00	; 0
 6a4:	08 95       	ret

000006a6 <__fp_nan>:
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	80 ec       	ldi	r24, 0xC0	; 192
 6aa:	08 95       	ret

000006ac <__fp_pscA>:
 6ac:	00 24       	eor	r0, r0
 6ae:	0a 94       	dec	r0
 6b0:	16 16       	cp	r1, r22
 6b2:	17 06       	cpc	r1, r23
 6b4:	18 06       	cpc	r1, r24
 6b6:	09 06       	cpc	r0, r25
 6b8:	08 95       	ret

000006ba <__fp_pscB>:
 6ba:	00 24       	eor	r0, r0
 6bc:	0a 94       	dec	r0
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	05 06       	cpc	r0, r21
 6c6:	08 95       	ret

000006c8 <__fp_round>:
 6c8:	09 2e       	mov	r0, r25
 6ca:	03 94       	inc	r0
 6cc:	00 0c       	add	r0, r0
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__fp_round+0xc>
 6d0:	88 23       	and	r24, r24
 6d2:	52 f0       	brmi	.+20     	; 0x6e8 <__fp_round+0x20>
 6d4:	bb 0f       	add	r27, r27
 6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__fp_round+0x20>
 6d8:	bf 2b       	or	r27, r31
 6da:	11 f4       	brne	.+4      	; 0x6e0 <__fp_round+0x18>
 6dc:	60 ff       	sbrs	r22, 0
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__fp_round+0x20>
 6e0:	6f 5f       	subi	r22, 0xFF	; 255
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	8f 4f       	sbci	r24, 0xFF	; 255
 6e6:	9f 4f       	sbci	r25, 0xFF	; 255
 6e8:	08 95       	ret

000006ea <__fp_split3>:
 6ea:	57 fd       	sbrc	r21, 7
 6ec:	90 58       	subi	r25, 0x80	; 128
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	59 f0       	breq	.+22     	; 0x70a <__fp_splitA+0x10>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	71 f0       	breq	.+28     	; 0x714 <__fp_splitA+0x1a>
 6f8:	47 95       	ror	r20

000006fa <__fp_splitA>:
 6fa:	88 0f       	add	r24, r24
 6fc:	97 fb       	bst	r25, 7
 6fe:	99 1f       	adc	r25, r25
 700:	61 f0       	breq	.+24     	; 0x71a <__fp_splitA+0x20>
 702:	9f 3f       	cpi	r25, 0xFF	; 255
 704:	79 f0       	breq	.+30     	; 0x724 <__fp_splitA+0x2a>
 706:	87 95       	ror	r24
 708:	08 95       	ret
 70a:	12 16       	cp	r1, r18
 70c:	13 06       	cpc	r1, r19
 70e:	14 06       	cpc	r1, r20
 710:	55 1f       	adc	r21, r21
 712:	f2 cf       	rjmp	.-28     	; 0x6f8 <__fp_split3+0xe>
 714:	46 95       	lsr	r20
 716:	f1 df       	rcall	.-30     	; 0x6fa <__fp_splitA>
 718:	08 c0       	rjmp	.+16     	; 0x72a <__fp_splitA+0x30>
 71a:	16 16       	cp	r1, r22
 71c:	17 06       	cpc	r1, r23
 71e:	18 06       	cpc	r1, r24
 720:	99 1f       	adc	r25, r25
 722:	f1 cf       	rjmp	.-30     	; 0x706 <__fp_splitA+0xc>
 724:	86 95       	lsr	r24
 726:	71 05       	cpc	r23, r1
 728:	61 05       	cpc	r22, r1
 72a:	08 94       	sec
 72c:	08 95       	ret

0000072e <__fp_zero>:
 72e:	e8 94       	clt

00000730 <__fp_szero>:
 730:	bb 27       	eor	r27, r27
 732:	66 27       	eor	r22, r22
 734:	77 27       	eor	r23, r23
 736:	cb 01       	movw	r24, r22
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__mulsf3>:
 73c:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3x>
 740:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__fp_round>
 744:	0e 94 56 03 	call	0x6ac	; 0x6ac <__fp_pscA>
 748:	38 f0       	brcs	.+14     	; 0x758 <__mulsf3+0x1c>
 74a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__fp_pscB>
 74e:	20 f0       	brcs	.+8      	; 0x758 <__mulsf3+0x1c>
 750:	95 23       	and	r25, r21
 752:	11 f0       	breq	.+4      	; 0x758 <__mulsf3+0x1c>
 754:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 758:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__fp_nan>
 75c:	11 24       	eor	r1, r1
 75e:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>

00000762 <__mulsf3x>:
 762:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 766:	70 f3       	brcs	.-36     	; 0x744 <__mulsf3+0x8>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	c1 f3       	breq	.-16     	; 0x75c <__mulsf3+0x20>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	9a f0       	brmi	.+38     	; 0x7f0 <__mulsf3_pse+0x88>
 7ca:	f1 f0       	breq	.+60     	; 0x808 <__mulsf3_pse+0xa0>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	80 f0       	brcs	.+32     	; 0x808 <__mulsf3_pse+0xa0>
 7e8:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__fp_inf>
 7ec:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 7f0:	5f 3f       	cpi	r21, 0xFF	; 255
 7f2:	e4 f3       	brlt	.-8      	; 0x7ec <__mulsf3_pse+0x84>
 7f4:	98 3e       	cpi	r25, 0xE8	; 232
 7f6:	d4 f3       	brlt	.-12     	; 0x7ec <__mulsf3_pse+0x84>
 7f8:	86 95       	lsr	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	e7 95       	ror	r30
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	c1 f7       	brne	.-16     	; 0x7f8 <__mulsf3_pse+0x90>
 808:	fe 2b       	or	r31, r30
 80a:	88 0f       	add	r24, r24
 80c:	91 1d       	adc	r25, r1
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
