
My_Project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000014aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001456  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000014aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031a4  00000000  00000000  000016ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000263d  00000000  00000000  00004850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e9e  00000000  00000000  00006e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003ec  00000000  00000000  00007d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013b4  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000070e  00000000  00000000  000094cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00009bda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	0e 94 4c 06 	call	0xc98	; 0xc98 <main>
      a0:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <_exit>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
      b0:	0e 94 9f 08 	call	0x113e	; 0x113e <system_init>
}
      b4:	00 00       	nop
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	08 95       	ret

000000bc <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	00 d0       	rcall	.+0      	; 0xc2 <PORTD_set_pin_level+0x6>
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	89 83       	std	Y+1, r24	; 0x01
      c8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
      ca:	8a 81       	ldd	r24, Y+2	; 0x02
      cc:	88 23       	and	r24, r24
      ce:	a9 f0       	breq	.+42     	; 0xfa <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
      d0:	8c e0       	ldi	r24, 0x0C	; 12
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	2c e0       	ldi	r18, 0x0C	; 12
      d6:	30 e0       	ldi	r19, 0x00	; 0
      d8:	f9 01       	movw	r30, r18
      da:	21 81       	ldd	r18, Z+1	; 0x01
      dc:	62 2f       	mov	r22, r18
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	42 2f       	mov	r20, r18
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	21 e0       	ldi	r18, 0x01	; 1
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	02 c0       	rjmp	.+4      	; 0xee <PORTD_set_pin_level+0x32>
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	4a 95       	dec	r20
      f0:	e2 f7       	brpl	.-8      	; 0xea <PORTD_set_pin_level+0x2e>
      f2:	26 2b       	or	r18, r22
      f4:	fc 01       	movw	r30, r24
      f6:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
      f8:	15 c0       	rjmp	.+42     	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
      fa:	8c e0       	ldi	r24, 0x0C	; 12
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	2c e0       	ldi	r18, 0x0C	; 12
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	f9 01       	movw	r30, r18
     104:	21 81       	ldd	r18, Z+1	; 0x01
     106:	62 2f       	mov	r22, r18
     108:	29 81       	ldd	r18, Y+1	; 0x01
     10a:	42 2f       	mov	r20, r18
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	21 e0       	ldi	r18, 0x01	; 1
     110:	30 e0       	ldi	r19, 0x00	; 0
     112:	02 c0       	rjmp	.+4      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
     114:	22 0f       	add	r18, r18
     116:	33 1f       	adc	r19, r19
     118:	4a 95       	dec	r20
     11a:	e2 f7       	brpl	.-8      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
     11c:	20 95       	com	r18
     11e:	26 23       	and	r18, r22
     120:	fc 01       	movw	r30, r24
     122:	21 83       	std	Z+1, r18	; 0x01
	}
}
     124:	00 00       	nop
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	df 91       	pop	r29
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     130:	cf 93       	push	r28
     132:	df 93       	push	r29
     134:	1f 92       	push	r1
     136:	cd b7       	in	r28, 0x3d	; 61
     138:	de b7       	in	r29, 0x3e	; 62
     13a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     13c:	69 81       	ldd	r22, Y+1	; 0x01
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
     144:	00 00       	nop
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	1f 92       	push	r1
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     15a:	69 81       	ldd	r22, Y+1	; 0x01
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
     162:	00 00       	nop
     164:	0f 90       	pop	r0
     166:	df 91       	pop	r29
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     16c:	cf 93       	push	r28
     16e:	df 93       	push	r29
     170:	1f 92       	push	r1
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     178:	69 81       	ldd	r22, Y+1	; 0x01
     17a:	82 e0       	ldi	r24, 0x02	; 2
     17c:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_set_pin_level>
}
     180:	00 00       	nop
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <leddelay>:
} */
#include <atmel_start.h>
#include <stdbool.h>
#include <stdint.h>
#include <util/delay.h>
void leddelay(uint16_t delay_1,uint16_t delay_2,uint16_t delay_3){
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	df 93       	push	r29
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	c6 57       	subi	r28, 0x76	; 118
     198:	d1 09       	sbc	r29, r1
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	de bf       	out	0x3e, r29	; 62
     19e:	9e 01       	movw	r18, r28
     1a0:	2f 58       	subi	r18, 0x8F	; 143
     1a2:	3f 4f       	sbci	r19, 0xFF	; 255
     1a4:	f9 01       	movw	r30, r18
     1a6:	80 83       	st	Z, r24
     1a8:	91 83       	std	Z+1, r25	; 0x01
     1aa:	ce 01       	movw	r24, r28
     1ac:	8d 58       	subi	r24, 0x8D	; 141
     1ae:	9f 4f       	sbci	r25, 0xFF	; 255
     1b0:	fc 01       	movw	r30, r24
     1b2:	60 83       	st	Z, r22
     1b4:	71 83       	std	Z+1, r23	; 0x01
     1b6:	ce 01       	movw	r24, r28
     1b8:	8b 58       	subi	r24, 0x8B	; 139
     1ba:	9f 4f       	sbci	r25, 0xFF	; 255
     1bc:	fc 01       	movw	r30, r24
     1be:	40 83       	st	Z, r20
     1c0:	51 83       	std	Z+1, r21	; 0x01
		R0_MCU_set_level(true);
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	0e 94 98 00 	call	0x130	; 0x130 <R0_MCU_set_level>
		G0_MCU_set_level(true);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	0e 94 a7 00 	call	0x14e	; 0x14e <G0_MCU_set_level>
		B0_MCU_set_level(true);
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	0e 94 b6 00 	call	0x16c	; 0x16c <B0_MCU_set_level>
		_delay_ms(delay_1);
     1d4:	ce 01       	movw	r24, r28
     1d6:	8f 58       	subi	r24, 0x8F	; 143
     1d8:	9f 4f       	sbci	r25, 0xFF	; 255
     1da:	fc 01       	movw	r30, r24
     1dc:	80 81       	ld	r24, Z
     1de:	91 81       	ldd	r25, Z+1	; 0x01
     1e0:	cc 01       	movw	r24, r24
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	bc 01       	movw	r22, r24
     1e8:	cd 01       	movw	r24, r26
     1ea:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     1ee:	dc 01       	movw	r26, r24
     1f0:	cb 01       	movw	r24, r22
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	9a 83       	std	Y+2, r25	; 0x02
     1f6:	ab 83       	std	Y+3, r26	; 0x03
     1f8:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1fa:	8e 01       	movw	r16, r28
     1fc:	09 59       	subi	r16, 0x99	; 153
     1fe:	1f 4f       	sbci	r17, 0xFF	; 255
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	4a e7       	ldi	r20, 0x7A	; 122
     206:	53 e4       	ldi	r21, 0x43	; 67
     208:	69 81       	ldd	r22, Y+1	; 0x01
     20a:	7a 81       	ldd	r23, Y+2	; 0x02
     20c:	8b 81       	ldd	r24, Y+3	; 0x03
     20e:	9c 81       	ldd	r25, Y+4	; 0x04
     210:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	f8 01       	movw	r30, r16
     21a:	80 83       	st	Z, r24
     21c:	91 83       	std	Z+1, r25	; 0x01
     21e:	a2 83       	std	Z+2, r26	; 0x02
     220:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     222:	ce 01       	movw	r24, r28
     224:	89 59       	subi	r24, 0x99	; 153
     226:	9f 4f       	sbci	r25, 0xFF	; 255
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	40 e8       	ldi	r20, 0x80	; 128
     22e:	5f e3       	ldi	r21, 0x3F	; 63
     230:	fc 01       	movw	r30, r24
     232:	60 81       	ld	r22, Z
     234:	71 81       	ldd	r23, Z+1	; 0x01
     236:	82 81       	ldd	r24, Z+2	; 0x02
     238:	93 81       	ldd	r25, Z+3	; 0x03
     23a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__cmpsf2>
     23e:	88 23       	and	r24, r24
     240:	4c f4       	brge	.+18     	; 0x254 <leddelay+0xca>
		__ticks = 1;
     242:	ce 01       	movw	r24, r28
     244:	85 59       	subi	r24, 0x95	; 149
     246:	9f 4f       	sbci	r25, 0xFF	; 255
     248:	21 e0       	ldi	r18, 0x01	; 1
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	fc 01       	movw	r30, r24
     24e:	20 83       	st	Z, r18
     250:	31 83       	std	Z+1, r19	; 0x01
     252:	69 c0       	rjmp	.+210    	; 0x326 <leddelay+0x19c>
	else if (__tmp > 65535)
     254:	ce 01       	movw	r24, r28
     256:	89 59       	subi	r24, 0x99	; 153
     258:	9f 4f       	sbci	r25, 0xFF	; 255
     25a:	20 e0       	ldi	r18, 0x00	; 0
     25c:	3f ef       	ldi	r19, 0xFF	; 255
     25e:	4f e7       	ldi	r20, 0x7F	; 127
     260:	57 e4       	ldi	r21, 0x47	; 71
     262:	fc 01       	movw	r30, r24
     264:	60 81       	ld	r22, Z
     266:	71 81       	ldd	r23, Z+1	; 0x01
     268:	82 81       	ldd	r24, Z+2	; 0x02
     26a:	93 81       	ldd	r25, Z+3	; 0x03
     26c:	0e 94 8f 09 	call	0x131e	; 0x131e <__gesf2>
     270:	18 16       	cp	r1, r24
     272:	0c f0       	brlt	.+2      	; 0x276 <leddelay+0xec>
     274:	46 c0       	rjmp	.+140    	; 0x302 <leddelay+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 e2       	ldi	r20, 0x20	; 32
     27c:	51 e4       	ldi	r21, 0x41	; 65
     27e:	69 81       	ldd	r22, Y+1	; 0x01
     280:	7a 81       	ldd	r23, Y+2	; 0x02
     282:	8b 81       	ldd	r24, Y+3	; 0x03
     284:	9c 81       	ldd	r25, Y+4	; 0x04
     286:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     28a:	dc 01       	movw	r26, r24
     28c:	cb 01       	movw	r24, r22
     28e:	8e 01       	movw	r16, r28
     290:	05 59       	subi	r16, 0x95	; 149
     292:	1f 4f       	sbci	r17, 0xFF	; 255
     294:	bc 01       	movw	r22, r24
     296:	cd 01       	movw	r24, r26
     298:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	f8 01       	movw	r30, r16
     2a2:	80 83       	st	Z, r24
     2a4:	91 83       	std	Z+1, r25	; 0x01
     2a6:	24 c0       	rjmp	.+72     	; 0x2f0 <leddelay+0x166>
     2a8:	ce 01       	movw	r24, r28
     2aa:	83 59       	subi	r24, 0x93	; 147
     2ac:	9f 4f       	sbci	r25, 0xFF	; 255
     2ae:	29 e1       	ldi	r18, 0x19	; 25
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
     2b6:	31 83       	std	Z+1, r19	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2b8:	ce 01       	movw	r24, r28
     2ba:	83 59       	subi	r24, 0x93	; 147
     2bc:	9f 4f       	sbci	r25, 0xFF	; 255
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	91 81       	ldd	r25, Z+1	; 0x01
     2c4:	01 97       	sbiw	r24, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <leddelay+0x13a>
     2c8:	9e 01       	movw	r18, r28
     2ca:	23 59       	subi	r18, 0x93	; 147
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
     2ce:	f9 01       	movw	r30, r18
     2d0:	80 83       	st	Z, r24
     2d2:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d4:	ce 01       	movw	r24, r28
     2d6:	85 59       	subi	r24, 0x95	; 149
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	9e 01       	movw	r18, r28
     2dc:	25 59       	subi	r18, 0x95	; 149
     2de:	3f 4f       	sbci	r19, 0xFF	; 255
     2e0:	f9 01       	movw	r30, r18
     2e2:	20 81       	ld	r18, Z
     2e4:	31 81       	ldd	r19, Z+1	; 0x01
     2e6:	21 50       	subi	r18, 0x01	; 1
     2e8:	31 09       	sbc	r19, r1
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
     2ee:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2f0:	ce 01       	movw	r24, r28
     2f2:	85 59       	subi	r24, 0x95	; 149
     2f4:	9f 4f       	sbci	r25, 0xFF	; 255
     2f6:	fc 01       	movw	r30, r24
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	89 2b       	or	r24, r25
     2fe:	a1 f6       	brne	.-88     	; 0x2a8 <leddelay+0x11e>
     300:	2c c0       	rjmp	.+88     	; 0x35a <leddelay+0x1d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     302:	8e 01       	movw	r16, r28
     304:	05 59       	subi	r16, 0x95	; 149
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	ce 01       	movw	r24, r28
     30a:	89 59       	subi	r24, 0x99	; 153
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	fc 01       	movw	r30, r24
     310:	60 81       	ld	r22, Z
     312:	71 81       	ldd	r23, Z+1	; 0x01
     314:	82 81       	ldd	r24, Z+2	; 0x02
     316:	93 81       	ldd	r25, Z+3	; 0x03
     318:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     31c:	dc 01       	movw	r26, r24
     31e:	cb 01       	movw	r24, r22
     320:	f8 01       	movw	r30, r16
     322:	80 83       	st	Z, r24
     324:	91 83       	std	Z+1, r25	; 0x01
     326:	ce 01       	movw	r24, r28
     328:	81 59       	subi	r24, 0x91	; 145
     32a:	9f 4f       	sbci	r25, 0xFF	; 255
     32c:	9e 01       	movw	r18, r28
     32e:	25 59       	subi	r18, 0x95	; 149
     330:	3f 4f       	sbci	r19, 0xFF	; 255
     332:	f9 01       	movw	r30, r18
     334:	20 81       	ld	r18, Z
     336:	31 81       	ldd	r19, Z+1	; 0x01
     338:	fc 01       	movw	r30, r24
     33a:	20 83       	st	Z, r18
     33c:	31 83       	std	Z+1, r19	; 0x01
     33e:	ce 01       	movw	r24, r28
     340:	81 59       	subi	r24, 0x91	; 145
     342:	9f 4f       	sbci	r25, 0xFF	; 255
     344:	fc 01       	movw	r30, r24
     346:	80 81       	ld	r24, Z
     348:	91 81       	ldd	r25, Z+1	; 0x01
     34a:	01 97       	sbiw	r24, 0x01	; 1
     34c:	f1 f7       	brne	.-4      	; 0x34a <leddelay+0x1c0>
     34e:	9e 01       	movw	r18, r28
     350:	21 59       	subi	r18, 0x91	; 145
     352:	3f 4f       	sbci	r19, 0xFF	; 255
     354:	f9 01       	movw	r30, r18
     356:	80 83       	st	Z, r24
     358:	91 83       	std	Z+1, r25	; 0x01
		R0_MCU_set_level(false);//bg
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	0e 94 98 00 	call	0x130	; 0x130 <R0_MCU_set_level>
		_delay_ms(delay_2);
     360:	ce 01       	movw	r24, r28
     362:	8d 58       	subi	r24, 0x8D	; 141
     364:	9f 4f       	sbci	r25, 0xFF	; 255
     366:	fc 01       	movw	r30, r24
     368:	80 81       	ld	r24, Z
     36a:	91 81       	ldd	r25, Z+1	; 0x01
     36c:	cc 01       	movw	r24, r24
     36e:	a0 e0       	ldi	r26, 0x00	; 0
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     37a:	dc 01       	movw	r26, r24
     37c:	cb 01       	movw	r24, r22
     37e:	8d 83       	std	Y+5, r24	; 0x05
     380:	9e 83       	std	Y+6, r25	; 0x06
     382:	af 83       	std	Y+7, r26	; 0x07
     384:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     386:	8e 01       	movw	r16, r28
     388:	03 5a       	subi	r16, 0xA3	; 163
     38a:	1f 4f       	sbci	r17, 0xFF	; 255
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	4a e7       	ldi	r20, 0x7A	; 122
     392:	53 e4       	ldi	r21, 0x43	; 67
     394:	6d 81       	ldd	r22, Y+5	; 0x05
     396:	7e 81       	ldd	r23, Y+6	; 0x06
     398:	8f 81       	ldd	r24, Y+7	; 0x07
     39a:	98 85       	ldd	r25, Y+8	; 0x08
     39c:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     3a0:	dc 01       	movw	r26, r24
     3a2:	cb 01       	movw	r24, r22
     3a4:	f8 01       	movw	r30, r16
     3a6:	80 83       	st	Z, r24
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	a2 83       	std	Z+2, r26	; 0x02
     3ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3ae:	ce 01       	movw	r24, r28
     3b0:	83 5a       	subi	r24, 0xA3	; 163
     3b2:	9f 4f       	sbci	r25, 0xFF	; 255
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e8       	ldi	r20, 0x80	; 128
     3ba:	5f e3       	ldi	r21, 0x3F	; 63
     3bc:	fc 01       	movw	r30, r24
     3be:	60 81       	ld	r22, Z
     3c0:	71 81       	ldd	r23, Z+1	; 0x01
     3c2:	82 81       	ldd	r24, Z+2	; 0x02
     3c4:	93 81       	ldd	r25, Z+3	; 0x03
     3c6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__cmpsf2>
     3ca:	88 23       	and	r24, r24
     3cc:	4c f4       	brge	.+18     	; 0x3e0 <leddelay+0x256>
		__ticks = 1;
     3ce:	ce 01       	movw	r24, r28
     3d0:	8f 59       	subi	r24, 0x9F	; 159
     3d2:	9f 4f       	sbci	r25, 0xFF	; 255
     3d4:	21 e0       	ldi	r18, 0x01	; 1
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18
     3dc:	31 83       	std	Z+1, r19	; 0x01
     3de:	69 c0       	rjmp	.+210    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	else if (__tmp > 65535)
     3e0:	ce 01       	movw	r24, r28
     3e2:	83 5a       	subi	r24, 0xA3	; 163
     3e4:	9f 4f       	sbci	r25, 0xFF	; 255
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	3f ef       	ldi	r19, 0xFF	; 255
     3ea:	4f e7       	ldi	r20, 0x7F	; 127
     3ec:	57 e4       	ldi	r21, 0x47	; 71
     3ee:	fc 01       	movw	r30, r24
     3f0:	60 81       	ld	r22, Z
     3f2:	71 81       	ldd	r23, Z+1	; 0x01
     3f4:	82 81       	ldd	r24, Z+2	; 0x02
     3f6:	93 81       	ldd	r25, Z+3	; 0x03
     3f8:	0e 94 8f 09 	call	0x131e	; 0x131e <__gesf2>
     3fc:	18 16       	cp	r1, r24
     3fe:	0c f0       	brlt	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	46 c0       	rjmp	.+140    	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e2       	ldi	r20, 0x20	; 32
     408:	51 e4       	ldi	r21, 0x41	; 65
     40a:	6d 81       	ldd	r22, Y+5	; 0x05
     40c:	7e 81       	ldd	r23, Y+6	; 0x06
     40e:	8f 81       	ldd	r24, Y+7	; 0x07
     410:	98 85       	ldd	r25, Y+8	; 0x08
     412:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	8e 01       	movw	r16, r28
     41c:	0f 59       	subi	r16, 0x9F	; 159
     41e:	1f 4f       	sbci	r17, 0xFF	; 255
     420:	bc 01       	movw	r22, r24
     422:	cd 01       	movw	r24, r26
     424:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	f8 01       	movw	r30, r16
     42e:	80 83       	st	Z, r24
     430:	91 83       	std	Z+1, r25	; 0x01
     432:	24 c0       	rjmp	.+72     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     434:	ce 01       	movw	r24, r28
     436:	8d 59       	subi	r24, 0x9D	; 157
     438:	9f 4f       	sbci	r25, 0xFF	; 255
     43a:	29 e1       	ldi	r18, 0x19	; 25
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
     442:	31 83       	std	Z+1, r19	; 0x01
     444:	ce 01       	movw	r24, r28
     446:	8d 59       	subi	r24, 0x9D	; 157
     448:	9f 4f       	sbci	r25, 0xFF	; 255
     44a:	fc 01       	movw	r30, r24
     44c:	80 81       	ld	r24, Z
     44e:	91 81       	ldd	r25, Z+1	; 0x01
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     454:	9e 01       	movw	r18, r28
     456:	2d 59       	subi	r18, 0x9D	; 157
     458:	3f 4f       	sbci	r19, 0xFF	; 255
     45a:	f9 01       	movw	r30, r18
     45c:	80 83       	st	Z, r24
     45e:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     460:	ce 01       	movw	r24, r28
     462:	8f 59       	subi	r24, 0x9F	; 159
     464:	9f 4f       	sbci	r25, 0xFF	; 255
     466:	9e 01       	movw	r18, r28
     468:	2f 59       	subi	r18, 0x9F	; 159
     46a:	3f 4f       	sbci	r19, 0xFF	; 255
     46c:	f9 01       	movw	r30, r18
     46e:	20 81       	ld	r18, Z
     470:	31 81       	ldd	r19, Z+1	; 0x01
     472:	21 50       	subi	r18, 0x01	; 1
     474:	31 09       	sbc	r19, r1
     476:	fc 01       	movw	r30, r24
     478:	20 83       	st	Z, r18
     47a:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     47c:	ce 01       	movw	r24, r28
     47e:	8f 59       	subi	r24, 0x9F	; 159
     480:	9f 4f       	sbci	r25, 0xFF	; 255
     482:	fc 01       	movw	r30, r24
     484:	80 81       	ld	r24, Z
     486:	91 81       	ldd	r25, Z+1	; 0x01
     488:	89 2b       	or	r24, r25
     48a:	a1 f6       	brne	.-88     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     48c:	2c c0       	rjmp	.+88     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     48e:	8e 01       	movw	r16, r28
     490:	0f 59       	subi	r16, 0x9F	; 159
     492:	1f 4f       	sbci	r17, 0xFF	; 255
     494:	ce 01       	movw	r24, r28
     496:	83 5a       	subi	r24, 0xA3	; 163
     498:	9f 4f       	sbci	r25, 0xFF	; 255
     49a:	fc 01       	movw	r30, r24
     49c:	60 81       	ld	r22, Z
     49e:	71 81       	ldd	r23, Z+1	; 0x01
     4a0:	82 81       	ldd	r24, Z+2	; 0x02
     4a2:	93 81       	ldd	r25, Z+3	; 0x03
     4a4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     4a8:	dc 01       	movw	r26, r24
     4aa:	cb 01       	movw	r24, r22
     4ac:	f8 01       	movw	r30, r16
     4ae:	80 83       	st	Z, r24
     4b0:	91 83       	std	Z+1, r25	; 0x01
     4b2:	ce 01       	movw	r24, r28
     4b4:	8b 59       	subi	r24, 0x9B	; 155
     4b6:	9f 4f       	sbci	r25, 0xFF	; 255
     4b8:	9e 01       	movw	r18, r28
     4ba:	2f 59       	subi	r18, 0x9F	; 159
     4bc:	3f 4f       	sbci	r19, 0xFF	; 255
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	31 81       	ldd	r19, Z+1	; 0x01
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
     4c8:	31 83       	std	Z+1, r19	; 0x01
     4ca:	ce 01       	movw	r24, r28
     4cc:	8b 59       	subi	r24, 0x9B	; 155
     4ce:	9f 4f       	sbci	r25, 0xFF	; 255
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	91 81       	ldd	r25, Z+1	; 0x01
     4d6:	01 97       	sbiw	r24, 0x01	; 1
     4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4da:	9e 01       	movw	r18, r28
     4dc:	2b 59       	subi	r18, 0x9B	; 155
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	f9 01       	movw	r30, r18
     4e2:	80 83       	st	Z, r24
     4e4:	91 83       	std	Z+1, r25	; 0x01
		B0_MCU_set_level(false);//g only
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0e 94 b6 00 	call	0x16c	; 0x16c <B0_MCU_set_level>
		_delay_ms(delay_2);
     4ec:	ce 01       	movw	r24, r28
     4ee:	8d 58       	subi	r24, 0x8D	; 141
     4f0:	9f 4f       	sbci	r25, 0xFF	; 255
     4f2:	fc 01       	movw	r30, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	91 81       	ldd	r25, Z+1	; 0x01
     4f8:	cc 01       	movw	r24, r24
     4fa:	a0 e0       	ldi	r26, 0x00	; 0
     4fc:	b0 e0       	ldi	r27, 0x00	; 0
     4fe:	bc 01       	movw	r22, r24
     500:	cd 01       	movw	r24, r26
     502:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     506:	dc 01       	movw	r26, r24
     508:	cb 01       	movw	r24, r22
     50a:	89 87       	std	Y+9, r24	; 0x09
     50c:	9a 87       	std	Y+10, r25	; 0x0a
     50e:	ab 87       	std	Y+11, r26	; 0x0b
     510:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     512:	8e 01       	movw	r16, r28
     514:	0d 5a       	subi	r16, 0xAD	; 173
     516:	1f 4f       	sbci	r17, 0xFF	; 255
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	4a e7       	ldi	r20, 0x7A	; 122
     51e:	53 e4       	ldi	r21, 0x43	; 67
     520:	69 85       	ldd	r22, Y+9	; 0x09
     522:	7a 85       	ldd	r23, Y+10	; 0x0a
     524:	8b 85       	ldd	r24, Y+11	; 0x0b
     526:	9c 85       	ldd	r25, Y+12	; 0x0c
     528:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	f8 01       	movw	r30, r16
     532:	80 83       	st	Z, r24
     534:	91 83       	std	Z+1, r25	; 0x01
     536:	a2 83       	std	Z+2, r26	; 0x02
     538:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     53a:	ce 01       	movw	r24, r28
     53c:	8d 5a       	subi	r24, 0xAD	; 173
     53e:	9f 4f       	sbci	r25, 0xFF	; 255
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	40 e8       	ldi	r20, 0x80	; 128
     546:	5f e3       	ldi	r21, 0x3F	; 63
     548:	fc 01       	movw	r30, r24
     54a:	60 81       	ld	r22, Z
     54c:	71 81       	ldd	r23, Z+1	; 0x01
     54e:	82 81       	ldd	r24, Z+2	; 0x02
     550:	93 81       	ldd	r25, Z+3	; 0x03
     552:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__cmpsf2>
     556:	88 23       	and	r24, r24
     558:	4c f4       	brge	.+18     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
		__ticks = 1;
     55a:	ce 01       	movw	r24, r28
     55c:	89 5a       	subi	r24, 0xA9	; 169
     55e:	9f 4f       	sbci	r25, 0xFF	; 255
     560:	21 e0       	ldi	r18, 0x01	; 1
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
     568:	31 83       	std	Z+1, r19	; 0x01
     56a:	69 c0       	rjmp	.+210    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
	else if (__tmp > 65535)
     56c:	ce 01       	movw	r24, r28
     56e:	8d 5a       	subi	r24, 0xAD	; 173
     570:	9f 4f       	sbci	r25, 0xFF	; 255
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	3f ef       	ldi	r19, 0xFF	; 255
     576:	4f e7       	ldi	r20, 0x7F	; 127
     578:	57 e4       	ldi	r21, 0x47	; 71
     57a:	fc 01       	movw	r30, r24
     57c:	60 81       	ld	r22, Z
     57e:	71 81       	ldd	r23, Z+1	; 0x01
     580:	82 81       	ldd	r24, Z+2	; 0x02
     582:	93 81       	ldd	r25, Z+3	; 0x03
     584:	0e 94 8f 09 	call	0x131e	; 0x131e <__gesf2>
     588:	18 16       	cp	r1, r24
     58a:	0c f0       	brlt	.+2      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     58c:	46 c0       	rjmp	.+140    	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     58e:	20 e0       	ldi	r18, 0x00	; 0
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e2       	ldi	r20, 0x20	; 32
     594:	51 e4       	ldi	r21, 0x41	; 65
     596:	69 85       	ldd	r22, Y+9	; 0x09
     598:	7a 85       	ldd	r23, Y+10	; 0x0a
     59a:	8b 85       	ldd	r24, Y+11	; 0x0b
     59c:	9c 85       	ldd	r25, Y+12	; 0x0c
     59e:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     5a2:	dc 01       	movw	r26, r24
     5a4:	cb 01       	movw	r24, r22
     5a6:	8e 01       	movw	r16, r28
     5a8:	09 5a       	subi	r16, 0xA9	; 169
     5aa:	1f 4f       	sbci	r17, 0xFF	; 255
     5ac:	bc 01       	movw	r22, r24
     5ae:	cd 01       	movw	r24, r26
     5b0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	f8 01       	movw	r30, r16
     5ba:	80 83       	st	Z, r24
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	24 c0       	rjmp	.+72     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     5c0:	ce 01       	movw	r24, r28
     5c2:	87 5a       	subi	r24, 0xA7	; 167
     5c4:	9f 4f       	sbci	r25, 0xFF	; 255
     5c6:	29 e1       	ldi	r18, 0x19	; 25
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
     5ce:	31 83       	std	Z+1, r19	; 0x01
     5d0:	ce 01       	movw	r24, r28
     5d2:	87 5a       	subi	r24, 0xA7	; 167
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
     5d6:	fc 01       	movw	r30, r24
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5e0:	9e 01       	movw	r18, r28
     5e2:	27 5a       	subi	r18, 0xA7	; 167
     5e4:	3f 4f       	sbci	r19, 0xFF	; 255
     5e6:	f9 01       	movw	r30, r18
     5e8:	80 83       	st	Z, r24
     5ea:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ec:	ce 01       	movw	r24, r28
     5ee:	89 5a       	subi	r24, 0xA9	; 169
     5f0:	9f 4f       	sbci	r25, 0xFF	; 255
     5f2:	9e 01       	movw	r18, r28
     5f4:	29 5a       	subi	r18, 0xA9	; 169
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	f9 01       	movw	r30, r18
     5fa:	20 81       	ld	r18, Z
     5fc:	31 81       	ldd	r19, Z+1	; 0x01
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	31 09       	sbc	r19, r1
     602:	fc 01       	movw	r30, r24
     604:	20 83       	st	Z, r18
     606:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     608:	ce 01       	movw	r24, r28
     60a:	89 5a       	subi	r24, 0xA9	; 169
     60c:	9f 4f       	sbci	r25, 0xFF	; 255
     60e:	fc 01       	movw	r30, r24
     610:	80 81       	ld	r24, Z
     612:	91 81       	ldd	r25, Z+1	; 0x01
     614:	89 2b       	or	r24, r25
     616:	a1 f6       	brne	.-88     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     618:	2c c0       	rjmp	.+88     	; 0x672 <__LOCK_REGION_LENGTH__+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     61a:	8e 01       	movw	r16, r28
     61c:	09 5a       	subi	r16, 0xA9	; 169
     61e:	1f 4f       	sbci	r17, 0xFF	; 255
     620:	ce 01       	movw	r24, r28
     622:	8d 5a       	subi	r24, 0xAD	; 173
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	fc 01       	movw	r30, r24
     628:	60 81       	ld	r22, Z
     62a:	71 81       	ldd	r23, Z+1	; 0x01
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	f8 01       	movw	r30, r16
     63a:	80 83       	st	Z, r24
     63c:	91 83       	std	Z+1, r25	; 0x01
     63e:	ce 01       	movw	r24, r28
     640:	85 5a       	subi	r24, 0xA5	; 165
     642:	9f 4f       	sbci	r25, 0xFF	; 255
     644:	9e 01       	movw	r18, r28
     646:	29 5a       	subi	r18, 0xA9	; 169
     648:	3f 4f       	sbci	r19, 0xFF	; 255
     64a:	f9 01       	movw	r30, r18
     64c:	20 81       	ld	r18, Z
     64e:	31 81       	ldd	r19, Z+1	; 0x01
     650:	fc 01       	movw	r30, r24
     652:	20 83       	st	Z, r18
     654:	31 83       	std	Z+1, r19	; 0x01
     656:	ce 01       	movw	r24, r28
     658:	85 5a       	subi	r24, 0xA5	; 165
     65a:	9f 4f       	sbci	r25, 0xFF	; 255
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     666:	9e 01       	movw	r18, r28
     668:	25 5a       	subi	r18, 0xA5	; 165
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	f9 01       	movw	r30, r18
     66e:	80 83       	st	Z, r24
     670:	91 83       	std	Z+1, r25	; 0x01
		R0_MCU_set_level(true);//rg
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	0e 94 98 00 	call	0x130	; 0x130 <R0_MCU_set_level>
		_delay_ms(delay_1);
     678:	ce 01       	movw	r24, r28
     67a:	8f 58       	subi	r24, 0x8F	; 143
     67c:	9f 4f       	sbci	r25, 0xFF	; 255
     67e:	fc 01       	movw	r30, r24
     680:	80 81       	ld	r24, Z
     682:	91 81       	ldd	r25, Z+1	; 0x01
     684:	cc 01       	movw	r24, r24
     686:	a0 e0       	ldi	r26, 0x00	; 0
     688:	b0 e0       	ldi	r27, 0x00	; 0
     68a:	bc 01       	movw	r22, r24
     68c:	cd 01       	movw	r24, r26
     68e:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	8d 87       	std	Y+13, r24	; 0x0d
     698:	9e 87       	std	Y+14, r25	; 0x0e
     69a:	af 87       	std	Y+15, r26	; 0x0f
     69c:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     69e:	8e 01       	movw	r16, r28
     6a0:	07 5b       	subi	r16, 0xB7	; 183
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	4a e7       	ldi	r20, 0x7A	; 122
     6aa:	53 e4       	ldi	r21, 0x43	; 67
     6ac:	6d 85       	ldd	r22, Y+13	; 0x0d
     6ae:	7e 85       	ldd	r23, Y+14	; 0x0e
     6b0:	8f 85       	ldd	r24, Y+15	; 0x0f
     6b2:	98 89       	ldd	r25, Y+16	; 0x10
     6b4:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	f8 01       	movw	r30, r16
     6be:	80 83       	st	Z, r24
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	a2 83       	std	Z+2, r26	; 0x02
     6c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6c6:	ce 01       	movw	r24, r28
     6c8:	87 5b       	subi	r24, 0xB7	; 183
     6ca:	9f 4f       	sbci	r25, 0xFF	; 255
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e8       	ldi	r20, 0x80	; 128
     6d2:	5f e3       	ldi	r21, 0x3F	; 63
     6d4:	fc 01       	movw	r30, r24
     6d6:	60 81       	ld	r22, Z
     6d8:	71 81       	ldd	r23, Z+1	; 0x01
     6da:	82 81       	ldd	r24, Z+2	; 0x02
     6dc:	93 81       	ldd	r25, Z+3	; 0x03
     6de:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__cmpsf2>
     6e2:	88 23       	and	r24, r24
     6e4:	4c f4       	brge	.+18     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
		__ticks = 1;
     6e6:	ce 01       	movw	r24, r28
     6e8:	83 5b       	subi	r24, 0xB3	; 179
     6ea:	9f 4f       	sbci	r25, 0xFF	; 255
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
     6f4:	31 83       	std	Z+1, r19	; 0x01
     6f6:	69 c0       	rjmp	.+210    	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
	else if (__tmp > 65535)
     6f8:	ce 01       	movw	r24, r28
     6fa:	87 5b       	subi	r24, 0xB7	; 183
     6fc:	9f 4f       	sbci	r25, 0xFF	; 255
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	3f ef       	ldi	r19, 0xFF	; 255
     702:	4f e7       	ldi	r20, 0x7F	; 127
     704:	57 e4       	ldi	r21, 0x47	; 71
     706:	fc 01       	movw	r30, r24
     708:	60 81       	ld	r22, Z
     70a:	71 81       	ldd	r23, Z+1	; 0x01
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	93 81       	ldd	r25, Z+3	; 0x03
     710:	0e 94 8f 09 	call	0x131e	; 0x131e <__gesf2>
     714:	18 16       	cp	r1, r24
     716:	0c f0       	brlt	.+2      	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>
     718:	46 c0       	rjmp	.+140    	; 0x7a6 <__LOCK_REGION_LENGTH__+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e2       	ldi	r20, 0x20	; 32
     720:	51 e4       	ldi	r21, 0x41	; 65
     722:	6d 85       	ldd	r22, Y+13	; 0x0d
     724:	7e 85       	ldd	r23, Y+14	; 0x0e
     726:	8f 85       	ldd	r24, Y+15	; 0x0f
     728:	98 89       	ldd	r25, Y+16	; 0x10
     72a:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	8e 01       	movw	r16, r28
     734:	03 5b       	subi	r16, 0xB3	; 179
     736:	1f 4f       	sbci	r17, 0xFF	; 255
     738:	bc 01       	movw	r22, r24
     73a:	cd 01       	movw	r24, r26
     73c:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	f8 01       	movw	r30, r16
     746:	80 83       	st	Z, r24
     748:	91 83       	std	Z+1, r25	; 0x01
     74a:	24 c0       	rjmp	.+72     	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
     74c:	ce 01       	movw	r24, r28
     74e:	81 5b       	subi	r24, 0xB1	; 177
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	29 e1       	ldi	r18, 0x19	; 25
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18
     75a:	31 83       	std	Z+1, r19	; 0x01
     75c:	ce 01       	movw	r24, r28
     75e:	81 5b       	subi	r24, 0xB1	; 177
     760:	9f 4f       	sbci	r25, 0xFF	; 255
     762:	fc 01       	movw	r30, r24
     764:	80 81       	ld	r24, Z
     766:	91 81       	ldd	r25, Z+1	; 0x01
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <__LOCK_REGION_LENGTH__+0x368>
     76c:	9e 01       	movw	r18, r28
     76e:	21 5b       	subi	r18, 0xB1	; 177
     770:	3f 4f       	sbci	r19, 0xFF	; 255
     772:	f9 01       	movw	r30, r18
     774:	80 83       	st	Z, r24
     776:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     778:	ce 01       	movw	r24, r28
     77a:	83 5b       	subi	r24, 0xB3	; 179
     77c:	9f 4f       	sbci	r25, 0xFF	; 255
     77e:	9e 01       	movw	r18, r28
     780:	23 5b       	subi	r18, 0xB3	; 179
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	31 81       	ldd	r19, Z+1	; 0x01
     78a:	21 50       	subi	r18, 0x01	; 1
     78c:	31 09       	sbc	r19, r1
     78e:	fc 01       	movw	r30, r24
     790:	20 83       	st	Z, r18
     792:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     794:	ce 01       	movw	r24, r28
     796:	83 5b       	subi	r24, 0xB3	; 179
     798:	9f 4f       	sbci	r25, 0xFF	; 255
     79a:	fc 01       	movw	r30, r24
     79c:	80 81       	ld	r24, Z
     79e:	91 81       	ldd	r25, Z+1	; 0x01
     7a0:	89 2b       	or	r24, r25
     7a2:	a1 f6       	brne	.-88     	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     7a4:	2c c0       	rjmp	.+88     	; 0x7fe <__LOCK_REGION_LENGTH__+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7a6:	8e 01       	movw	r16, r28
     7a8:	03 5b       	subi	r16, 0xB3	; 179
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255
     7ac:	ce 01       	movw	r24, r28
     7ae:	87 5b       	subi	r24, 0xB7	; 183
     7b0:	9f 4f       	sbci	r25, 0xFF	; 255
     7b2:	fc 01       	movw	r30, r24
     7b4:	60 81       	ld	r22, Z
     7b6:	71 81       	ldd	r23, Z+1	; 0x01
     7b8:	82 81       	ldd	r24, Z+2	; 0x02
     7ba:	93 81       	ldd	r25, Z+3	; 0x03
     7bc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	f8 01       	movw	r30, r16
     7c6:	80 83       	st	Z, r24
     7c8:	91 83       	std	Z+1, r25	; 0x01
     7ca:	ce 01       	movw	r24, r28
     7cc:	8f 5a       	subi	r24, 0xAF	; 175
     7ce:	9f 4f       	sbci	r25, 0xFF	; 255
     7d0:	9e 01       	movw	r18, r28
     7d2:	23 5b       	subi	r18, 0xB3	; 179
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	f9 01       	movw	r30, r18
     7d8:	20 81       	ld	r18, Z
     7da:	31 81       	ldd	r19, Z+1	; 0x01
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
     7e0:	31 83       	std	Z+1, r19	; 0x01
     7e2:	ce 01       	movw	r24, r28
     7e4:	8f 5a       	subi	r24, 0xAF	; 175
     7e6:	9f 4f       	sbci	r25, 0xFF	; 255
     7e8:	fc 01       	movw	r30, r24
     7ea:	80 81       	ld	r24, Z
     7ec:	91 81       	ldd	r25, Z+1	; 0x01
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	f1 f7       	brne	.-4      	; 0x7ee <__LOCK_REGION_LENGTH__+0x3ee>
     7f2:	9e 01       	movw	r18, r28
     7f4:	2f 5a       	subi	r18, 0xAF	; 175
     7f6:	3f 4f       	sbci	r19, 0xFF	; 255
     7f8:	f9 01       	movw	r30, r18
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
		G0_MCU_set_level(false);//r only
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 a7 00 	call	0x14e	; 0x14e <G0_MCU_set_level>
		_delay_ms(delay_1);
     804:	ce 01       	movw	r24, r28
     806:	8f 58       	subi	r24, 0x8F	; 143
     808:	9f 4f       	sbci	r25, 0xFF	; 255
     80a:	fc 01       	movw	r30, r24
     80c:	80 81       	ld	r24, Z
     80e:	91 81       	ldd	r25, Z+1	; 0x01
     810:	cc 01       	movw	r24, r24
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	bc 01       	movw	r22, r24
     818:	cd 01       	movw	r24, r26
     81a:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	89 8b       	std	Y+17, r24	; 0x11
     824:	9a 8b       	std	Y+18, r25	; 0x12
     826:	ab 8b       	std	Y+19, r26	; 0x13
     828:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     82a:	8e 01       	movw	r16, r28
     82c:	01 5c       	subi	r16, 0xC1	; 193
     82e:	1f 4f       	sbci	r17, 0xFF	; 255
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	4a e7       	ldi	r20, 0x7A	; 122
     836:	53 e4       	ldi	r21, 0x43	; 67
     838:	69 89       	ldd	r22, Y+17	; 0x11
     83a:	7a 89       	ldd	r23, Y+18	; 0x12
     83c:	8b 89       	ldd	r24, Y+19	; 0x13
     83e:	9c 89       	ldd	r25, Y+20	; 0x14
     840:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     844:	dc 01       	movw	r26, r24
     846:	cb 01       	movw	r24, r22
     848:	f8 01       	movw	r30, r16
     84a:	80 83       	st	Z, r24
     84c:	91 83       	std	Z+1, r25	; 0x01
     84e:	a2 83       	std	Z+2, r26	; 0x02
     850:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     852:	ce 01       	movw	r24, r28
     854:	cf 96       	adiw	r24, 0x3f	; 63
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e8       	ldi	r20, 0x80	; 128
     85c:	5f e3       	ldi	r21, 0x3F	; 63
     85e:	fc 01       	movw	r30, r24
     860:	60 81       	ld	r22, Z
     862:	71 81       	ldd	r23, Z+1	; 0x01
     864:	82 81       	ldd	r24, Z+2	; 0x02
     866:	93 81       	ldd	r25, Z+3	; 0x03
     868:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__cmpsf2>
     86c:	88 23       	and	r24, r24
     86e:	4c f4       	brge	.+18     	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
		__ticks = 1;
     870:	ce 01       	movw	r24, r28
     872:	8d 5b       	subi	r24, 0xBD	; 189
     874:	9f 4f       	sbci	r25, 0xFF	; 255
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
     87e:	31 83       	std	Z+1, r19	; 0x01
     880:	67 c0       	rjmp	.+206    	; 0x950 <__LOCK_REGION_LENGTH__+0x550>
	else if (__tmp > 65535)
     882:	ce 01       	movw	r24, r28
     884:	cf 96       	adiw	r24, 0x3f	; 63
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	3f ef       	ldi	r19, 0xFF	; 255
     88a:	4f e7       	ldi	r20, 0x7F	; 127
     88c:	57 e4       	ldi	r21, 0x47	; 71
     88e:	fc 01       	movw	r30, r24
     890:	60 81       	ld	r22, Z
     892:	71 81       	ldd	r23, Z+1	; 0x01
     894:	82 81       	ldd	r24, Z+2	; 0x02
     896:	93 81       	ldd	r25, Z+3	; 0x03
     898:	0e 94 8f 09 	call	0x131e	; 0x131e <__gesf2>
     89c:	18 16       	cp	r1, r24
     89e:	0c f0       	brlt	.+2      	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     8a0:	46 c0       	rjmp	.+140    	; 0x92e <__LOCK_REGION_LENGTH__+0x52e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e2       	ldi	r20, 0x20	; 32
     8a8:	51 e4       	ldi	r21, 0x41	; 65
     8aa:	69 89       	ldd	r22, Y+17	; 0x11
     8ac:	7a 89       	ldd	r23, Y+18	; 0x12
     8ae:	8b 89       	ldd	r24, Y+19	; 0x13
     8b0:	9c 89       	ldd	r25, Y+20	; 0x14
     8b2:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	8e 01       	movw	r16, r28
     8bc:	0d 5b       	subi	r16, 0xBD	; 189
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	f8 01       	movw	r30, r16
     8ce:	80 83       	st	Z, r24
     8d0:	91 83       	std	Z+1, r25	; 0x01
     8d2:	24 c0       	rjmp	.+72     	; 0x91c <__LOCK_REGION_LENGTH__+0x51c>
     8d4:	ce 01       	movw	r24, r28
     8d6:	8b 5b       	subi	r24, 0xBB	; 187
     8d8:	9f 4f       	sbci	r25, 0xFF	; 255
     8da:	29 e1       	ldi	r18, 0x19	; 25
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
     8e2:	31 83       	std	Z+1, r19	; 0x01
     8e4:	ce 01       	movw	r24, r28
     8e6:	8b 5b       	subi	r24, 0xBB	; 187
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	fc 01       	movw	r30, r24
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__LOCK_REGION_LENGTH__+0x4f0>
     8f4:	9e 01       	movw	r18, r28
     8f6:	2b 5b       	subi	r18, 0xBB	; 187
     8f8:	3f 4f       	sbci	r19, 0xFF	; 255
     8fa:	f9 01       	movw	r30, r18
     8fc:	80 83       	st	Z, r24
     8fe:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     900:	ce 01       	movw	r24, r28
     902:	8d 5b       	subi	r24, 0xBD	; 189
     904:	9f 4f       	sbci	r25, 0xFF	; 255
     906:	9e 01       	movw	r18, r28
     908:	2d 5b       	subi	r18, 0xBD	; 189
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	31 81       	ldd	r19, Z+1	; 0x01
     912:	21 50       	subi	r18, 0x01	; 1
     914:	31 09       	sbc	r19, r1
     916:	fc 01       	movw	r30, r24
     918:	20 83       	st	Z, r18
     91a:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     91c:	ce 01       	movw	r24, r28
     91e:	8d 5b       	subi	r24, 0xBD	; 189
     920:	9f 4f       	sbci	r25, 0xFF	; 255
     922:	fc 01       	movw	r30, r24
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	89 2b       	or	r24, r25
     92a:	a1 f6       	brne	.-88     	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     92c:	2b c0       	rjmp	.+86     	; 0x984 <__LOCK_REGION_LENGTH__+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     92e:	8e 01       	movw	r16, r28
     930:	0d 5b       	subi	r16, 0xBD	; 189
     932:	1f 4f       	sbci	r17, 0xFF	; 255
     934:	ce 01       	movw	r24, r28
     936:	cf 96       	adiw	r24, 0x3f	; 63
     938:	fc 01       	movw	r30, r24
     93a:	60 81       	ld	r22, Z
     93c:	71 81       	ldd	r23, Z+1	; 0x01
     93e:	82 81       	ldd	r24, Z+2	; 0x02
     940:	93 81       	ldd	r25, Z+3	; 0x03
     942:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	f8 01       	movw	r30, r16
     94c:	80 83       	st	Z, r24
     94e:	91 83       	std	Z+1, r25	; 0x01
     950:	ce 01       	movw	r24, r28
     952:	89 5b       	subi	r24, 0xB9	; 185
     954:	9f 4f       	sbci	r25, 0xFF	; 255
     956:	9e 01       	movw	r18, r28
     958:	2d 5b       	subi	r18, 0xBD	; 189
     95a:	3f 4f       	sbci	r19, 0xFF	; 255
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	31 81       	ldd	r19, Z+1	; 0x01
     962:	fc 01       	movw	r30, r24
     964:	20 83       	st	Z, r18
     966:	31 83       	std	Z+1, r19	; 0x01
     968:	ce 01       	movw	r24, r28
     96a:	89 5b       	subi	r24, 0xB9	; 185
     96c:	9f 4f       	sbci	r25, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	01 97       	sbiw	r24, 0x01	; 1
     976:	f1 f7       	brne	.-4      	; 0x974 <__LOCK_REGION_LENGTH__+0x574>
     978:	9e 01       	movw	r18, r28
     97a:	29 5b       	subi	r18, 0xB9	; 185
     97c:	3f 4f       	sbci	r19, 0xFF	; 255
     97e:	f9 01       	movw	r30, r18
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
		B0_MCU_set_level(true);//rb
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	0e 94 b6 00 	call	0x16c	; 0x16c <B0_MCU_set_level>
		_delay_ms(delay_3);
     98a:	ce 01       	movw	r24, r28
     98c:	8b 58       	subi	r24, 0x8B	; 139
     98e:	9f 4f       	sbci	r25, 0xFF	; 255
     990:	fc 01       	movw	r30, r24
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	cc 01       	movw	r24, r24
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	bc 01       	movw	r22, r24
     99e:	cd 01       	movw	r24, r26
     9a0:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     9a4:	dc 01       	movw	r26, r24
     9a6:	cb 01       	movw	r24, r22
     9a8:	8d 8b       	std	Y+21, r24	; 0x15
     9aa:	9e 8b       	std	Y+22, r25	; 0x16
     9ac:	af 8b       	std	Y+23, r26	; 0x17
     9ae:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	4a e7       	ldi	r20, 0x7A	; 122
     9b6:	53 e4       	ldi	r21, 0x43	; 67
     9b8:	6d 89       	ldd	r22, Y+21	; 0x15
     9ba:	7e 89       	ldd	r23, Y+22	; 0x16
     9bc:	8f 89       	ldd	r24, Y+23	; 0x17
     9be:	98 8d       	ldd	r25, Y+24	; 0x18
     9c0:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     9c4:	dc 01       	movw	r26, r24
     9c6:	cb 01       	movw	r24, r22
     9c8:	8d ab       	std	Y+53, r24	; 0x35
     9ca:	9e ab       	std	Y+54, r25	; 0x36
     9cc:	af ab       	std	Y+55, r26	; 0x37
     9ce:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	6d a9       	ldd	r22, Y+53	; 0x35
     9da:	7e a9       	ldd	r23, Y+54	; 0x36
     9dc:	8f a9       	ldd	r24, Y+55	; 0x37
     9de:	98 ad       	ldd	r25, Y+56	; 0x38
     9e0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__cmpsf2>
     9e4:	88 23       	and	r24, r24
     9e6:	2c f4       	brge	.+10     	; 0x9f2 <__LOCK_REGION_LENGTH__+0x5f2>
		__ticks = 1;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	89 af       	std	Y+57, r24	; 0x39
     9ee:	9a af       	std	Y+58, r25	; 0x3a
     9f0:	3f c0       	rjmp	.+126    	; 0xa70 <__LOCK_REGION_LENGTH__+0x670>
	else if (__tmp > 65535)
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	3f ef       	ldi	r19, 0xFF	; 255
     9f6:	4f e7       	ldi	r20, 0x7F	; 127
     9f8:	57 e4       	ldi	r21, 0x47	; 71
     9fa:	6d a9       	ldd	r22, Y+53	; 0x35
     9fc:	7e a9       	ldd	r23, Y+54	; 0x36
     9fe:	8f a9       	ldd	r24, Y+55	; 0x37
     a00:	98 ad       	ldd	r25, Y+56	; 0x38
     a02:	0e 94 8f 09 	call	0x131e	; 0x131e <__gesf2>
     a06:	18 16       	cp	r1, r24
     a08:	4c f5       	brge	.+82     	; 0xa5c <__LOCK_REGION_LENGTH__+0x65c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	40 e2       	ldi	r20, 0x20	; 32
     a10:	51 e4       	ldi	r21, 0x41	; 65
     a12:	6d 89       	ldd	r22, Y+21	; 0x15
     a14:	7e 89       	ldd	r23, Y+22	; 0x16
     a16:	8f 89       	ldd	r24, Y+23	; 0x17
     a18:	98 8d       	ldd	r25, Y+24	; 0x18
     a1a:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     a2a:	dc 01       	movw	r26, r24
     a2c:	cb 01       	movw	r24, r22
     a2e:	89 af       	std	Y+57, r24	; 0x39
     a30:	9a af       	std	Y+58, r25	; 0x3a
     a32:	0f c0       	rjmp	.+30     	; 0xa52 <__LOCK_REGION_LENGTH__+0x652>
     a34:	89 e1       	ldi	r24, 0x19	; 25
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	8b af       	std	Y+59, r24	; 0x3b
     a3a:	9c af       	std	Y+60, r25	; 0x3c
     a3c:	8b ad       	ldd	r24, Y+59	; 0x3b
     a3e:	9c ad       	ldd	r25, Y+60	; 0x3c
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <__LOCK_REGION_LENGTH__+0x640>
     a44:	8b af       	std	Y+59, r24	; 0x3b
     a46:	9c af       	std	Y+60, r25	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a48:	89 ad       	ldd	r24, Y+57	; 0x39
     a4a:	9a ad       	ldd	r25, Y+58	; 0x3a
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	89 af       	std	Y+57, r24	; 0x39
     a50:	9a af       	std	Y+58, r25	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a52:	89 ad       	ldd	r24, Y+57	; 0x39
     a54:	9a ad       	ldd	r25, Y+58	; 0x3a
     a56:	89 2b       	or	r24, r25
     a58:	69 f7       	brne	.-38     	; 0xa34 <__LOCK_REGION_LENGTH__+0x634>
     a5a:	14 c0       	rjmp	.+40     	; 0xa84 <__LOCK_REGION_LENGTH__+0x684>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a5c:	6d a9       	ldd	r22, Y+53	; 0x35
     a5e:	7e a9       	ldd	r23, Y+54	; 0x36
     a60:	8f a9       	ldd	r24, Y+55	; 0x37
     a62:	98 ad       	ldd	r25, Y+56	; 0x38
     a64:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     a68:	dc 01       	movw	r26, r24
     a6a:	cb 01       	movw	r24, r22
     a6c:	89 af       	std	Y+57, r24	; 0x39
     a6e:	9a af       	std	Y+58, r25	; 0x3a
     a70:	89 ad       	ldd	r24, Y+57	; 0x39
     a72:	9a ad       	ldd	r25, Y+58	; 0x3a
     a74:	8d af       	std	Y+61, r24	; 0x3d
     a76:	9e af       	std	Y+62, r25	; 0x3e
     a78:	8d ad       	ldd	r24, Y+61	; 0x3d
     a7a:	9e ad       	ldd	r25, Y+62	; 0x3e
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <__LOCK_REGION_LENGTH__+0x67c>
     a80:	8d af       	std	Y+61, r24	; 0x3d
     a82:	9e af       	std	Y+62, r25	; 0x3e
		R0_MCU_set_level(false);//b
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 98 00 	call	0x130	; 0x130 <R0_MCU_set_level>
		_delay_ms(delay_3);
     a8a:	ce 01       	movw	r24, r28
     a8c:	8b 58       	subi	r24, 0x8B	; 139
     a8e:	9f 4f       	sbci	r25, 0xFF	; 255
     a90:	fc 01       	movw	r30, r24
     a92:	80 81       	ld	r24, Z
     a94:	91 81       	ldd	r25, Z+1	; 0x01
     a96:	cc 01       	movw	r24, r24
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	bc 01       	movw	r22, r24
     a9e:	cd 01       	movw	r24, r26
     aa0:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     aa4:	dc 01       	movw	r26, r24
     aa6:	cb 01       	movw	r24, r22
     aa8:	89 8f       	std	Y+25, r24	; 0x19
     aaa:	9a 8f       	std	Y+26, r25	; 0x1a
     aac:	ab 8f       	std	Y+27, r26	; 0x1b
     aae:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	4a e7       	ldi	r20, 0x7A	; 122
     ab6:	53 e4       	ldi	r21, 0x43	; 67
     ab8:	69 8d       	ldd	r22, Y+25	; 0x19
     aba:	7a 8d       	ldd	r23, Y+26	; 0x1a
     abc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     abe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ac0:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	8b a7       	std	Y+43, r24	; 0x2b
     aca:	9c a7       	std	Y+44, r25	; 0x2c
     acc:	ad a7       	std	Y+45, r26	; 0x2d
     ace:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e8       	ldi	r20, 0x80	; 128
     ad6:	5f e3       	ldi	r21, 0x3F	; 63
     ad8:	6b a5       	ldd	r22, Y+43	; 0x2b
     ada:	7c a5       	ldd	r23, Y+44	; 0x2c
     adc:	8d a5       	ldd	r24, Y+45	; 0x2d
     ade:	9e a5       	ldd	r25, Y+46	; 0x2e
     ae0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__cmpsf2>
     ae4:	88 23       	and	r24, r24
     ae6:	2c f4       	brge	.+10     	; 0xaf2 <__LOCK_REGION_LENGTH__+0x6f2>
		__ticks = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	8f a7       	std	Y+47, r24	; 0x2f
     aee:	98 ab       	std	Y+48, r25	; 0x30
     af0:	3f c0       	rjmp	.+126    	; 0xb70 <__LOCK_REGION_LENGTH__+0x770>
	else if (__tmp > 65535)
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	3f ef       	ldi	r19, 0xFF	; 255
     af6:	4f e7       	ldi	r20, 0x7F	; 127
     af8:	57 e4       	ldi	r21, 0x47	; 71
     afa:	6b a5       	ldd	r22, Y+43	; 0x2b
     afc:	7c a5       	ldd	r23, Y+44	; 0x2c
     afe:	8d a5       	ldd	r24, Y+45	; 0x2d
     b00:	9e a5       	ldd	r25, Y+46	; 0x2e
     b02:	0e 94 8f 09 	call	0x131e	; 0x131e <__gesf2>
     b06:	18 16       	cp	r1, r24
     b08:	4c f5       	brge	.+82     	; 0xb5c <__LOCK_REGION_LENGTH__+0x75c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	40 e2       	ldi	r20, 0x20	; 32
     b10:	51 e4       	ldi	r21, 0x41	; 65
     b12:	69 8d       	ldd	r22, Y+25	; 0x19
     b14:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b16:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b18:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b1a:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	bc 01       	movw	r22, r24
     b24:	cd 01       	movw	r24, r26
     b26:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     b2a:	dc 01       	movw	r26, r24
     b2c:	cb 01       	movw	r24, r22
     b2e:	8f a7       	std	Y+47, r24	; 0x2f
     b30:	98 ab       	std	Y+48, r25	; 0x30
     b32:	0f c0       	rjmp	.+30     	; 0xb52 <__LOCK_REGION_LENGTH__+0x752>
     b34:	89 e1       	ldi	r24, 0x19	; 25
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	89 ab       	std	Y+49, r24	; 0x31
     b3a:	9a ab       	std	Y+50, r25	; 0x32
     b3c:	89 a9       	ldd	r24, Y+49	; 0x31
     b3e:	9a a9       	ldd	r25, Y+50	; 0x32
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	f1 f7       	brne	.-4      	; 0xb40 <__LOCK_REGION_LENGTH__+0x740>
     b44:	89 ab       	std	Y+49, r24	; 0x31
     b46:	9a ab       	std	Y+50, r25	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b48:	8f a5       	ldd	r24, Y+47	; 0x2f
     b4a:	98 a9       	ldd	r25, Y+48	; 0x30
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	8f a7       	std	Y+47, r24	; 0x2f
     b50:	98 ab       	std	Y+48, r25	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b52:	8f a5       	ldd	r24, Y+47	; 0x2f
     b54:	98 a9       	ldd	r25, Y+48	; 0x30
     b56:	89 2b       	or	r24, r25
     b58:	69 f7       	brne	.-38     	; 0xb34 <__LOCK_REGION_LENGTH__+0x734>
     b5a:	14 c0       	rjmp	.+40     	; 0xb84 <__LOCK_REGION_LENGTH__+0x784>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b5c:	6b a5       	ldd	r22, Y+43	; 0x2b
     b5e:	7c a5       	ldd	r23, Y+44	; 0x2c
     b60:	8d a5       	ldd	r24, Y+45	; 0x2d
     b62:	9e a5       	ldd	r25, Y+46	; 0x2e
     b64:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	8f a7       	std	Y+47, r24	; 0x2f
     b6e:	98 ab       	std	Y+48, r25	; 0x30
     b70:	8f a5       	ldd	r24, Y+47	; 0x2f
     b72:	98 a9       	ldd	r25, Y+48	; 0x30
     b74:	8b ab       	std	Y+51, r24	; 0x33
     b76:	9c ab       	std	Y+52, r25	; 0x34
     b78:	8b a9       	ldd	r24, Y+51	; 0x33
     b7a:	9c a9       	ldd	r25, Y+52	; 0x34
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <__LOCK_REGION_LENGTH__+0x77c>
     b80:	8b ab       	std	Y+51, r24	; 0x33
     b82:	9c ab       	std	Y+52, r25	; 0x34
		B0_MCU_set_level(false);
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0e 94 b6 00 	call	0x16c	; 0x16c <B0_MCU_set_level>
		_delay_ms(delay_2);
     b8a:	ce 01       	movw	r24, r28
     b8c:	8d 58       	subi	r24, 0x8D	; 141
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	fc 01       	movw	r30, r24
     b92:	80 81       	ld	r24, Z
     b94:	91 81       	ldd	r25, Z+1	; 0x01
     b96:	cc 01       	movw	r24, r24
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	bc 01       	movw	r22, r24
     b9e:	cd 01       	movw	r24, r26
     ba0:	0e 94 05 09 	call	0x120a	; 0x120a <__floatunsisf>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	8d 8f       	std	Y+29, r24	; 0x1d
     baa:	9e 8f       	std	Y+30, r25	; 0x1e
     bac:	af 8f       	std	Y+31, r26	; 0x1f
     bae:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	4a e7       	ldi	r20, 0x7A	; 122
     bb6:	53 e4       	ldi	r21, 0x43	; 67
     bb8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bba:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bbe:	98 a1       	ldd	r25, Y+32	; 0x20
     bc0:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	89 a3       	std	Y+33, r24	; 0x21
     bca:	9a a3       	std	Y+34, r25	; 0x22
     bcc:	ab a3       	std	Y+35, r26	; 0x23
     bce:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e8       	ldi	r20, 0x80	; 128
     bd6:	5f e3       	ldi	r21, 0x3F	; 63
     bd8:	69 a1       	ldd	r22, Y+33	; 0x21
     bda:	7a a1       	ldd	r23, Y+34	; 0x22
     bdc:	8b a1       	ldd	r24, Y+35	; 0x23
     bde:	9c a1       	ldd	r25, Y+36	; 0x24
     be0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__cmpsf2>
     be4:	88 23       	and	r24, r24
     be6:	2c f4       	brge	.+10     	; 0xbf2 <__LOCK_REGION_LENGTH__+0x7f2>
		__ticks = 1;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	8d a3       	std	Y+37, r24	; 0x25
     bee:	9e a3       	std	Y+38, r25	; 0x26
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <__LOCK_REGION_LENGTH__+0x870>
	else if (__tmp > 65535)
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	3f ef       	ldi	r19, 0xFF	; 255
     bf6:	4f e7       	ldi	r20, 0x7F	; 127
     bf8:	57 e4       	ldi	r21, 0x47	; 71
     bfa:	69 a1       	ldd	r22, Y+33	; 0x21
     bfc:	7a a1       	ldd	r23, Y+34	; 0x22
     bfe:	8b a1       	ldd	r24, Y+35	; 0x23
     c00:	9c a1       	ldd	r25, Y+36	; 0x24
     c02:	0e 94 8f 09 	call	0x131e	; 0x131e <__gesf2>
     c06:	18 16       	cp	r1, r24
     c08:	4c f5       	brge	.+82     	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c14:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c16:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c18:	98 a1       	ldd	r25, Y+32	; 0x20
     c1a:	0e 94 94 09 	call	0x1328	; 0x1328 <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	bc 01       	movw	r22, r24
     c24:	cd 01       	movw	r24, r26
     c26:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	8d a3       	std	Y+37, r24	; 0x25
     c30:	9e a3       	std	Y+38, r25	; 0x26
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <__LOCK_REGION_LENGTH__+0x852>
     c34:	89 e1       	ldi	r24, 0x19	; 25
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	8f a3       	std	Y+39, r24	; 0x27
     c3a:	98 a7       	std	Y+40, r25	; 0x28
     c3c:	8f a1       	ldd	r24, Y+39	; 0x27
     c3e:	98 a5       	ldd	r25, Y+40	; 0x28
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <__LOCK_REGION_LENGTH__+0x840>
     c44:	8f a3       	std	Y+39, r24	; 0x27
     c46:	98 a7       	std	Y+40, r25	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c48:	8d a1       	ldd	r24, Y+37	; 0x25
     c4a:	9e a1       	ldd	r25, Y+38	; 0x26
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	8d a3       	std	Y+37, r24	; 0x25
     c50:	9e a3       	std	Y+38, r25	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c52:	8d a1       	ldd	r24, Y+37	; 0x25
     c54:	9e a1       	ldd	r25, Y+38	; 0x26
     c56:	89 2b       	or	r24, r25
     c58:	69 f7       	brne	.-38     	; 0xc34 <__LOCK_REGION_LENGTH__+0x834>
     c5a:	14 c0       	rjmp	.+40     	; 0xc84 <__LOCK_REGION_LENGTH__+0x884>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5c:	69 a1       	ldd	r22, Y+33	; 0x21
     c5e:	7a a1       	ldd	r23, Y+34	; 0x22
     c60:	8b a1       	ldd	r24, Y+35	; 0x23
     c62:	9c a1       	ldd	r25, Y+36	; 0x24
     c64:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	8d a3       	std	Y+37, r24	; 0x25
     c6e:	9e a3       	std	Y+38, r25	; 0x26
     c70:	8d a1       	ldd	r24, Y+37	; 0x25
     c72:	9e a1       	ldd	r25, Y+38	; 0x26
     c74:	89 a7       	std	Y+41, r24	; 0x29
     c76:	9a a7       	std	Y+42, r25	; 0x2a
     c78:	89 a5       	ldd	r24, Y+41	; 0x29
     c7a:	9a a5       	ldd	r25, Y+42	; 0x2a
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <__LOCK_REGION_LENGTH__+0x87c>
     c80:	89 a7       	std	Y+41, r24	; 0x29
     c82:	9a a7       	std	Y+42, r25	; 0x2a
     c84:	00 00       	nop
     c86:	ca 58       	subi	r28, 0x8A	; 138
     c88:	df 4f       	sbci	r29, 0xFF	; 255
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <main>:
#include <atmel_start.h>
#include "toggle_rgb.h"
int main(void)
{
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     ca0:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		//led_selector(1,1,1,500,500,500);
		leddelay(200,200,200);
     ca4:	48 ec       	ldi	r20, 0xC8	; 200
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	68 ec       	ldi	r22, 0xC8	; 200
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	88 ec       	ldi	r24, 0xC8	; 200
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 c5 00 	call	0x18a	; 0x18a <leddelay>
	}
     cb4:	f7 cf       	rjmp	.-18     	; 0xca4 <main+0xc>

00000cb6 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     cbe:	80 e0       	ldi	r24, 0x00	; 0
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	08 95       	ret

00000cc6 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     cce:	80 e0       	ldi	r24, 0x00	; 0
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     cde:	80 e0       	ldi	r24, 0x00	; 0
}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	00 d0       	rcall	.+0      	; 0xcec <PORTA_set_pin_dir+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	91 05       	cpc	r25, r1
     cfe:	e1 f0       	breq	.+56     	; 0xd38 <PORTA_set_pin_dir+0x52>
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	91 05       	cpc	r25, r1
     d04:	71 f1       	breq	.+92     	; 0xd62 <PORTA_set_pin_dir+0x7c>
     d06:	89 2b       	or	r24, r25
     d08:	09 f0       	breq	.+2      	; 0xd0c <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     d0a:	3b c0       	rjmp	.+118    	; 0xd82 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	fc 01       	movw	r30, r24
     d16:	80 81       	ld	r24, Z
     d18:	68 2f       	mov	r22, r24
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	48 2f       	mov	r20, r24
     d1e:	50 e0       	ldi	r21, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <PORTA_set_pin_dir+0x44>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	4a 95       	dec	r20
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <PORTA_set_pin_dir+0x40>
     d2e:	80 95       	com	r24
     d30:	86 23       	and	r24, r22
     d32:	f9 01       	movw	r30, r18
     d34:	80 83       	st	Z, r24
		break;
     d36:	25 c0       	rjmp	.+74     	; 0xd82 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	80 81       	ld	r24, Z
     d44:	68 2f       	mov	r22, r24
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	48 2f       	mov	r20, r24
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <PORTA_set_pin_dir+0x70>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	4a 95       	dec	r20
     d58:	e2 f7       	brpl	.-8      	; 0xd52 <PORTA_set_pin_dir+0x6c>
     d5a:	86 2b       	or	r24, r22
     d5c:	f9 01       	movw	r30, r18
     d5e:	80 83       	st	Z, r24
		break;
     d60:	10 c0       	rjmp	.+32     	; 0xd82 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	80 5f       	subi	r24, 0xF0	; 240
     d6a:	9b 4f       	sbci	r25, 0xFB	; 251
     d6c:	29 81       	ldd	r18, Y+1	; 0x01
     d6e:	22 2f       	mov	r18, r18
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	20 5f       	subi	r18, 0xF0	; 240
     d74:	3b 4f       	sbci	r19, 0xFB	; 251
     d76:	f9 01       	movw	r30, r18
     d78:	20 81       	ld	r18, Z
     d7a:	28 60       	ori	r18, 0x08	; 8
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18
		break;
     d80:	00 00       	nop
	default:
		break;
	}
}
     d82:	00 00       	nop
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	00 d0       	rcall	.+0      	; 0xd94 <PORTA_set_pin_level+0x6>
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	88 23       	and	r24, r24
     da0:	a9 f0       	breq	.+42     	; 0xdcc <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	fc 01       	movw	r30, r24
     dac:	81 81       	ldd	r24, Z+1	; 0x01
     dae:	68 2f       	mov	r22, r24
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	48 2f       	mov	r20, r24
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <PORTA_set_pin_level+0x32>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	4a 95       	dec	r20
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <PORTA_set_pin_level+0x2e>
     dc4:	86 2b       	or	r24, r22
     dc6:	f9 01       	movw	r30, r18
     dc8:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
     dca:	15 c0       	rjmp	.+42     	; 0xdf6 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	fc 01       	movw	r30, r24
     dd6:	81 81       	ldd	r24, Z+1	; 0x01
     dd8:	68 2f       	mov	r22, r24
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	48 2f       	mov	r20, r24
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <PORTA_set_pin_level+0x5c>
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	4a 95       	dec	r20
     dec:	e2 f7       	brpl	.-8      	; 0xde6 <PORTA_set_pin_level+0x58>
     dee:	80 95       	com	r24
     df0:	86 23       	and	r24, r22
     df2:	f9 01       	movw	r30, r18
     df4:	81 83       	std	Z+1, r24	; 0x01
	}
}
     df6:	00 00       	nop
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	00 d0       	rcall	.+0      	; 0xe08 <PORTD_set_pin_dir+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	91 05       	cpc	r25, r1
     e1a:	e1 f0       	breq	.+56     	; 0xe54 <PORTD_set_pin_dir+0x52>
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	91 05       	cpc	r25, r1
     e20:	71 f1       	breq	.+92     	; 0xe7e <PORTD_set_pin_dir+0x7c>
     e22:	89 2b       	or	r24, r25
     e24:	09 f0       	breq	.+2      	; 0xe28 <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     e26:	3b c0       	rjmp	.+118    	; 0xe9e <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
     e28:	8c e0       	ldi	r24, 0x0C	; 12
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	2c e0       	ldi	r18, 0x0C	; 12
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	f9 01       	movw	r30, r18
     e32:	20 81       	ld	r18, Z
     e34:	62 2f       	mov	r22, r18
     e36:	29 81       	ldd	r18, Y+1	; 0x01
     e38:	42 2f       	mov	r20, r18
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	21 e0       	ldi	r18, 0x01	; 1
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <PORTD_set_pin_dir+0x44>
     e42:	22 0f       	add	r18, r18
     e44:	33 1f       	adc	r19, r19
     e46:	4a 95       	dec	r20
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <PORTD_set_pin_dir+0x40>
     e4a:	20 95       	com	r18
     e4c:	26 23       	and	r18, r22
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
		break;
     e52:	25 c0       	rjmp	.+74     	; 0xe9e <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     e54:	8c e0       	ldi	r24, 0x0C	; 12
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	2c e0       	ldi	r18, 0x0C	; 12
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	f9 01       	movw	r30, r18
     e5e:	20 81       	ld	r18, Z
     e60:	62 2f       	mov	r22, r18
     e62:	29 81       	ldd	r18, Y+1	; 0x01
     e64:	42 2f       	mov	r20, r18
     e66:	50 e0       	ldi	r21, 0x00	; 0
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <PORTD_set_pin_dir+0x70>
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	4a 95       	dec	r20
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <PORTD_set_pin_dir+0x6c>
     e76:	26 2b       	or	r18, r22
     e78:	fc 01       	movw	r30, r24
     e7a:	20 83       	st	Z, r18
		break;
     e7c:	10 c0       	rjmp	.+32     	; 0xe9e <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	80 59       	subi	r24, 0x90	; 144
     e86:	9b 4f       	sbci	r25, 0xFB	; 251
     e88:	29 81       	ldd	r18, Y+1	; 0x01
     e8a:	22 2f       	mov	r18, r18
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	20 59       	subi	r18, 0x90	; 144
     e90:	3b 4f       	sbci	r19, 0xFB	; 251
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	28 60       	ori	r18, 0x08	; 8
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
		break;
     e9c:	00 00       	nop
	default:
		break;
	}
}
     e9e:	00 00       	nop
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <PORTD_set_pin_level+0x6>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     eb8:	8a 81       	ldd	r24, Y+2	; 0x02
     eba:	88 23       	and	r24, r24
     ebc:	a9 f0       	breq	.+42     	; 0xee8 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
     ebe:	8c e0       	ldi	r24, 0x0C	; 12
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2c e0       	ldi	r18, 0x0C	; 12
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	21 81       	ldd	r18, Z+1	; 0x01
     eca:	62 2f       	mov	r22, r18
     ecc:	29 81       	ldd	r18, Y+1	; 0x01
     ece:	42 2f       	mov	r20, r18
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	21 e0       	ldi	r18, 0x01	; 1
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <PORTD_set_pin_level+0x32>
     ed8:	22 0f       	add	r18, r18
     eda:	33 1f       	adc	r19, r19
     edc:	4a 95       	dec	r20
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <PORTD_set_pin_level+0x2e>
     ee0:	26 2b       	or	r18, r22
     ee2:	fc 01       	movw	r30, r24
     ee4:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
     ee6:	15 c0       	rjmp	.+42     	; 0xf12 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     ee8:	8c e0       	ldi	r24, 0x0C	; 12
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	2c e0       	ldi	r18, 0x0C	; 12
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	f9 01       	movw	r30, r18
     ef2:	21 81       	ldd	r18, Z+1	; 0x01
     ef4:	62 2f       	mov	r22, r18
     ef6:	29 81       	ldd	r18, Y+1	; 0x01
     ef8:	42 2f       	mov	r20, r18
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	21 e0       	ldi	r18, 0x01	; 1
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <PORTD_set_pin_level+0x5c>
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	4a 95       	dec	r20
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <PORTD_set_pin_level+0x58>
     f0a:	20 95       	com	r18
     f0c:	26 23       	and	r18, r22
     f0e:	fc 01       	movw	r30, r24
     f10:	21 83       	std	Z+1, r18	; 0x01
	}
}
     f12:	00 00       	nop
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	1f 92       	push	r1
     f24:	cd b7       	in	r28, 0x3d	; 61
     f26:	de b7       	in	r29, 0x3e	; 62
     f28:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
     f2a:	69 81       	ldd	r22, Y+1	; 0x01
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	0e 94 73 06 	call	0xce6	; 0xce6 <PORTA_set_pin_dir>
}
     f32:	00 00       	nop
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	1f 92       	push	r1
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
     f48:	69 81       	ldd	r22, Y+1	; 0x01
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <PORTA_set_pin_level>
}
     f50:	00 00       	nop
     f52:	0f 90       	pop	r0
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	1f 92       	push	r1
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
     f66:	69 81       	ldd	r22, Y+1	; 0x01
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	0e 94 01 07 	call	0xe02	; 0xe02 <PORTD_set_pin_dir>
}
     f6e:	00 00       	nop
     f70:	0f 90       	pop	r0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	1f 92       	push	r1
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     f84:	69 81       	ldd	r22, Y+1	; 0x01
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	0e 94 55 07 	call	0xeaa	; 0xeaa <PORTD_set_pin_level>
}
     f8c:	00 00       	nop
     f8e:	0f 90       	pop	r0
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	1f 92       	push	r1
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
     fa2:	69 81       	ldd	r22, Y+1	; 0x01
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	0e 94 01 07 	call	0xe02	; 0xe02 <PORTD_set_pin_dir>
}
     faa:	00 00       	nop
     fac:	0f 90       	pop	r0
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	1f 92       	push	r1
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     fc0:	69 81       	ldd	r22, Y+1	; 0x01
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	0e 94 55 07 	call	0xeaa	; 0xeaa <PORTD_set_pin_level>
}
     fc8:	00 00       	nop
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	1f 92       	push	r1
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
     fde:	69 81       	ldd	r22, Y+1	; 0x01
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	0e 94 01 07 	call	0xe02	; 0xe02 <PORTD_set_pin_dir>
}
     fe6:	00 00       	nop
     fe8:	0f 90       	pop	r0
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	08 95       	ret

00000ff0 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	1f 92       	push	r1
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     ffc:	69 81       	ldd	r22, Y+1	; 0x01
     ffe:	82 e0       	ldi	r24, 0x02	; 2
    1000:	0e 94 55 07 	call	0xeaa	; 0xeaa <PORTD_set_pin_level>
}
    1004:	00 00       	nop
    1006:	0f 90       	pop	r0
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	26 97       	sbiw	r28, 0x06	; 6
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    101c:	19 82       	std	Y+1, r1	; 0x01
    101e:	12 c0       	rjmp	.+36     	; 0x1044 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	88 2f       	mov	r24, r24
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	80 5f       	subi	r24, 0xF0	; 240
    1028:	9b 4f       	sbci	r25, 0xFB	; 251
    102a:	29 81       	ldd	r18, Y+1	; 0x01
    102c:	22 2f       	mov	r18, r18
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	20 5f       	subi	r18, 0xF0	; 240
    1032:	3b 4f       	sbci	r19, 0xFB	; 251
    1034:	f9 01       	movw	r30, r18
    1036:	20 81       	ld	r18, Z
    1038:	28 60       	ori	r18, 0x08	; 8
    103a:	fc 01       	movw	r30, r24
    103c:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	8f 5f       	subi	r24, 0xFF	; 255
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	88 30       	cpi	r24, 0x08	; 8
    1048:	58 f3       	brcs	.-42     	; 0x1020 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    104a:	1a 82       	std	Y+2, r1	; 0x02
    104c:	12 c0       	rjmp	.+36     	; 0x1072 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	80 5d       	subi	r24, 0xD0	; 208
    1056:	9b 4f       	sbci	r25, 0xFB	; 251
    1058:	2a 81       	ldd	r18, Y+2	; 0x02
    105a:	22 2f       	mov	r18, r18
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	20 5d       	subi	r18, 0xD0	; 208
    1060:	3b 4f       	sbci	r19, 0xFB	; 251
    1062:	f9 01       	movw	r30, r18
    1064:	20 81       	ld	r18, Z
    1066:	28 60       	ori	r18, 0x08	; 8
    1068:	fc 01       	movw	r30, r24
    106a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	8a 83       	std	Y+2, r24	; 0x02
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	88 30       	cpi	r24, 0x08	; 8
    1076:	58 f3       	brcs	.-42     	; 0x104e <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1078:	1b 82       	std	Y+3, r1	; 0x03
    107a:	12 c0       	rjmp	.+36     	; 0x10a0 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	80 5b       	subi	r24, 0xB0	; 176
    1084:	9b 4f       	sbci	r25, 0xFB	; 251
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	22 2f       	mov	r18, r18
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	20 5b       	subi	r18, 0xB0	; 176
    108e:	3b 4f       	sbci	r19, 0xFB	; 251
    1090:	f9 01       	movw	r30, r18
    1092:	20 81       	ld	r18, Z
    1094:	28 60       	ori	r18, 0x08	; 8
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	8b 83       	std	Y+3, r24	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	88 30       	cpi	r24, 0x08	; 8
    10a4:	58 f3       	brcs	.-42     	; 0x107c <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    10a6:	1c 82       	std	Y+4, r1	; 0x04
    10a8:	12 c0       	rjmp	.+36     	; 0x10ce <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	80 59       	subi	r24, 0x90	; 144
    10b2:	9b 4f       	sbci	r25, 0xFB	; 251
    10b4:	2c 81       	ldd	r18, Y+4	; 0x04
    10b6:	22 2f       	mov	r18, r18
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	20 59       	subi	r18, 0x90	; 144
    10bc:	3b 4f       	sbci	r19, 0xFB	; 251
    10be:	f9 01       	movw	r30, r18
    10c0:	20 81       	ld	r18, Z
    10c2:	28 60       	ori	r18, 0x08	; 8
    10c4:	fc 01       	movw	r30, r24
    10c6:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	8f 5f       	subi	r24, 0xFF	; 255
    10cc:	8c 83       	std	Y+4, r24	; 0x04
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	88 30       	cpi	r24, 0x08	; 8
    10d2:	58 f3       	brcs	.-42     	; 0x10aa <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    10d4:	1d 82       	std	Y+5, r1	; 0x05
    10d6:	12 c0       	rjmp	.+36     	; 0x10fc <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    10d8:	8d 81       	ldd	r24, Y+5	; 0x05
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	80 57       	subi	r24, 0x70	; 112
    10e0:	9b 4f       	sbci	r25, 0xFB	; 251
    10e2:	2d 81       	ldd	r18, Y+5	; 0x05
    10e4:	22 2f       	mov	r18, r18
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	20 57       	subi	r18, 0x70	; 112
    10ea:	3b 4f       	sbci	r19, 0xFB	; 251
    10ec:	f9 01       	movw	r30, r18
    10ee:	20 81       	ld	r18, Z
    10f0:	28 60       	ori	r18, 0x08	; 8
    10f2:	fc 01       	movw	r30, r24
    10f4:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	8f 5f       	subi	r24, 0xFF	; 255
    10fa:	8d 83       	std	Y+5, r24	; 0x05
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	88 30       	cpi	r24, 0x08	; 8
    1100:	58 f3       	brcs	.-42     	; 0x10d8 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1102:	1e 82       	std	Y+6, r1	; 0x06
    1104:	12 c0       	rjmp	.+36     	; 0x112a <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1106:	8e 81       	ldd	r24, Y+6	; 0x06
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	80 55       	subi	r24, 0x50	; 80
    110e:	9b 4f       	sbci	r25, 0xFB	; 251
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	22 2f       	mov	r18, r18
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	20 55       	subi	r18, 0x50	; 80
    1118:	3b 4f       	sbci	r19, 0xFB	; 251
    111a:	f9 01       	movw	r30, r18
    111c:	20 81       	ld	r18, Z
    111e:	28 60       	ori	r18, 0x08	; 8
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	8e 83       	std	Y+6, r24	; 0x06
    112a:	8e 81       	ldd	r24, Y+6	; 0x06
    112c:	88 30       	cpi	r24, 0x08	; 8
    112e:	58 f3       	brcs	.-42     	; 0x1106 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    1130:	00 00       	nop
    1132:	26 96       	adiw	r28, 0x06	; 6
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    1146:	0e 94 07 08 	call	0x100e	; 0x100e <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 8f 07 	call	0xf1e	; 0xf1e <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	0e 94 bc 07 	call	0xf78	; 0xf78 <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	0e 94 da 07 	call	0xfb4	; 0xfb4 <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	0e 94 cb 07 	call	0xf96	; 0xf96 <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 f8 07 	call	0xff0	; 0xff0 <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <B0_MCU_set_dir>

	CLKCTRL_init();
    117a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <CLKCTRL_init>

	CPUINT_init();
    117e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CPUINT_init>

	SLPCTRL_init();
    1182:	0e 94 c9 08 	call	0x1192	; 0x1192 <SLPCTRL_init>

	BOD_init();
    1186:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <BOD_init>
}
    118a:	00 00       	nop
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    119a:	80 e0       	ldi	r24, 0x00	; 0
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <__cmpsf2>:
    11a2:	0e 94 42 09 	call	0x1284	; 0x1284 <__fp_cmp>
    11a6:	08 f4       	brcc	.+2      	; 0x11aa <__cmpsf2+0x8>
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	08 95       	ret

000011ac <__fixunssfsi>:
    11ac:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_splitA>
    11b0:	88 f0       	brcs	.+34     	; 0x11d4 <__fixunssfsi+0x28>
    11b2:	9f 57       	subi	r25, 0x7F	; 127
    11b4:	98 f0       	brcs	.+38     	; 0x11dc <__fixunssfsi+0x30>
    11b6:	b9 2f       	mov	r27, r25
    11b8:	99 27       	eor	r25, r25
    11ba:	b7 51       	subi	r27, 0x17	; 23
    11bc:	b0 f0       	brcs	.+44     	; 0x11ea <__fixunssfsi+0x3e>
    11be:	e1 f0       	breq	.+56     	; 0x11f8 <__fixunssfsi+0x4c>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	1a f0       	brmi	.+6      	; 0x11d0 <__fixunssfsi+0x24>
    11ca:	ba 95       	dec	r27
    11cc:	c9 f7       	brne	.-14     	; 0x11c0 <__fixunssfsi+0x14>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <__fixunssfsi+0x4c>
    11d0:	b1 30       	cpi	r27, 0x01	; 1
    11d2:	91 f0       	breq	.+36     	; 0x11f8 <__fixunssfsi+0x4c>
    11d4:	0e 94 88 09 	call	0x1310	; 0x1310 <__fp_zero>
    11d8:	b1 e0       	ldi	r27, 0x01	; 1
    11da:	08 95       	ret
    11dc:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__fp_zero>
    11e0:	67 2f       	mov	r22, r23
    11e2:	78 2f       	mov	r23, r24
    11e4:	88 27       	eor	r24, r24
    11e6:	b8 5f       	subi	r27, 0xF8	; 248
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <__fixunssfsi+0x4c>
    11ea:	b9 3f       	cpi	r27, 0xF9	; 249
    11ec:	cc f3       	brlt	.-14     	; 0x11e0 <__fixunssfsi+0x34>
    11ee:	86 95       	lsr	r24
    11f0:	77 95       	ror	r23
    11f2:	67 95       	ror	r22
    11f4:	b3 95       	inc	r27
    11f6:	d9 f7       	brne	.-10     	; 0x11ee <__fixunssfsi+0x42>
    11f8:	3e f4       	brtc	.+14     	; 0x1208 <__fixunssfsi+0x5c>
    11fa:	90 95       	com	r25
    11fc:	80 95       	com	r24
    11fe:	70 95       	com	r23
    1200:	61 95       	neg	r22
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	08 95       	ret

0000120a <__floatunsisf>:
    120a:	e8 94       	clt
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <__floatsisf+0x12>

0000120e <__floatsisf>:
    120e:	97 fb       	bst	r25, 7
    1210:	3e f4       	brtc	.+14     	; 0x1220 <__floatsisf+0x12>
    1212:	90 95       	com	r25
    1214:	80 95       	com	r24
    1216:	70 95       	com	r23
    1218:	61 95       	neg	r22
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	8f 4f       	sbci	r24, 0xFF	; 255
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	99 23       	and	r25, r25
    1222:	a9 f0       	breq	.+42     	; 0x124e <__floatsisf+0x40>
    1224:	f9 2f       	mov	r31, r25
    1226:	96 e9       	ldi	r25, 0x96	; 150
    1228:	bb 27       	eor	r27, r27
    122a:	93 95       	inc	r25
    122c:	f6 95       	lsr	r31
    122e:	87 95       	ror	r24
    1230:	77 95       	ror	r23
    1232:	67 95       	ror	r22
    1234:	b7 95       	ror	r27
    1236:	f1 11       	cpse	r31, r1
    1238:	f8 cf       	rjmp	.-16     	; 0x122a <__floatsisf+0x1c>
    123a:	fa f4       	brpl	.+62     	; 0x127a <__floatsisf+0x6c>
    123c:	bb 0f       	add	r27, r27
    123e:	11 f4       	brne	.+4      	; 0x1244 <__floatsisf+0x36>
    1240:	60 ff       	sbrs	r22, 0
    1242:	1b c0       	rjmp	.+54     	; 0x127a <__floatsisf+0x6c>
    1244:	6f 5f       	subi	r22, 0xFF	; 255
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	16 c0       	rjmp	.+44     	; 0x127a <__floatsisf+0x6c>
    124e:	88 23       	and	r24, r24
    1250:	11 f0       	breq	.+4      	; 0x1256 <__floatsisf+0x48>
    1252:	96 e9       	ldi	r25, 0x96	; 150
    1254:	11 c0       	rjmp	.+34     	; 0x1278 <__floatsisf+0x6a>
    1256:	77 23       	and	r23, r23
    1258:	21 f0       	breq	.+8      	; 0x1262 <__floatsisf+0x54>
    125a:	9e e8       	ldi	r25, 0x8E	; 142
    125c:	87 2f       	mov	r24, r23
    125e:	76 2f       	mov	r23, r22
    1260:	05 c0       	rjmp	.+10     	; 0x126c <__floatsisf+0x5e>
    1262:	66 23       	and	r22, r22
    1264:	71 f0       	breq	.+28     	; 0x1282 <__floatsisf+0x74>
    1266:	96 e8       	ldi	r25, 0x86	; 134
    1268:	86 2f       	mov	r24, r22
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	2a f0       	brmi	.+10     	; 0x127a <__floatsisf+0x6c>
    1270:	9a 95       	dec	r25
    1272:	66 0f       	add	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	da f7       	brpl	.-10     	; 0x1270 <__floatsisf+0x62>
    127a:	88 0f       	add	r24, r24
    127c:	96 95       	lsr	r25
    127e:	87 95       	ror	r24
    1280:	97 f9       	bld	r25, 7
    1282:	08 95       	ret

00001284 <__fp_cmp>:
    1284:	99 0f       	add	r25, r25
    1286:	00 08       	sbc	r0, r0
    1288:	55 0f       	add	r21, r21
    128a:	aa 0b       	sbc	r26, r26
    128c:	e0 e8       	ldi	r30, 0x80	; 128
    128e:	fe ef       	ldi	r31, 0xFE	; 254
    1290:	16 16       	cp	r1, r22
    1292:	17 06       	cpc	r1, r23
    1294:	e8 07       	cpc	r30, r24
    1296:	f9 07       	cpc	r31, r25
    1298:	c0 f0       	brcs	.+48     	; 0x12ca <__fp_cmp+0x46>
    129a:	12 16       	cp	r1, r18
    129c:	13 06       	cpc	r1, r19
    129e:	e4 07       	cpc	r30, r20
    12a0:	f5 07       	cpc	r31, r21
    12a2:	98 f0       	brcs	.+38     	; 0x12ca <__fp_cmp+0x46>
    12a4:	62 1b       	sub	r22, r18
    12a6:	73 0b       	sbc	r23, r19
    12a8:	84 0b       	sbc	r24, r20
    12aa:	95 0b       	sbc	r25, r21
    12ac:	39 f4       	brne	.+14     	; 0x12bc <__fp_cmp+0x38>
    12ae:	0a 26       	eor	r0, r26
    12b0:	61 f0       	breq	.+24     	; 0x12ca <__fp_cmp+0x46>
    12b2:	23 2b       	or	r18, r19
    12b4:	24 2b       	or	r18, r20
    12b6:	25 2b       	or	r18, r21
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <__fp_cmp+0x3e>
    12ba:	08 95       	ret
    12bc:	0a 26       	eor	r0, r26
    12be:	09 f4       	brne	.+2      	; 0x12c2 <__fp_cmp+0x3e>
    12c0:	a1 40       	sbci	r26, 0x01	; 1
    12c2:	a6 95       	lsr	r26
    12c4:	8f ef       	ldi	r24, 0xFF	; 255
    12c6:	81 1d       	adc	r24, r1
    12c8:	81 1d       	adc	r24, r1
    12ca:	08 95       	ret

000012cc <__fp_split3>:
    12cc:	57 fd       	sbrc	r21, 7
    12ce:	90 58       	subi	r25, 0x80	; 128
    12d0:	44 0f       	add	r20, r20
    12d2:	55 1f       	adc	r21, r21
    12d4:	59 f0       	breq	.+22     	; 0x12ec <__fp_splitA+0x10>
    12d6:	5f 3f       	cpi	r21, 0xFF	; 255
    12d8:	71 f0       	breq	.+28     	; 0x12f6 <__fp_splitA+0x1a>
    12da:	47 95       	ror	r20

000012dc <__fp_splitA>:
    12dc:	88 0f       	add	r24, r24
    12de:	97 fb       	bst	r25, 7
    12e0:	99 1f       	adc	r25, r25
    12e2:	61 f0       	breq	.+24     	; 0x12fc <__fp_splitA+0x20>
    12e4:	9f 3f       	cpi	r25, 0xFF	; 255
    12e6:	79 f0       	breq	.+30     	; 0x1306 <__fp_splitA+0x2a>
    12e8:	87 95       	ror	r24
    12ea:	08 95       	ret
    12ec:	12 16       	cp	r1, r18
    12ee:	13 06       	cpc	r1, r19
    12f0:	14 06       	cpc	r1, r20
    12f2:	55 1f       	adc	r21, r21
    12f4:	f2 cf       	rjmp	.-28     	; 0x12da <__fp_split3+0xe>
    12f6:	46 95       	lsr	r20
    12f8:	f1 df       	rcall	.-30     	; 0x12dc <__fp_splitA>
    12fa:	08 c0       	rjmp	.+16     	; 0x130c <__fp_splitA+0x30>
    12fc:	16 16       	cp	r1, r22
    12fe:	17 06       	cpc	r1, r23
    1300:	18 06       	cpc	r1, r24
    1302:	99 1f       	adc	r25, r25
    1304:	f1 cf       	rjmp	.-30     	; 0x12e8 <__fp_splitA+0xc>
    1306:	86 95       	lsr	r24
    1308:	71 05       	cpc	r23, r1
    130a:	61 05       	cpc	r22, r1
    130c:	08 94       	sec
    130e:	08 95       	ret

00001310 <__fp_zero>:
    1310:	e8 94       	clt

00001312 <__fp_szero>:
    1312:	bb 27       	eor	r27, r27
    1314:	66 27       	eor	r22, r22
    1316:	77 27       	eor	r23, r23
    1318:	cb 01       	movw	r24, r22
    131a:	97 f9       	bld	r25, 7
    131c:	08 95       	ret

0000131e <__gesf2>:
    131e:	0e 94 42 09 	call	0x1284	; 0x1284 <__fp_cmp>
    1322:	08 f4       	brcc	.+2      	; 0x1326 <__gesf2+0x8>
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	08 95       	ret

00001328 <__mulsf3>:
    1328:	0e 94 a7 09 	call	0x134e	; 0x134e <__mulsf3x>
    132c:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__fp_round>
    1330:	0e 94 0a 0a 	call	0x1414	; 0x1414 <__fp_pscA>
    1334:	38 f0       	brcs	.+14     	; 0x1344 <__mulsf3+0x1c>
    1336:	0e 94 11 0a 	call	0x1422	; 0x1422 <__fp_pscB>
    133a:	20 f0       	brcs	.+8      	; 0x1344 <__mulsf3+0x1c>
    133c:	95 23       	and	r25, r21
    133e:	11 f0       	breq	.+4      	; 0x1344 <__mulsf3+0x1c>
    1340:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_inf>
    1344:	0c 94 07 0a 	jmp	0x140e	; 0x140e <__fp_nan>
    1348:	11 24       	eor	r1, r1
    134a:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_szero>

0000134e <__mulsf3x>:
    134e:	0e 94 66 09 	call	0x12cc	; 0x12cc <__fp_split3>
    1352:	70 f3       	brcs	.-36     	; 0x1330 <__mulsf3+0x8>

00001354 <__mulsf3_pse>:
    1354:	95 9f       	mul	r25, r21
    1356:	c1 f3       	breq	.-16     	; 0x1348 <__mulsf3+0x20>
    1358:	95 0f       	add	r25, r21
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	55 1f       	adc	r21, r21
    135e:	62 9f       	mul	r22, r18
    1360:	f0 01       	movw	r30, r0
    1362:	72 9f       	mul	r23, r18
    1364:	bb 27       	eor	r27, r27
    1366:	f0 0d       	add	r31, r0
    1368:	b1 1d       	adc	r27, r1
    136a:	63 9f       	mul	r22, r19
    136c:	aa 27       	eor	r26, r26
    136e:	f0 0d       	add	r31, r0
    1370:	b1 1d       	adc	r27, r1
    1372:	aa 1f       	adc	r26, r26
    1374:	64 9f       	mul	r22, r20
    1376:	66 27       	eor	r22, r22
    1378:	b0 0d       	add	r27, r0
    137a:	a1 1d       	adc	r26, r1
    137c:	66 1f       	adc	r22, r22
    137e:	82 9f       	mul	r24, r18
    1380:	22 27       	eor	r18, r18
    1382:	b0 0d       	add	r27, r0
    1384:	a1 1d       	adc	r26, r1
    1386:	62 1f       	adc	r22, r18
    1388:	73 9f       	mul	r23, r19
    138a:	b0 0d       	add	r27, r0
    138c:	a1 1d       	adc	r26, r1
    138e:	62 1f       	adc	r22, r18
    1390:	83 9f       	mul	r24, r19
    1392:	a0 0d       	add	r26, r0
    1394:	61 1d       	adc	r22, r1
    1396:	22 1f       	adc	r18, r18
    1398:	74 9f       	mul	r23, r20
    139a:	33 27       	eor	r19, r19
    139c:	a0 0d       	add	r26, r0
    139e:	61 1d       	adc	r22, r1
    13a0:	23 1f       	adc	r18, r19
    13a2:	84 9f       	mul	r24, r20
    13a4:	60 0d       	add	r22, r0
    13a6:	21 1d       	adc	r18, r1
    13a8:	82 2f       	mov	r24, r18
    13aa:	76 2f       	mov	r23, r22
    13ac:	6a 2f       	mov	r22, r26
    13ae:	11 24       	eor	r1, r1
    13b0:	9f 57       	subi	r25, 0x7F	; 127
    13b2:	50 40       	sbci	r21, 0x00	; 0
    13b4:	9a f0       	brmi	.+38     	; 0x13dc <__mulsf3_pse+0x88>
    13b6:	f1 f0       	breq	.+60     	; 0x13f4 <__mulsf3_pse+0xa0>
    13b8:	88 23       	and	r24, r24
    13ba:	4a f0       	brmi	.+18     	; 0x13ce <__mulsf3_pse+0x7a>
    13bc:	ee 0f       	add	r30, r30
    13be:	ff 1f       	adc	r31, r31
    13c0:	bb 1f       	adc	r27, r27
    13c2:	66 1f       	adc	r22, r22
    13c4:	77 1f       	adc	r23, r23
    13c6:	88 1f       	adc	r24, r24
    13c8:	91 50       	subi	r25, 0x01	; 1
    13ca:	50 40       	sbci	r21, 0x00	; 0
    13cc:	a9 f7       	brne	.-22     	; 0x13b8 <__mulsf3_pse+0x64>
    13ce:	9e 3f       	cpi	r25, 0xFE	; 254
    13d0:	51 05       	cpc	r21, r1
    13d2:	80 f0       	brcs	.+32     	; 0x13f4 <__mulsf3_pse+0xa0>
    13d4:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <__fp_inf>
    13d8:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_szero>
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	e4 f3       	brlt	.-8      	; 0x13d8 <__mulsf3_pse+0x84>
    13e0:	98 3e       	cpi	r25, 0xE8	; 232
    13e2:	d4 f3       	brlt	.-12     	; 0x13d8 <__mulsf3_pse+0x84>
    13e4:	86 95       	lsr	r24
    13e6:	77 95       	ror	r23
    13e8:	67 95       	ror	r22
    13ea:	b7 95       	ror	r27
    13ec:	f7 95       	ror	r31
    13ee:	e7 95       	ror	r30
    13f0:	9f 5f       	subi	r25, 0xFF	; 255
    13f2:	c1 f7       	brne	.-16     	; 0x13e4 <__mulsf3_pse+0x90>
    13f4:	fe 2b       	or	r31, r30
    13f6:	88 0f       	add	r24, r24
    13f8:	91 1d       	adc	r25, r1
    13fa:	96 95       	lsr	r25
    13fc:	87 95       	ror	r24
    13fe:	97 f9       	bld	r25, 7
    1400:	08 95       	ret

00001402 <__fp_inf>:
    1402:	97 f9       	bld	r25, 7
    1404:	9f 67       	ori	r25, 0x7F	; 127
    1406:	80 e8       	ldi	r24, 0x80	; 128
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	08 95       	ret

0000140e <__fp_nan>:
    140e:	9f ef       	ldi	r25, 0xFF	; 255
    1410:	80 ec       	ldi	r24, 0xC0	; 192
    1412:	08 95       	ret

00001414 <__fp_pscA>:
    1414:	00 24       	eor	r0, r0
    1416:	0a 94       	dec	r0
    1418:	16 16       	cp	r1, r22
    141a:	17 06       	cpc	r1, r23
    141c:	18 06       	cpc	r1, r24
    141e:	09 06       	cpc	r0, r25
    1420:	08 95       	ret

00001422 <__fp_pscB>:
    1422:	00 24       	eor	r0, r0
    1424:	0a 94       	dec	r0
    1426:	12 16       	cp	r1, r18
    1428:	13 06       	cpc	r1, r19
    142a:	14 06       	cpc	r1, r20
    142c:	05 06       	cpc	r0, r21
    142e:	08 95       	ret

00001430 <__fp_round>:
    1430:	09 2e       	mov	r0, r25
    1432:	03 94       	inc	r0
    1434:	00 0c       	add	r0, r0
    1436:	11 f4       	brne	.+4      	; 0x143c <__fp_round+0xc>
    1438:	88 23       	and	r24, r24
    143a:	52 f0       	brmi	.+20     	; 0x1450 <__fp_round+0x20>
    143c:	bb 0f       	add	r27, r27
    143e:	40 f4       	brcc	.+16     	; 0x1450 <__fp_round+0x20>
    1440:	bf 2b       	or	r27, r31
    1442:	11 f4       	brne	.+4      	; 0x1448 <__fp_round+0x18>
    1444:	60 ff       	sbrs	r22, 0
    1446:	04 c0       	rjmp	.+8      	; 0x1450 <__fp_round+0x20>
    1448:	6f 5f       	subi	r22, 0xFF	; 255
    144a:	7f 4f       	sbci	r23, 0xFF	; 255
    144c:	8f 4f       	sbci	r24, 0xFF	; 255
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	08 95       	ret

00001452 <_exit>:
    1452:	f8 94       	cli

00001454 <__stop_program>:
    1454:	ff cf       	rjmp	.-2      	; 0x1454 <__stop_program>
