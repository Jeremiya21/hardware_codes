
My_Project_J13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000302e  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002667  00000000  00000000  000033a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000907  00000000  00000000  00005a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00006310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001336  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016c  00000000  00000000  00007786  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000078f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 57 00 	call	0xae	; 0xae <main>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 b8 00 	call	0x170	; 0x170 <system_init>
  ac:	08 95       	ret

000000ae <main>:
#include <atmel_start.h>
#include "My_Function.h"
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  ae:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		bool d = log_ic_level();
  b2:	0e 94 5c 00 	call	0xb8	; 0xb8 <log_ic_level>
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0x4>

000000b8 <log_ic_level>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
  b8:	80 b1       	in	r24, 0x00	; 0
  ba:	8b 7f       	andi	r24, 0xFB	; 251
  bc:	80 b9       	out	0x00, r24	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
  be:	e2 e1       	ldi	r30, 0x12	; 18
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	80 81       	ld	r24, Z
  c4:	88 60       	ori	r24, 0x08	; 8
  c6:	80 83       	st	Z, r24
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
	return VPORTA.IN & (1 << pin);
  c8:	82 b1       	in	r24, 0x02	; 2
	PA_2_set_dir(PORT_DIR_IN);
	PA_2_set_pull_mode(PORT_PULL_UP);
    c = PA_2_get_level();
	return c;
	
  ca:	82 fb       	bst	r24, 2
  cc:	88 27       	eor	r24, r24
  ce:	80 f9       	bld	r24, 0
  d0:	08 95       	ret

000000d2 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret

000000d6 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret

000000da <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret

000000de <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 c0       	rjmp	.+16     	; 0xf2 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  e2:	e8 2f       	mov	r30, r24
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	e0 5f       	subi	r30, 0xF0	; 240
  e8:	fb 4f       	sbci	r31, 0xFB	; 251
  ea:	90 81       	ld	r25, Z
  ec:	98 60       	ori	r25, 0x08	; 8
  ee:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	b0 f3       	brcs	.-20     	; 0xe2 <mcu_init+0x4>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 c0       	rjmp	.+16     	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  fa:	e8 2f       	mov	r30, r24
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	e0 5d       	subi	r30, 0xD0	; 208
 100:	fb 4f       	sbci	r31, 0xFB	; 251
 102:	90 81       	ld	r25, Z
 104:	98 60       	ori	r25, 0x08	; 8
 106:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	b0 f3       	brcs	.-20     	; 0xfa <mcu_init+0x1c>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 c0       	rjmp	.+16     	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 112:	e8 2f       	mov	r30, r24
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	e0 5b       	subi	r30, 0xB0	; 176
 118:	fb 4f       	sbci	r31, 0xFB	; 251
 11a:	90 81       	ld	r25, Z
 11c:	98 60       	ori	r25, 0x08	; 8
 11e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	b0 f3       	brcs	.-20     	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 c0       	rjmp	.+16     	; 0x13a <__EEPROM_REGION_LENGTH__+0x3a>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 12a:	e8 2f       	mov	r30, r24
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e0 59       	subi	r30, 0x90	; 144
 130:	fb 4f       	sbci	r31, 0xFB	; 251
 132:	90 81       	ld	r25, Z
 134:	98 60       	ori	r25, 0x08	; 8
 136:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	b0 f3       	brcs	.-20     	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	08 c0       	rjmp	.+16     	; 0x152 <__EEPROM_REGION_LENGTH__+0x52>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 142:	e8 2f       	mov	r30, r24
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	e0 57       	subi	r30, 0x70	; 112
 148:	fb 4f       	sbci	r31, 0xFB	; 251
 14a:	90 81       	ld	r25, Z
 14c:	98 60       	ori	r25, 0x08	; 8
 14e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	b0 f3       	brcs	.-20     	; 0x142 <__EEPROM_REGION_LENGTH__+0x42>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 c0       	rjmp	.+16     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 15a:	e8 2f       	mov	r30, r24
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e0 55       	subi	r30, 0x50	; 80
 160:	fb 4f       	sbci	r31, 0xFB	; 251
 162:	90 81       	ld	r25, Z
 164:	98 60       	ori	r25, 0x08	; 8
 166:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	b0 f3       	brcs	.-20     	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 16e:	08 95       	ret

00000170 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 170:	0e 94 6f 00 	call	0xde	; 0xde <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 174:	80 b1       	in	r24, 0x00	; 0
 176:	8b 7f       	andi	r24, 0xFB	; 251
 178:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 17a:	e2 e1       	ldi	r30, 0x12	; 18
 17c:	f4 e0       	ldi	r31, 0x04	; 4
 17e:	80 81       	ld	r24, Z
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	80 83       	st	Z, r24
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	CLKCTRL_init();
 184:	0e 94 6b 00 	call	0xd6	; 0xd6 <CLKCTRL_init>

	CPUINT_init();
 188:	0e 94 6d 00 	call	0xda	; 0xda <CPUINT_init>

	SLPCTRL_init();
 18c:	0e 94 cb 00 	call	0x196	; 0x196 <SLPCTRL_init>

	BOD_init();
 190:	0e 94 69 00 	call	0xd2	; 0xd2 <BOD_init>
 194:	08 95       	ret

00000196 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
