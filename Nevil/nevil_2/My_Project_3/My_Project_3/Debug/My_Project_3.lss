
My_Project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000011ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030d0  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000263d  00000000  00000000  0000448c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e2e  00000000  00000000  00006ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000408  00000000  00000000  000078f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013c2  00000000  00000000  00007d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000075c  00000000  00000000  000090c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  0000981e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
      a0:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <_exit>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
      b0:	0e 94 0a 03 	call	0x614	; 0x614 <system_init>
}
      b4:	00 00       	nop
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	08 95       	ret

000000bc <main>:
#include <atmel_start.h>
#include "toggle_rgb.h"

int main(void)
{
      bc:	ef 92       	push	r14
      be:	ff 92       	push	r15
      c0:	0f 93       	push	r16
      c2:	1f 93       	push	r17
      c4:	cf 93       	push	r28
      c6:	df 93       	push	r29
      c8:	cd b7       	in	r28, 0x3d	; 61
      ca:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      cc:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		led_ON(100,0,0);
      d0:	e1 2c       	mov	r14, r1
      d2:	f1 2c       	mov	r15, r1
      d4:	87 01       	movw	r16, r14
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	a9 01       	movw	r20, r18
      dc:	64 e6       	ldi	r22, 0x64	; 100
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 a3 03 	call	0x746	; 0x746 <led_ON>
		//_delay_ms(500);
		led_ON(0,100,0);
      e8:	e1 2c       	mov	r14, r1
      ea:	f1 2c       	mov	r15, r1
      ec:	87 01       	movw	r16, r14
      ee:	24 e6       	ldi	r18, 0x64	; 100
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	cb 01       	movw	r24, r22
      fc:	0e 94 a3 03 	call	0x746	; 0x746 <led_ON>
		//_delay_ms(500);
		led_ON(0,0,100);
     100:	14 e6       	ldi	r17, 0x64	; 100
     102:	e1 2e       	mov	r14, r17
     104:	f1 2c       	mov	r15, r1
     106:	00 e0       	ldi	r16, 0x00	; 0
     108:	10 e0       	ldi	r17, 0x00	; 0
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	a9 01       	movw	r20, r18
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	cb 01       	movw	r24, r22
     116:	0e 94 a3 03 	call	0x746	; 0x746 <led_ON>
		//_delay_ms(500);
		led_ON(0,100,100);
     11a:	14 e6       	ldi	r17, 0x64	; 100
     11c:	e1 2e       	mov	r14, r17
     11e:	f1 2c       	mov	r15, r1
     120:	00 e0       	ldi	r16, 0x00	; 0
     122:	10 e0       	ldi	r17, 0x00	; 0
     124:	24 e6       	ldi	r18, 0x64	; 100
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	50 e0       	ldi	r21, 0x00	; 0
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	cb 01       	movw	r24, r22
     132:	0e 94 a3 03 	call	0x746	; 0x746 <led_ON>
		//_delay_ms(500);
		led_ON(100,0,100);
     136:	14 e6       	ldi	r17, 0x64	; 100
     138:	e1 2e       	mov	r14, r17
     13a:	f1 2c       	mov	r15, r1
     13c:	00 e0       	ldi	r16, 0x00	; 0
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	a9 01       	movw	r20, r18
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 a3 03 	call	0x746	; 0x746 <led_ON>
		//_delay_ms(500);
		led_ON(100,100,0);
     152:	e1 2c       	mov	r14, r1
     154:	f1 2c       	mov	r15, r1
     156:	87 01       	movw	r16, r14
     158:	24 e6       	ldi	r18, 0x64	; 100
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e0       	ldi	r20, 0x00	; 0
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	64 e6       	ldi	r22, 0x64	; 100
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 a3 03 	call	0x746	; 0x746 <led_ON>
		//_delay_ms(500);
 		led_ON(100,100,100);
     16c:	14 e6       	ldi	r17, 0x64	; 100
     16e:	e1 2e       	mov	r14, r17
     170:	f1 2c       	mov	r15, r1
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	10 e0       	ldi	r17, 0x00	; 0
     176:	24 e6       	ldi	r18, 0x64	; 100
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	40 e0       	ldi	r20, 0x00	; 0
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	64 e6       	ldi	r22, 0x64	; 100
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 a3 03 	call	0x746	; 0x746 <led_ON>
		//_delay_ms(500);
// 		
		
	}
     18a:	a2 cf       	rjmp	.-188    	; 0xd0 <main+0x14>

0000018c <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     194:	80 e0       	ldi	r24, 0x00	; 0
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     1a4:	80 e0       	ldi	r24, 0x00	; 0
}
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     1b4:	80 e0       	ldi	r24, 0x00	; 0
}
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	00 d0       	rcall	.+0      	; 0x1c2 <PORTA_set_pin_dir+0x6>
     1c2:	cd b7       	in	r28, 0x3d	; 61
     1c4:	de b7       	in	r29, 0x3e	; 62
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     1ca:	8a 81       	ldd	r24, Y+2	; 0x02
     1cc:	88 2f       	mov	r24, r24
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	91 05       	cpc	r25, r1
     1d4:	e1 f0       	breq	.+56     	; 0x20e <PORTA_set_pin_dir+0x52>
     1d6:	82 30       	cpi	r24, 0x02	; 2
     1d8:	91 05       	cpc	r25, r1
     1da:	71 f1       	breq	.+92     	; 0x238 <PORTA_set_pin_dir+0x7c>
     1dc:	89 2b       	or	r24, r25
     1de:	09 f0       	breq	.+2      	; 0x1e2 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     1e0:	3b c0       	rjmp	.+118    	; 0x258 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	fc 01       	movw	r30, r24
     1ec:	80 81       	ld	r24, Z
     1ee:	68 2f       	mov	r22, r24
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	48 2f       	mov	r20, r24
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <PORTA_set_pin_dir+0x44>
     1fc:	88 0f       	add	r24, r24
     1fe:	99 1f       	adc	r25, r25
     200:	4a 95       	dec	r20
     202:	e2 f7       	brpl	.-8      	; 0x1fc <PORTA_set_pin_dir+0x40>
     204:	80 95       	com	r24
     206:	86 23       	and	r24, r22
     208:	f9 01       	movw	r30, r18
     20a:	80 83       	st	Z, r24
		break;
     20c:	25 c0       	rjmp	.+74     	; 0x258 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	30 e0       	ldi	r19, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	fc 01       	movw	r30, r24
     218:	80 81       	ld	r24, Z
     21a:	68 2f       	mov	r22, r24
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	48 2f       	mov	r20, r24
     220:	50 e0       	ldi	r21, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <PORTA_set_pin_dir+0x70>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	4a 95       	dec	r20
     22e:	e2 f7       	brpl	.-8      	; 0x228 <PORTA_set_pin_dir+0x6c>
     230:	86 2b       	or	r24, r22
     232:	f9 01       	movw	r30, r18
     234:	80 83       	st	Z, r24
		break;
     236:	10 c0       	rjmp	.+32     	; 0x258 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	88 2f       	mov	r24, r24
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	80 5f       	subi	r24, 0xF0	; 240
     240:	9b 4f       	sbci	r25, 0xFB	; 251
     242:	29 81       	ldd	r18, Y+1	; 0x01
     244:	22 2f       	mov	r18, r18
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	20 5f       	subi	r18, 0xF0	; 240
     24a:	3b 4f       	sbci	r19, 0xFB	; 251
     24c:	f9 01       	movw	r30, r18
     24e:	20 81       	ld	r18, Z
     250:	28 60       	ori	r18, 0x08	; 8
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
		break;
     256:	00 00       	nop
	default:
		break;
	}
}
     258:	00 00       	nop
     25a:	0f 90       	pop	r0
     25c:	0f 90       	pop	r0
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	00 d0       	rcall	.+0      	; 0x26a <PORTA_set_pin_level+0x6>
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	89 83       	std	Y+1, r24	; 0x01
     270:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     272:	8a 81       	ldd	r24, Y+2	; 0x02
     274:	88 23       	and	r24, r24
     276:	a9 f0       	breq	.+42     	; 0x2a2 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	fc 01       	movw	r30, r24
     282:	81 81       	ldd	r24, Z+1	; 0x01
     284:	68 2f       	mov	r22, r24
     286:	89 81       	ldd	r24, Y+1	; 0x01
     288:	48 2f       	mov	r20, r24
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	02 c0       	rjmp	.+4      	; 0x296 <PORTA_set_pin_level+0x32>
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	4a 95       	dec	r20
     298:	e2 f7       	brpl	.-8      	; 0x292 <PORTA_set_pin_level+0x2e>
     29a:	86 2b       	or	r24, r22
     29c:	f9 01       	movw	r30, r18
     29e:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
     2a0:	15 c0       	rjmp	.+42     	; 0x2cc <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	fc 01       	movw	r30, r24
     2ac:	81 81       	ldd	r24, Z+1	; 0x01
     2ae:	68 2f       	mov	r22, r24
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	48 2f       	mov	r20, r24
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <PORTA_set_pin_level+0x5c>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	4a 95       	dec	r20
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <PORTA_set_pin_level+0x58>
     2c4:	80 95       	com	r24
     2c6:	86 23       	and	r24, r22
     2c8:	f9 01       	movw	r30, r18
     2ca:	81 83       	std	Z+1, r24	; 0x01
	}
}
     2cc:	00 00       	nop
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	00 d0       	rcall	.+0      	; 0x2de <PORTD_set_pin_dir+0x6>
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	89 83       	std	Y+1, r24	; 0x01
     2e4:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	88 2f       	mov	r24, r24
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	91 05       	cpc	r25, r1
     2f0:	e1 f0       	breq	.+56     	; 0x32a <PORTD_set_pin_dir+0x52>
     2f2:	82 30       	cpi	r24, 0x02	; 2
     2f4:	91 05       	cpc	r25, r1
     2f6:	71 f1       	breq	.+92     	; 0x354 <PORTD_set_pin_dir+0x7c>
     2f8:	89 2b       	or	r24, r25
     2fa:	09 f0       	breq	.+2      	; 0x2fe <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     2fc:	3b c0       	rjmp	.+118    	; 0x374 <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
     2fe:	8c e0       	ldi	r24, 0x0C	; 12
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	2c e0       	ldi	r18, 0x0C	; 12
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	f9 01       	movw	r30, r18
     308:	20 81       	ld	r18, Z
     30a:	62 2f       	mov	r22, r18
     30c:	29 81       	ldd	r18, Y+1	; 0x01
     30e:	42 2f       	mov	r20, r18
     310:	50 e0       	ldi	r21, 0x00	; 0
     312:	21 e0       	ldi	r18, 0x01	; 1
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <PORTD_set_pin_dir+0x44>
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	4a 95       	dec	r20
     31e:	e2 f7       	brpl	.-8      	; 0x318 <PORTD_set_pin_dir+0x40>
     320:	20 95       	com	r18
     322:	26 23       	and	r18, r22
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
		break;
     328:	25 c0       	rjmp	.+74     	; 0x374 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     32a:	8c e0       	ldi	r24, 0x0C	; 12
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	2c e0       	ldi	r18, 0x0C	; 12
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	f9 01       	movw	r30, r18
     334:	20 81       	ld	r18, Z
     336:	62 2f       	mov	r22, r18
     338:	29 81       	ldd	r18, Y+1	; 0x01
     33a:	42 2f       	mov	r20, r18
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	02 c0       	rjmp	.+4      	; 0x348 <PORTD_set_pin_dir+0x70>
     344:	22 0f       	add	r18, r18
     346:	33 1f       	adc	r19, r19
     348:	4a 95       	dec	r20
     34a:	e2 f7       	brpl	.-8      	; 0x344 <PORTD_set_pin_dir+0x6c>
     34c:	26 2b       	or	r18, r22
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
		break;
     352:	10 c0       	rjmp	.+32     	; 0x374 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	88 2f       	mov	r24, r24
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	80 59       	subi	r24, 0x90	; 144
     35c:	9b 4f       	sbci	r25, 0xFB	; 251
     35e:	29 81       	ldd	r18, Y+1	; 0x01
     360:	22 2f       	mov	r18, r18
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	20 59       	subi	r18, 0x90	; 144
     366:	3b 4f       	sbci	r19, 0xFB	; 251
     368:	f9 01       	movw	r30, r18
     36a:	20 81       	ld	r18, Z
     36c:	28 60       	ori	r18, 0x08	; 8
     36e:	fc 01       	movw	r30, r24
     370:	20 83       	st	Z, r18
		break;
     372:	00 00       	nop
	default:
		break;
	}
}
     374:	00 00       	nop
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <PORTD_set_pin_level+0x6>
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	89 83       	std	Y+1, r24	; 0x01
     38c:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	88 23       	and	r24, r24
     392:	a9 f0       	breq	.+42     	; 0x3be <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
     394:	8c e0       	ldi	r24, 0x0C	; 12
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	2c e0       	ldi	r18, 0x0C	; 12
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	f9 01       	movw	r30, r18
     39e:	21 81       	ldd	r18, Z+1	; 0x01
     3a0:	62 2f       	mov	r22, r18
     3a2:	29 81       	ldd	r18, Y+1	; 0x01
     3a4:	42 2f       	mov	r20, r18
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <PORTD_set_pin_level+0x32>
     3ae:	22 0f       	add	r18, r18
     3b0:	33 1f       	adc	r19, r19
     3b2:	4a 95       	dec	r20
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <PORTD_set_pin_level+0x2e>
     3b6:	26 2b       	or	r18, r22
     3b8:	fc 01       	movw	r30, r24
     3ba:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
     3bc:	15 c0       	rjmp	.+42     	; 0x3e8 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     3be:	8c e0       	ldi	r24, 0x0C	; 12
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	2c e0       	ldi	r18, 0x0C	; 12
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	21 81       	ldd	r18, Z+1	; 0x01
     3ca:	62 2f       	mov	r22, r18
     3cc:	29 81       	ldd	r18, Y+1	; 0x01
     3ce:	42 2f       	mov	r20, r18
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	21 e0       	ldi	r18, 0x01	; 1
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <PORTD_set_pin_level+0x5c>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	4a 95       	dec	r20
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <PORTD_set_pin_level+0x58>
     3e0:	20 95       	com	r18
     3e2:	26 23       	and	r18, r22
     3e4:	fc 01       	movw	r30, r24
     3e6:	21 83       	std	Z+1, r18	; 0x01
	}
}
     3e8:	00 00       	nop
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
     400:	69 81       	ldd	r22, Y+1	; 0x01
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	0e 94 de 00 	call	0x1bc	; 0x1bc <PORTA_set_pin_dir>
}
     408:	00 00       	nop
     40a:	0f 90       	pop	r0
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	1f 92       	push	r1
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
     41e:	69 81       	ldd	r22, Y+1	; 0x01
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	0e 94 32 01 	call	0x264	; 0x264 <PORTA_set_pin_level>
}
     426:	00 00       	nop
     428:	0f 90       	pop	r0
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	1f 92       	push	r1
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
     43c:	69 81       	ldd	r22, Y+1	; 0x01
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PORTD_set_pin_dir>
}
     444:	00 00       	nop
     446:	0f 90       	pop	r0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	1f 92       	push	r1
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     45a:	69 81       	ldd	r22, Y+1	; 0x01
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 c0 01 	call	0x380	; 0x380 <PORTD_set_pin_level>
}
     462:	00 00       	nop
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	1f 92       	push	r1
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
     478:	69 81       	ldd	r22, Y+1	; 0x01
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PORTD_set_pin_dir>
}
     480:	00 00       	nop
     482:	0f 90       	pop	r0
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	1f 92       	push	r1
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     496:	69 81       	ldd	r22, Y+1	; 0x01
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	0e 94 c0 01 	call	0x380	; 0x380 <PORTD_set_pin_level>
}
     49e:	00 00       	nop
     4a0:	0f 90       	pop	r0
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	1f 92       	push	r1
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
     4b4:	69 81       	ldd	r22, Y+1	; 0x01
     4b6:	82 e0       	ldi	r24, 0x02	; 2
     4b8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PORTD_set_pin_dir>
}
     4bc:	00 00       	nop
     4be:	0f 90       	pop	r0
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	1f 92       	push	r1
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     4d2:	69 81       	ldd	r22, Y+1	; 0x01
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	0e 94 c0 01 	call	0x380	; 0x380 <PORTD_set_pin_level>
}
     4da:	00 00       	nop
     4dc:	0f 90       	pop	r0
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	08 95       	ret

000004e4 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	26 97       	sbiw	r28, 0x06	; 6
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     4f2:	19 82       	std	Y+1, r1	; 0x01
     4f4:	12 c0       	rjmp	.+36     	; 0x51a <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	88 2f       	mov	r24, r24
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	80 5f       	subi	r24, 0xF0	; 240
     4fe:	9b 4f       	sbci	r25, 0xFB	; 251
     500:	29 81       	ldd	r18, Y+1	; 0x01
     502:	22 2f       	mov	r18, r18
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	20 5f       	subi	r18, 0xF0	; 240
     508:	3b 4f       	sbci	r19, 0xFB	; 251
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	28 60       	ori	r18, 0x08	; 8
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	8f 5f       	subi	r24, 0xFF	; 255
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	88 30       	cpi	r24, 0x08	; 8
     51e:	58 f3       	brcs	.-42     	; 0x4f6 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     520:	1a 82       	std	Y+2, r1	; 0x02
     522:	12 c0       	rjmp	.+36     	; 0x548 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     524:	8a 81       	ldd	r24, Y+2	; 0x02
     526:	88 2f       	mov	r24, r24
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	80 5d       	subi	r24, 0xD0	; 208
     52c:	9b 4f       	sbci	r25, 0xFB	; 251
     52e:	2a 81       	ldd	r18, Y+2	; 0x02
     530:	22 2f       	mov	r18, r18
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	20 5d       	subi	r18, 0xD0	; 208
     536:	3b 4f       	sbci	r19, 0xFB	; 251
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	28 60       	ori	r18, 0x08	; 8
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	8a 83       	std	Y+2, r24	; 0x02
     548:	8a 81       	ldd	r24, Y+2	; 0x02
     54a:	88 30       	cpi	r24, 0x08	; 8
     54c:	58 f3       	brcs	.-42     	; 0x524 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     54e:	1b 82       	std	Y+3, r1	; 0x03
     550:	12 c0       	rjmp	.+36     	; 0x576 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	88 2f       	mov	r24, r24
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	80 5b       	subi	r24, 0xB0	; 176
     55a:	9b 4f       	sbci	r25, 0xFB	; 251
     55c:	2b 81       	ldd	r18, Y+3	; 0x03
     55e:	22 2f       	mov	r18, r18
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	20 5b       	subi	r18, 0xB0	; 176
     564:	3b 4f       	sbci	r19, 0xFB	; 251
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	28 60       	ori	r18, 0x08	; 8
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     570:	8b 81       	ldd	r24, Y+3	; 0x03
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	8b 83       	std	Y+3, r24	; 0x03
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	88 30       	cpi	r24, 0x08	; 8
     57a:	58 f3       	brcs	.-42     	; 0x552 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     57c:	1c 82       	std	Y+4, r1	; 0x04
     57e:	12 c0       	rjmp	.+36     	; 0x5a4 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     580:	8c 81       	ldd	r24, Y+4	; 0x04
     582:	88 2f       	mov	r24, r24
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	80 59       	subi	r24, 0x90	; 144
     588:	9b 4f       	sbci	r25, 0xFB	; 251
     58a:	2c 81       	ldd	r18, Y+4	; 0x04
     58c:	22 2f       	mov	r18, r18
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	20 59       	subi	r18, 0x90	; 144
     592:	3b 4f       	sbci	r19, 0xFB	; 251
     594:	f9 01       	movw	r30, r18
     596:	20 81       	ld	r18, Z
     598:	28 60       	ori	r18, 0x08	; 8
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     59e:	8c 81       	ldd	r24, Y+4	; 0x04
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	8c 83       	std	Y+4, r24	; 0x04
     5a4:	8c 81       	ldd	r24, Y+4	; 0x04
     5a6:	88 30       	cpi	r24, 0x08	; 8
     5a8:	58 f3       	brcs	.-42     	; 0x580 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     5aa:	1d 82       	std	Y+5, r1	; 0x05
     5ac:	12 c0       	rjmp	.+36     	; 0x5d2 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     5ae:	8d 81       	ldd	r24, Y+5	; 0x05
     5b0:	88 2f       	mov	r24, r24
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	80 57       	subi	r24, 0x70	; 112
     5b6:	9b 4f       	sbci	r25, 0xFB	; 251
     5b8:	2d 81       	ldd	r18, Y+5	; 0x05
     5ba:	22 2f       	mov	r18, r18
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	20 57       	subi	r18, 0x70	; 112
     5c0:	3b 4f       	sbci	r19, 0xFB	; 251
     5c2:	f9 01       	movw	r30, r18
     5c4:	20 81       	ld	r18, Z
     5c6:	28 60       	ori	r18, 0x08	; 8
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     5cc:	8d 81       	ldd	r24, Y+5	; 0x05
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	8d 83       	std	Y+5, r24	; 0x05
     5d2:	8d 81       	ldd	r24, Y+5	; 0x05
     5d4:	88 30       	cpi	r24, 0x08	; 8
     5d6:	58 f3       	brcs	.-42     	; 0x5ae <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     5d8:	1e 82       	std	Y+6, r1	; 0x06
     5da:	12 c0       	rjmp	.+36     	; 0x600 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     5dc:	8e 81       	ldd	r24, Y+6	; 0x06
     5de:	88 2f       	mov	r24, r24
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	80 55       	subi	r24, 0x50	; 80
     5e4:	9b 4f       	sbci	r25, 0xFB	; 251
     5e6:	2e 81       	ldd	r18, Y+6	; 0x06
     5e8:	22 2f       	mov	r18, r18
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	20 55       	subi	r18, 0x50	; 80
     5ee:	3b 4f       	sbci	r19, 0xFB	; 251
     5f0:	f9 01       	movw	r30, r18
     5f2:	20 81       	ld	r18, Z
     5f4:	28 60       	ori	r18, 0x08	; 8
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     5fa:	8e 81       	ldd	r24, Y+6	; 0x06
     5fc:	8f 5f       	subi	r24, 0xFF	; 255
     5fe:	8e 83       	std	Y+6, r24	; 0x06
     600:	8e 81       	ldd	r24, Y+6	; 0x06
     602:	88 30       	cpi	r24, 0x08	; 8
     604:	58 f3       	brcs	.-42     	; 0x5dc <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     606:	00 00       	nop
     608:	26 96       	adiw	r28, 0x06	; 6
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
     61c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 09 02 	call	0x412	; 0x412 <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 27 02 	call	0x44e	; 0x44e <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 18 02 	call	0x430	; 0x430 <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 45 02 	call	0x48a	; 0x48a <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 36 02 	call	0x46c	; 0x46c <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 63 02 	call	0x4c6	; 0x4c6 <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <B0_MCU_set_dir>

	CLKCTRL_init();
     650:	0e 94 ce 00 	call	0x19c	; 0x19c <CLKCTRL_init>

	CPUINT_init();
     654:	0e 94 d6 00 	call	0x1ac	; 0x1ac <CPUINT_init>

	SLPCTRL_init();
     658:	0e 94 34 03 	call	0x668	; 0x668 <SLPCTRL_init>

	BOD_init();
     65c:	0e 94 c6 00 	call	0x18c	; 0x18c <BOD_init>
}
     660:	00 00       	nop
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
     670:	80 e0       	ldi	r24, 0x00	; 0
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 d0       	rcall	.+0      	; 0x67e <PORTD_set_pin_level+0x6>
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	89 83       	std	Y+1, r24	; 0x01
     684:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	88 23       	and	r24, r24
     68a:	a9 f0       	breq	.+42     	; 0x6b6 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
     68c:	8c e0       	ldi	r24, 0x0C	; 12
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	2c e0       	ldi	r18, 0x0C	; 12
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	f9 01       	movw	r30, r18
     696:	21 81       	ldd	r18, Z+1	; 0x01
     698:	62 2f       	mov	r22, r18
     69a:	29 81       	ldd	r18, Y+1	; 0x01
     69c:	42 2f       	mov	r20, r18
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	21 e0       	ldi	r18, 0x01	; 1
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <PORTD_set_pin_level+0x32>
     6a6:	22 0f       	add	r18, r18
     6a8:	33 1f       	adc	r19, r19
     6aa:	4a 95       	dec	r20
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <PORTD_set_pin_level+0x2e>
     6ae:	26 2b       	or	r18, r22
     6b0:	fc 01       	movw	r30, r24
     6b2:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
     6b4:	15 c0       	rjmp	.+42     	; 0x6e0 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     6b6:	8c e0       	ldi	r24, 0x0C	; 12
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2c e0       	ldi	r18, 0x0C	; 12
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	21 81       	ldd	r18, Z+1	; 0x01
     6c2:	62 2f       	mov	r22, r18
     6c4:	29 81       	ldd	r18, Y+1	; 0x01
     6c6:	42 2f       	mov	r20, r18
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <PORTD_set_pin_level+0x5c>
     6d0:	22 0f       	add	r18, r18
     6d2:	33 1f       	adc	r19, r19
     6d4:	4a 95       	dec	r20
     6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <PORTD_set_pin_level+0x58>
     6d8:	20 95       	com	r18
     6da:	26 23       	and	r18, r22
     6dc:	fc 01       	movw	r30, r24
     6de:	21 83       	std	Z+1, r18	; 0x01
	}
}
     6e0:	00 00       	nop
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	1f 92       	push	r1
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     6f8:	69 81       	ldd	r22, Y+1	; 0x01
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 3c 03 	call	0x678	; 0x678 <PORTD_set_pin_level>
}
     700:	00 00       	nop
     702:	0f 90       	pop	r0
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	08 95       	ret

0000070a <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	1f 92       	push	r1
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     716:	69 81       	ldd	r22, Y+1	; 0x01
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 3c 03 	call	0x678	; 0x678 <PORTD_set_pin_level>
}
     71e:	00 00       	nop
     720:	0f 90       	pop	r0
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	1f 92       	push	r1
     72e:	cd b7       	in	r28, 0x3d	; 61
     730:	de b7       	in	r29, 0x3e	; 62
     732:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     734:	69 81       	ldd	r22, Y+1	; 0x01
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	0e 94 3c 03 	call	0x678	; 0x678 <PORTD_set_pin_level>
}
     73c:	00 00       	nop
     73e:	0f 90       	pop	r0
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	08 95       	ret

00000746 <led_ON>:
 * Created: 21-09-2023 15:03:06
 *  Author: nevil
 */ 
#include <atmel_start.h>
#include <stdbool.h>
void led_ON(uint32_t delay_1,uint32_t delay_2,uint32_t delay_3){
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	c0 56       	subi	r28, 0x60	; 96
     758:	d1 09       	sbc	r29, r1
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	fe 01       	movw	r30, r28
     760:	eb 5a       	subi	r30, 0xAB	; 171
     762:	ff 4f       	sbci	r31, 0xFF	; 255
     764:	60 83       	st	Z, r22
     766:	71 83       	std	Z+1, r23	; 0x01
     768:	82 83       	std	Z+2, r24	; 0x02
     76a:	93 83       	std	Z+3, r25	; 0x03
     76c:	ce 01       	movw	r24, r28
     76e:	87 5a       	subi	r24, 0xA7	; 167
     770:	9f 4f       	sbci	r25, 0xFF	; 255
     772:	fc 01       	movw	r30, r24
     774:	20 83       	st	Z, r18
     776:	31 83       	std	Z+1, r19	; 0x01
     778:	42 83       	std	Z+2, r20	; 0x02
     77a:	53 83       	std	Z+3, r21	; 0x03
     77c:	ce 01       	movw	r24, r28
     77e:	83 5a       	subi	r24, 0xA3	; 163
     780:	9f 4f       	sbci	r25, 0xFF	; 255
     782:	fc 01       	movw	r30, r24
     784:	e0 82       	st	Z, r14
     786:	f1 82       	std	Z+1, r15	; 0x01
     788:	02 83       	std	Z+2, r16	; 0x02
     78a:	13 83       	std	Z+3, r17	; 0x03
	R0_MCU_set_level(true);
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 76 03 	call	0x6ec	; 0x6ec <R0_MCU_set_level>
	G0_MCU_set_level(true);
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	0e 94 85 03 	call	0x70a	; 0x70a <G0_MCU_set_level>
	_delay_ms(delay_1);
     798:	ce 01       	movw	r24, r28
     79a:	8b 5a       	subi	r24, 0xAB	; 171
     79c:	9f 4f       	sbci	r25, 0xFF	; 255
     79e:	fc 01       	movw	r30, r24
     7a0:	60 81       	ld	r22, Z
     7a2:	71 81       	ldd	r23, Z+1	; 0x01
     7a4:	82 81       	ldd	r24, Z+2	; 0x02
     7a6:	93 81       	ldd	r25, Z+3	; 0x03
     7a8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__floatunsisf>
     7ac:	dc 01       	movw	r26, r24
     7ae:	cb 01       	movw	r24, r22
     7b0:	89 83       	std	Y+1, r24	; 0x01
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	ab 83       	std	Y+3, r26	; 0x03
     7b6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7b8:	8e 01       	movw	r16, r28
     7ba:	05 5b       	subi	r16, 0xB5	; 181
     7bc:	1f 4f       	sbci	r17, 0xFF	; 255
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	4a e7       	ldi	r20, 0x7A	; 122
     7c4:	53 e4       	ldi	r21, 0x43	; 67
     7c6:	69 81       	ldd	r22, Y+1	; 0x01
     7c8:	7a 81       	ldd	r23, Y+2	; 0x02
     7ca:	8b 81       	ldd	r24, Y+3	; 0x03
     7cc:	9c 81       	ldd	r25, Y+4	; 0x04
     7ce:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	f8 01       	movw	r30, r16
     7d8:	80 83       	st	Z, r24
     7da:	91 83       	std	Z+1, r25	; 0x01
     7dc:	a2 83       	std	Z+2, r26	; 0x02
     7de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7e0:	ce 01       	movw	r24, r28
     7e2:	85 5b       	subi	r24, 0xB5	; 181
     7e4:	9f 4f       	sbci	r25, 0xFF	; 255
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e8       	ldi	r20, 0x80	; 128
     7ec:	5f e3       	ldi	r21, 0x3F	; 63
     7ee:	fc 01       	movw	r30, r24
     7f0:	60 81       	ld	r22, Z
     7f2:	71 81       	ldd	r23, Z+1	; 0x01
     7f4:	82 81       	ldd	r24, Z+2	; 0x02
     7f6:	93 81       	ldd	r25, Z+3	; 0x03
     7f8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__cmpsf2>
     7fc:	88 23       	and	r24, r24
     7fe:	4c f4       	brge	.+18     	; 0x812 <led_ON+0xcc>
		__ticks = 1;
     800:	ce 01       	movw	r24, r28
     802:	81 5b       	subi	r24, 0xB1	; 177
     804:	9f 4f       	sbci	r25, 0xFF	; 255
     806:	21 e0       	ldi	r18, 0x01	; 1
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
     80e:	31 83       	std	Z+1, r19	; 0x01
     810:	69 c0       	rjmp	.+210    	; 0x8e4 <led_ON+0x19e>
	else if (__tmp > 65535)
     812:	ce 01       	movw	r24, r28
     814:	85 5b       	subi	r24, 0xB5	; 181
     816:	9f 4f       	sbci	r25, 0xFF	; 255
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	3f ef       	ldi	r19, 0xFF	; 255
     81c:	4f e7       	ldi	r20, 0x7F	; 127
     81e:	57 e4       	ldi	r21, 0x47	; 71
     820:	fc 01       	movw	r30, r24
     822:	60 81       	ld	r22, Z
     824:	71 81       	ldd	r23, Z+1	; 0x01
     826:	82 81       	ldd	r24, Z+2	; 0x02
     828:	93 81       	ldd	r25, Z+3	; 0x03
     82a:	0e 94 17 08 	call	0x102e	; 0x102e <__gesf2>
     82e:	18 16       	cp	r1, r24
     830:	0c f0       	brlt	.+2      	; 0x834 <led_ON+0xee>
     832:	46 c0       	rjmp	.+140    	; 0x8c0 <led_ON+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	40 e2       	ldi	r20, 0x20	; 32
     83a:	51 e4       	ldi	r21, 0x41	; 65
     83c:	69 81       	ldd	r22, Y+1	; 0x01
     83e:	7a 81       	ldd	r23, Y+2	; 0x02
     840:	8b 81       	ldd	r24, Y+3	; 0x03
     842:	9c 81       	ldd	r25, Y+4	; 0x04
     844:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	8e 01       	movw	r16, r28
     84e:	01 5b       	subi	r16, 0xB1	; 177
     850:	1f 4f       	sbci	r17, 0xFF	; 255
     852:	bc 01       	movw	r22, r24
     854:	cd 01       	movw	r24, r26
     856:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	f8 01       	movw	r30, r16
     860:	80 83       	st	Z, r24
     862:	91 83       	std	Z+1, r25	; 0x01
     864:	24 c0       	rjmp	.+72     	; 0x8ae <led_ON+0x168>
     866:	ce 01       	movw	r24, r28
     868:	8f 5a       	subi	r24, 0xAF	; 175
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	29 e1       	ldi	r18, 0x19	; 25
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	20 83       	st	Z, r18
     874:	31 83       	std	Z+1, r19	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     876:	ce 01       	movw	r24, r28
     878:	8f 5a       	subi	r24, 0xAF	; 175
     87a:	9f 4f       	sbci	r25, 0xFF	; 255
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	91 81       	ldd	r25, Z+1	; 0x01
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <led_ON+0x13c>
     886:	9e 01       	movw	r18, r28
     888:	2f 5a       	subi	r18, 0xAF	; 175
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	f9 01       	movw	r30, r18
     88e:	80 83       	st	Z, r24
     890:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     892:	ce 01       	movw	r24, r28
     894:	81 5b       	subi	r24, 0xB1	; 177
     896:	9f 4f       	sbci	r25, 0xFF	; 255
     898:	9e 01       	movw	r18, r28
     89a:	21 5b       	subi	r18, 0xB1	; 177
     89c:	3f 4f       	sbci	r19, 0xFF	; 255
     89e:	f9 01       	movw	r30, r18
     8a0:	20 81       	ld	r18, Z
     8a2:	31 81       	ldd	r19, Z+1	; 0x01
     8a4:	21 50       	subi	r18, 0x01	; 1
     8a6:	31 09       	sbc	r19, r1
     8a8:	fc 01       	movw	r30, r24
     8aa:	20 83       	st	Z, r18
     8ac:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ae:	ce 01       	movw	r24, r28
     8b0:	81 5b       	subi	r24, 0xB1	; 177
     8b2:	9f 4f       	sbci	r25, 0xFF	; 255
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	89 2b       	or	r24, r25
     8bc:	a1 f6       	brne	.-88     	; 0x866 <led_ON+0x120>
     8be:	2c c0       	rjmp	.+88     	; 0x918 <led_ON+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8c0:	8e 01       	movw	r16, r28
     8c2:	01 5b       	subi	r16, 0xB1	; 177
     8c4:	1f 4f       	sbci	r17, 0xFF	; 255
     8c6:	ce 01       	movw	r24, r28
     8c8:	85 5b       	subi	r24, 0xB5	; 181
     8ca:	9f 4f       	sbci	r25, 0xFF	; 255
     8cc:	fc 01       	movw	r30, r24
     8ce:	60 81       	ld	r22, Z
     8d0:	71 81       	ldd	r23, Z+1	; 0x01
     8d2:	82 81       	ldd	r24, Z+2	; 0x02
     8d4:	93 81       	ldd	r25, Z+3	; 0x03
     8d6:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	f8 01       	movw	r30, r16
     8e0:	80 83       	st	Z, r24
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	ce 01       	movw	r24, r28
     8e6:	8d 5a       	subi	r24, 0xAD	; 173
     8e8:	9f 4f       	sbci	r25, 0xFF	; 255
     8ea:	9e 01       	movw	r18, r28
     8ec:	21 5b       	subi	r18, 0xB1	; 177
     8ee:	3f 4f       	sbci	r19, 0xFF	; 255
     8f0:	f9 01       	movw	r30, r18
     8f2:	20 81       	ld	r18, Z
     8f4:	31 81       	ldd	r19, Z+1	; 0x01
     8f6:	fc 01       	movw	r30, r24
     8f8:	20 83       	st	Z, r18
     8fa:	31 83       	std	Z+1, r19	; 0x01
     8fc:	ce 01       	movw	r24, r28
     8fe:	8d 5a       	subi	r24, 0xAD	; 173
     900:	9f 4f       	sbci	r25, 0xFF	; 255
     902:	fc 01       	movw	r30, r24
     904:	80 81       	ld	r24, Z
     906:	91 81       	ldd	r25, Z+1	; 0x01
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <led_ON+0x1c2>
     90c:	9e 01       	movw	r18, r28
     90e:	2d 5a       	subi	r18, 0xAD	; 173
     910:	3f 4f       	sbci	r19, 0xFF	; 255
     912:	f9 01       	movw	r30, r18
     914:	80 83       	st	Z, r24
     916:	91 83       	std	Z+1, r25	; 0x01
	R0_MCU_set_level(false);
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	0e 94 76 03 	call	0x6ec	; 0x6ec <R0_MCU_set_level>
	_delay_ms(delay_1);
     91e:	ce 01       	movw	r24, r28
     920:	8b 5a       	subi	r24, 0xAB	; 171
     922:	9f 4f       	sbci	r25, 0xFF	; 255
     924:	fc 01       	movw	r30, r24
     926:	60 81       	ld	r22, Z
     928:	71 81       	ldd	r23, Z+1	; 0x01
     92a:	82 81       	ldd	r24, Z+2	; 0x02
     92c:	93 81       	ldd	r25, Z+3	; 0x03
     92e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__floatunsisf>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	8d 83       	std	Y+5, r24	; 0x05
     938:	9e 83       	std	Y+6, r25	; 0x06
     93a:	af 83       	std	Y+7, r26	; 0x07
     93c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     93e:	8e 01       	movw	r16, r28
     940:	0f 5b       	subi	r16, 0xBF	; 191
     942:	1f 4f       	sbci	r17, 0xFF	; 255
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	4a e7       	ldi	r20, 0x7A	; 122
     94a:	53 e4       	ldi	r21, 0x43	; 67
     94c:	6d 81       	ldd	r22, Y+5	; 0x05
     94e:	7e 81       	ldd	r23, Y+6	; 0x06
     950:	8f 81       	ldd	r24, Y+7	; 0x07
     952:	98 85       	ldd	r25, Y+8	; 0x08
     954:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	f8 01       	movw	r30, r16
     95e:	80 83       	st	Z, r24
     960:	91 83       	std	Z+1, r25	; 0x01
     962:	a2 83       	std	Z+2, r26	; 0x02
     964:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     966:	ce 01       	movw	r24, r28
     968:	8f 5b       	subi	r24, 0xBF	; 191
     96a:	9f 4f       	sbci	r25, 0xFF	; 255
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	40 e8       	ldi	r20, 0x80	; 128
     972:	5f e3       	ldi	r21, 0x3F	; 63
     974:	fc 01       	movw	r30, r24
     976:	60 81       	ld	r22, Z
     978:	71 81       	ldd	r23, Z+1	; 0x01
     97a:	82 81       	ldd	r24, Z+2	; 0x02
     97c:	93 81       	ldd	r25, Z+3	; 0x03
     97e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__cmpsf2>
     982:	88 23       	and	r24, r24
     984:	4c f4       	brge	.+18     	; 0x998 <led_ON+0x252>
		__ticks = 1;
     986:	ce 01       	movw	r24, r28
     988:	8b 5b       	subi	r24, 0xBB	; 187
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	21 e0       	ldi	r18, 0x01	; 1
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
     994:	31 83       	std	Z+1, r19	; 0x01
     996:	69 c0       	rjmp	.+210    	; 0xa6a <led_ON+0x324>
	else if (__tmp > 65535)
     998:	ce 01       	movw	r24, r28
     99a:	8f 5b       	subi	r24, 0xBF	; 191
     99c:	9f 4f       	sbci	r25, 0xFF	; 255
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	3f ef       	ldi	r19, 0xFF	; 255
     9a2:	4f e7       	ldi	r20, 0x7F	; 127
     9a4:	57 e4       	ldi	r21, 0x47	; 71
     9a6:	fc 01       	movw	r30, r24
     9a8:	60 81       	ld	r22, Z
     9aa:	71 81       	ldd	r23, Z+1	; 0x01
     9ac:	82 81       	ldd	r24, Z+2	; 0x02
     9ae:	93 81       	ldd	r25, Z+3	; 0x03
     9b0:	0e 94 17 08 	call	0x102e	; 0x102e <__gesf2>
     9b4:	18 16       	cp	r1, r24
     9b6:	0c f0       	brlt	.+2      	; 0x9ba <led_ON+0x274>
     9b8:	46 c0       	rjmp	.+140    	; 0xa46 <led_ON+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e2       	ldi	r20, 0x20	; 32
     9c0:	51 e4       	ldi	r21, 0x41	; 65
     9c2:	6d 81       	ldd	r22, Y+5	; 0x05
     9c4:	7e 81       	ldd	r23, Y+6	; 0x06
     9c6:	8f 81       	ldd	r24, Y+7	; 0x07
     9c8:	98 85       	ldd	r25, Y+8	; 0x08
     9ca:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	8e 01       	movw	r16, r28
     9d4:	0b 5b       	subi	r16, 0xBB	; 187
     9d6:	1f 4f       	sbci	r17, 0xFF	; 255
     9d8:	bc 01       	movw	r22, r24
     9da:	cd 01       	movw	r24, r26
     9dc:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     9e0:	dc 01       	movw	r26, r24
     9e2:	cb 01       	movw	r24, r22
     9e4:	f8 01       	movw	r30, r16
     9e6:	80 83       	st	Z, r24
     9e8:	91 83       	std	Z+1, r25	; 0x01
     9ea:	24 c0       	rjmp	.+72     	; 0xa34 <led_ON+0x2ee>
     9ec:	ce 01       	movw	r24, r28
     9ee:	89 5b       	subi	r24, 0xB9	; 185
     9f0:	9f 4f       	sbci	r25, 0xFF	; 255
     9f2:	29 e1       	ldi	r18, 0x19	; 25
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	fc 01       	movw	r30, r24
     9f8:	20 83       	st	Z, r18
     9fa:	31 83       	std	Z+1, r19	; 0x01
     9fc:	ce 01       	movw	r24, r28
     9fe:	89 5b       	subi	r24, 0xB9	; 185
     a00:	9f 4f       	sbci	r25, 0xFF	; 255
     a02:	fc 01       	movw	r30, r24
     a04:	80 81       	ld	r24, Z
     a06:	91 81       	ldd	r25, Z+1	; 0x01
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	f1 f7       	brne	.-4      	; 0xa08 <led_ON+0x2c2>
     a0c:	9e 01       	movw	r18, r28
     a0e:	29 5b       	subi	r18, 0xB9	; 185
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	f9 01       	movw	r30, r18
     a14:	80 83       	st	Z, r24
     a16:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a18:	ce 01       	movw	r24, r28
     a1a:	8b 5b       	subi	r24, 0xBB	; 187
     a1c:	9f 4f       	sbci	r25, 0xFF	; 255
     a1e:	9e 01       	movw	r18, r28
     a20:	2b 5b       	subi	r18, 0xBB	; 187
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	f9 01       	movw	r30, r18
     a26:	20 81       	ld	r18, Z
     a28:	31 81       	ldd	r19, Z+1	; 0x01
     a2a:	21 50       	subi	r18, 0x01	; 1
     a2c:	31 09       	sbc	r19, r1
     a2e:	fc 01       	movw	r30, r24
     a30:	20 83       	st	Z, r18
     a32:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a34:	ce 01       	movw	r24, r28
     a36:	8b 5b       	subi	r24, 0xBB	; 187
     a38:	9f 4f       	sbci	r25, 0xFF	; 255
     a3a:	fc 01       	movw	r30, r24
     a3c:	80 81       	ld	r24, Z
     a3e:	91 81       	ldd	r25, Z+1	; 0x01
     a40:	89 2b       	or	r24, r25
     a42:	a1 f6       	brne	.-88     	; 0x9ec <led_ON+0x2a6>
     a44:	2c c0       	rjmp	.+88     	; 0xa9e <led_ON+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a46:	8e 01       	movw	r16, r28
     a48:	0b 5b       	subi	r16, 0xBB	; 187
     a4a:	1f 4f       	sbci	r17, 0xFF	; 255
     a4c:	ce 01       	movw	r24, r28
     a4e:	8f 5b       	subi	r24, 0xBF	; 191
     a50:	9f 4f       	sbci	r25, 0xFF	; 255
     a52:	fc 01       	movw	r30, r24
     a54:	60 81       	ld	r22, Z
     a56:	71 81       	ldd	r23, Z+1	; 0x01
     a58:	82 81       	ldd	r24, Z+2	; 0x02
     a5a:	93 81       	ldd	r25, Z+3	; 0x03
     a5c:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     a60:	dc 01       	movw	r26, r24
     a62:	cb 01       	movw	r24, r22
     a64:	f8 01       	movw	r30, r16
     a66:	80 83       	st	Z, r24
     a68:	91 83       	std	Z+1, r25	; 0x01
     a6a:	ce 01       	movw	r24, r28
     a6c:	87 5b       	subi	r24, 0xB7	; 183
     a6e:	9f 4f       	sbci	r25, 0xFF	; 255
     a70:	9e 01       	movw	r18, r28
     a72:	2b 5b       	subi	r18, 0xBB	; 187
     a74:	3f 4f       	sbci	r19, 0xFF	; 255
     a76:	f9 01       	movw	r30, r18
     a78:	20 81       	ld	r18, Z
     a7a:	31 81       	ldd	r19, Z+1	; 0x01
     a7c:	fc 01       	movw	r30, r24
     a7e:	20 83       	st	Z, r18
     a80:	31 83       	std	Z+1, r19	; 0x01
     a82:	ce 01       	movw	r24, r28
     a84:	87 5b       	subi	r24, 0xB7	; 183
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	fc 01       	movw	r30, r24
     a8a:	80 81       	ld	r24, Z
     a8c:	91 81       	ldd	r25, Z+1	; 0x01
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	f1 f7       	brne	.-4      	; 0xa8e <led_ON+0x348>
     a92:	9e 01       	movw	r18, r28
     a94:	27 5b       	subi	r18, 0xB7	; 183
     a96:	3f 4f       	sbci	r19, 0xFF	; 255
     a98:	f9 01       	movw	r30, r18
     a9a:	80 83       	st	Z, r24
     a9c:	91 83       	std	Z+1, r25	; 0x01
    G0_MCU_set_level(true);
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	0e 94 85 03 	call	0x70a	; 0x70a <G0_MCU_set_level>
	_delay_ms(delay_2);
     aa4:	ce 01       	movw	r24, r28
     aa6:	87 5a       	subi	r24, 0xA7	; 167
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	60 81       	ld	r22, Z
     aae:	71 81       	ldd	r23, Z+1	; 0x01
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__floatunsisf>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	89 87       	std	Y+9, r24	; 0x09
     abe:	9a 87       	std	Y+10, r25	; 0x0a
     ac0:	ab 87       	std	Y+11, r26	; 0x0b
     ac2:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	4a e7       	ldi	r20, 0x7A	; 122
     aca:	53 e4       	ldi	r21, 0x43	; 67
     acc:	69 85       	ldd	r22, Y+9	; 0x09
     ace:	7a 85       	ldd	r23, Y+10	; 0x0a
     ad0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad4:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	8f ab       	std	Y+55, r24	; 0x37
     ade:	98 af       	std	Y+56, r25	; 0x38
     ae0:	a9 af       	std	Y+57, r26	; 0x39
     ae2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e8       	ldi	r20, 0x80	; 128
     aea:	5f e3       	ldi	r21, 0x3F	; 63
     aec:	6f a9       	ldd	r22, Y+55	; 0x37
     aee:	78 ad       	ldd	r23, Y+56	; 0x38
     af0:	89 ad       	ldd	r24, Y+57	; 0x39
     af2:	9a ad       	ldd	r25, Y+58	; 0x3a
     af4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__cmpsf2>
     af8:	88 23       	and	r24, r24
     afa:	2c f4       	brge	.+10     	; 0xb06 <led_ON+0x3c0>
		__ticks = 1;
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	8b af       	std	Y+59, r24	; 0x3b
     b02:	9c af       	std	Y+60, r25	; 0x3c
     b04:	3f c0       	rjmp	.+126    	; 0xb84 <led_ON+0x43e>
	else if (__tmp > 65535)
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	3f ef       	ldi	r19, 0xFF	; 255
     b0a:	4f e7       	ldi	r20, 0x7F	; 127
     b0c:	57 e4       	ldi	r21, 0x47	; 71
     b0e:	6f a9       	ldd	r22, Y+55	; 0x37
     b10:	78 ad       	ldd	r23, Y+56	; 0x38
     b12:	89 ad       	ldd	r24, Y+57	; 0x39
     b14:	9a ad       	ldd	r25, Y+58	; 0x3a
     b16:	0e 94 17 08 	call	0x102e	; 0x102e <__gesf2>
     b1a:	18 16       	cp	r1, r24
     b1c:	4c f5       	brge	.+82     	; 0xb70 <led_ON+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	40 e2       	ldi	r20, 0x20	; 32
     b24:	51 e4       	ldi	r21, 0x41	; 65
     b26:	69 85       	ldd	r22, Y+9	; 0x09
     b28:	7a 85       	ldd	r23, Y+10	; 0x0a
     b2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b2e:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	bc 01       	movw	r22, r24
     b38:	cd 01       	movw	r24, r26
     b3a:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	8b af       	std	Y+59, r24	; 0x3b
     b44:	9c af       	std	Y+60, r25	; 0x3c
     b46:	0f c0       	rjmp	.+30     	; 0xb66 <led_ON+0x420>
     b48:	89 e1       	ldi	r24, 0x19	; 25
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	8d af       	std	Y+61, r24	; 0x3d
     b4e:	9e af       	std	Y+62, r25	; 0x3e
     b50:	8d ad       	ldd	r24, Y+61	; 0x3d
     b52:	9e ad       	ldd	r25, Y+62	; 0x3e
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <led_ON+0x40e>
     b58:	8d af       	std	Y+61, r24	; 0x3d
     b5a:	9e af       	std	Y+62, r25	; 0x3e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b5c:	8b ad       	ldd	r24, Y+59	; 0x3b
     b5e:	9c ad       	ldd	r25, Y+60	; 0x3c
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	8b af       	std	Y+59, r24	; 0x3b
     b64:	9c af       	std	Y+60, r25	; 0x3c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b66:	8b ad       	ldd	r24, Y+59	; 0x3b
     b68:	9c ad       	ldd	r25, Y+60	; 0x3c
     b6a:	89 2b       	or	r24, r25
     b6c:	69 f7       	brne	.-38     	; 0xb48 <led_ON+0x402>
     b6e:	1e c0       	rjmp	.+60     	; 0xbac <led_ON+0x466>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b70:	6f a9       	ldd	r22, Y+55	; 0x37
     b72:	78 ad       	ldd	r23, Y+56	; 0x38
     b74:	89 ad       	ldd	r24, Y+57	; 0x39
     b76:	9a ad       	ldd	r25, Y+58	; 0x3a
     b78:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     b7c:	dc 01       	movw	r26, r24
     b7e:	cb 01       	movw	r24, r22
     b80:	8b af       	std	Y+59, r24	; 0x3b
     b82:	9c af       	std	Y+60, r25	; 0x3c
     b84:	2b ad       	ldd	r18, Y+59	; 0x3b
     b86:	3c ad       	ldd	r19, Y+60	; 0x3c
     b88:	ce 01       	movw	r24, r28
     b8a:	cf 96       	adiw	r24, 0x3f	; 63
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 83       	st	Z, r18
     b90:	31 83       	std	Z+1, r19	; 0x01
     b92:	ce 01       	movw	r24, r28
     b94:	cf 96       	adiw	r24, 0x3f	; 63
     b96:	fc 01       	movw	r30, r24
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <led_ON+0x456>
     ba0:	9e 01       	movw	r18, r28
     ba2:	21 5c       	subi	r18, 0xC1	; 193
     ba4:	3f 4f       	sbci	r19, 0xFF	; 255
     ba6:	f9 01       	movw	r30, r18
     ba8:	80 83       	st	Z, r24
     baa:	91 83       	std	Z+1, r25	; 0x01
	G0_MCU_set_level(false);
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	0e 94 85 03 	call	0x70a	; 0x70a <G0_MCU_set_level>
	_delay_ms(delay_2);
     bb2:	ce 01       	movw	r24, r28
     bb4:	87 5a       	subi	r24, 0xA7	; 167
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	fc 01       	movw	r30, r24
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__floatunsisf>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	8d 87       	std	Y+13, r24	; 0x0d
     bcc:	9e 87       	std	Y+14, r25	; 0x0e
     bce:	af 87       	std	Y+15, r26	; 0x0f
     bd0:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	4a e7       	ldi	r20, 0x7A	; 122
     bd8:	53 e4       	ldi	r21, 0x43	; 67
     bda:	6d 85       	ldd	r22, Y+13	; 0x0d
     bdc:	7e 85       	ldd	r23, Y+14	; 0x0e
     bde:	8f 85       	ldd	r24, Y+15	; 0x0f
     be0:	98 89       	ldd	r25, Y+16	; 0x10
     be2:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	8d a7       	std	Y+45, r24	; 0x2d
     bec:	9e a7       	std	Y+46, r25	; 0x2e
     bee:	af a7       	std	Y+47, r26	; 0x2f
     bf0:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e8       	ldi	r20, 0x80	; 128
     bf8:	5f e3       	ldi	r21, 0x3F	; 63
     bfa:	6d a5       	ldd	r22, Y+45	; 0x2d
     bfc:	7e a5       	ldd	r23, Y+46	; 0x2e
     bfe:	8f a5       	ldd	r24, Y+47	; 0x2f
     c00:	98 a9       	ldd	r25, Y+48	; 0x30
     c02:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__cmpsf2>
     c06:	88 23       	and	r24, r24
     c08:	2c f4       	brge	.+10     	; 0xc14 <led_ON+0x4ce>
		__ticks = 1;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	89 ab       	std	Y+49, r24	; 0x31
     c10:	9a ab       	std	Y+50, r25	; 0x32
     c12:	3f c0       	rjmp	.+126    	; 0xc92 <led_ON+0x54c>
	else if (__tmp > 65535)
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	3f ef       	ldi	r19, 0xFF	; 255
     c18:	4f e7       	ldi	r20, 0x7F	; 127
     c1a:	57 e4       	ldi	r21, 0x47	; 71
     c1c:	6d a5       	ldd	r22, Y+45	; 0x2d
     c1e:	7e a5       	ldd	r23, Y+46	; 0x2e
     c20:	8f a5       	ldd	r24, Y+47	; 0x2f
     c22:	98 a9       	ldd	r25, Y+48	; 0x30
     c24:	0e 94 17 08 	call	0x102e	; 0x102e <__gesf2>
     c28:	18 16       	cp	r1, r24
     c2a:	4c f5       	brge	.+82     	; 0xc7e <led_ON+0x538>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e2       	ldi	r20, 0x20	; 32
     c32:	51 e4       	ldi	r21, 0x41	; 65
     c34:	6d 85       	ldd	r22, Y+13	; 0x0d
     c36:	7e 85       	ldd	r23, Y+14	; 0x0e
     c38:	8f 85       	ldd	r24, Y+15	; 0x0f
     c3a:	98 89       	ldd	r25, Y+16	; 0x10
     c3c:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	bc 01       	movw	r22, r24
     c46:	cd 01       	movw	r24, r26
     c48:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	89 ab       	std	Y+49, r24	; 0x31
     c52:	9a ab       	std	Y+50, r25	; 0x32
     c54:	0f c0       	rjmp	.+30     	; 0xc74 <led_ON+0x52e>
     c56:	89 e1       	ldi	r24, 0x19	; 25
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	8b ab       	std	Y+51, r24	; 0x33
     c5c:	9c ab       	std	Y+52, r25	; 0x34
     c5e:	8b a9       	ldd	r24, Y+51	; 0x33
     c60:	9c a9       	ldd	r25, Y+52	; 0x34
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <led_ON+0x51c>
     c66:	8b ab       	std	Y+51, r24	; 0x33
     c68:	9c ab       	std	Y+52, r25	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c6a:	89 a9       	ldd	r24, Y+49	; 0x31
     c6c:	9a a9       	ldd	r25, Y+50	; 0x32
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	89 ab       	std	Y+49, r24	; 0x31
     c72:	9a ab       	std	Y+50, r25	; 0x32
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c74:	89 a9       	ldd	r24, Y+49	; 0x31
     c76:	9a a9       	ldd	r25, Y+50	; 0x32
     c78:	89 2b       	or	r24, r25
     c7a:	69 f7       	brne	.-38     	; 0xc56 <led_ON+0x510>
     c7c:	14 c0       	rjmp	.+40     	; 0xca6 <led_ON+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7e:	6d a5       	ldd	r22, Y+45	; 0x2d
     c80:	7e a5       	ldd	r23, Y+46	; 0x2e
     c82:	8f a5       	ldd	r24, Y+47	; 0x2f
     c84:	98 a9       	ldd	r25, Y+48	; 0x30
     c86:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	89 ab       	std	Y+49, r24	; 0x31
     c90:	9a ab       	std	Y+50, r25	; 0x32
     c92:	89 a9       	ldd	r24, Y+49	; 0x31
     c94:	9a a9       	ldd	r25, Y+50	; 0x32
     c96:	8d ab       	std	Y+53, r24	; 0x35
     c98:	9e ab       	std	Y+54, r25	; 0x36
     c9a:	8d a9       	ldd	r24, Y+53	; 0x35
     c9c:	9e a9       	ldd	r25, Y+54	; 0x36
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <led_ON+0x558>
     ca2:	8d ab       	std	Y+53, r24	; 0x35
     ca4:	9e ab       	std	Y+54, r25	; 0x36
	B0_MCU_set_level(true);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 94 03 	call	0x728	; 0x728 <B0_MCU_set_level>
	_delay_ms(delay_3);
     cac:	ce 01       	movw	r24, r28
     cae:	83 5a       	subi	r24, 0xA3	; 163
     cb0:	9f 4f       	sbci	r25, 0xFF	; 255
     cb2:	fc 01       	movw	r30, r24
     cb4:	60 81       	ld	r22, Z
     cb6:	71 81       	ldd	r23, Z+1	; 0x01
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__floatunsisf>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	89 8b       	std	Y+17, r24	; 0x11
     cc6:	9a 8b       	std	Y+18, r25	; 0x12
     cc8:	ab 8b       	std	Y+19, r26	; 0x13
     cca:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	4a e7       	ldi	r20, 0x7A	; 122
     cd2:	53 e4       	ldi	r21, 0x43	; 67
     cd4:	69 89       	ldd	r22, Y+17	; 0x11
     cd6:	7a 89       	ldd	r23, Y+18	; 0x12
     cd8:	8b 89       	ldd	r24, Y+19	; 0x13
     cda:	9c 89       	ldd	r25, Y+20	; 0x14
     cdc:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	8b a3       	std	Y+35, r24	; 0x23
     ce6:	9c a3       	std	Y+36, r25	; 0x24
     ce8:	ad a3       	std	Y+37, r26	; 0x25
     cea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	6b a1       	ldd	r22, Y+35	; 0x23
     cf6:	7c a1       	ldd	r23, Y+36	; 0x24
     cf8:	8d a1       	ldd	r24, Y+37	; 0x25
     cfa:	9e a1       	ldd	r25, Y+38	; 0x26
     cfc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__cmpsf2>
     d00:	88 23       	and	r24, r24
     d02:	2c f4       	brge	.+10     	; 0xd0e <led_ON+0x5c8>
		__ticks = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	8f a3       	std	Y+39, r24	; 0x27
     d0a:	98 a7       	std	Y+40, r25	; 0x28
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <led_ON+0x646>
	else if (__tmp > 65535)
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	57 e4       	ldi	r21, 0x47	; 71
     d16:	6b a1       	ldd	r22, Y+35	; 0x23
     d18:	7c a1       	ldd	r23, Y+36	; 0x24
     d1a:	8d a1       	ldd	r24, Y+37	; 0x25
     d1c:	9e a1       	ldd	r25, Y+38	; 0x26
     d1e:	0e 94 17 08 	call	0x102e	; 0x102e <__gesf2>
     d22:	18 16       	cp	r1, r24
     d24:	4c f5       	brge	.+82     	; 0xd78 <led_ON+0x632>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	69 89       	ldd	r22, Y+17	; 0x11
     d30:	7a 89       	ldd	r23, Y+18	; 0x12
     d32:	8b 89       	ldd	r24, Y+19	; 0x13
     d34:	9c 89       	ldd	r25, Y+20	; 0x14
     d36:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	8f a3       	std	Y+39, r24	; 0x27
     d4c:	98 a7       	std	Y+40, r25	; 0x28
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <led_ON+0x628>
     d50:	89 e1       	ldi	r24, 0x19	; 25
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	89 a7       	std	Y+41, r24	; 0x29
     d56:	9a a7       	std	Y+42, r25	; 0x2a
     d58:	89 a5       	ldd	r24, Y+41	; 0x29
     d5a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	f1 f7       	brne	.-4      	; 0xd5c <led_ON+0x616>
     d60:	89 a7       	std	Y+41, r24	; 0x29
     d62:	9a a7       	std	Y+42, r25	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d64:	8f a1       	ldd	r24, Y+39	; 0x27
     d66:	98 a5       	ldd	r25, Y+40	; 0x28
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	8f a3       	std	Y+39, r24	; 0x27
     d6c:	98 a7       	std	Y+40, r25	; 0x28
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6e:	8f a1       	ldd	r24, Y+39	; 0x27
     d70:	98 a5       	ldd	r25, Y+40	; 0x28
     d72:	89 2b       	or	r24, r25
     d74:	69 f7       	brne	.-38     	; 0xd50 <led_ON+0x60a>
     d76:	14 c0       	rjmp	.+40     	; 0xda0 <led_ON+0x65a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d78:	6b a1       	ldd	r22, Y+35	; 0x23
     d7a:	7c a1       	ldd	r23, Y+36	; 0x24
     d7c:	8d a1       	ldd	r24, Y+37	; 0x25
     d7e:	9e a1       	ldd	r25, Y+38	; 0x26
     d80:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	8f a3       	std	Y+39, r24	; 0x27
     d8a:	98 a7       	std	Y+40, r25	; 0x28
     d8c:	8f a1       	ldd	r24, Y+39	; 0x27
     d8e:	98 a5       	ldd	r25, Y+40	; 0x28
     d90:	8b a7       	std	Y+43, r24	; 0x2b
     d92:	9c a7       	std	Y+44, r25	; 0x2c
     d94:	8b a5       	ldd	r24, Y+43	; 0x2b
     d96:	9c a5       	ldd	r25, Y+44	; 0x2c
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <led_ON+0x652>
     d9c:	8b a7       	std	Y+43, r24	; 0x2b
     d9e:	9c a7       	std	Y+44, r25	; 0x2c
	B0_MCU_set_level(false);
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 94 03 	call	0x728	; 0x728 <B0_MCU_set_level>
	_delay_ms(delay_3);
     da6:	ce 01       	movw	r24, r28
     da8:	83 5a       	subi	r24, 0xA3	; 163
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	fc 01       	movw	r30, r24
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	93 81       	ldd	r25, Z+3	; 0x03
     db6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__floatunsisf>
     dba:	dc 01       	movw	r26, r24
     dbc:	cb 01       	movw	r24, r22
     dbe:	8d 8b       	std	Y+21, r24	; 0x15
     dc0:	9e 8b       	std	Y+22, r25	; 0x16
     dc2:	af 8b       	std	Y+23, r26	; 0x17
     dc4:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	4a e7       	ldi	r20, 0x7A	; 122
     dcc:	53 e4       	ldi	r21, 0x43	; 67
     dce:	6d 89       	ldd	r22, Y+21	; 0x15
     dd0:	7e 89       	ldd	r23, Y+22	; 0x16
     dd2:	8f 89       	ldd	r24, Y+23	; 0x17
     dd4:	98 8d       	ldd	r25, Y+24	; 0x18
     dd6:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	89 8f       	std	Y+25, r24	; 0x19
     de0:	9a 8f       	std	Y+26, r25	; 0x1a
     de2:	ab 8f       	std	Y+27, r26	; 0x1b
     de4:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	5f e3       	ldi	r21, 0x3F	; 63
     dee:	69 8d       	ldd	r22, Y+25	; 0x19
     df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     df6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__cmpsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	2c f4       	brge	.+10     	; 0xe08 <led_ON+0x6c2>
		__ticks = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	8d 8f       	std	Y+29, r24	; 0x1d
     e04:	9e 8f       	std	Y+30, r25	; 0x1e
     e06:	3f c0       	rjmp	.+126    	; 0xe86 <led_ON+0x740>
	else if (__tmp > 65535)
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	3f ef       	ldi	r19, 0xFF	; 255
     e0c:	4f e7       	ldi	r20, 0x7F	; 127
     e0e:	57 e4       	ldi	r21, 0x47	; 71
     e10:	69 8d       	ldd	r22, Y+25	; 0x19
     e12:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e16:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e18:	0e 94 17 08 	call	0x102e	; 0x102e <__gesf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	4c f5       	brge	.+82     	; 0xe72 <led_ON+0x72c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e2       	ldi	r20, 0x20	; 32
     e26:	51 e4       	ldi	r21, 0x41	; 65
     e28:	6d 89       	ldd	r22, Y+21	; 0x15
     e2a:	7e 89       	ldd	r23, Y+22	; 0x16
     e2c:	8f 89       	ldd	r24, Y+23	; 0x17
     e2e:	98 8d       	ldd	r25, Y+24	; 0x18
     e30:	0e 94 1c 08 	call	0x1038	; 0x1038 <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	8d 8f       	std	Y+29, r24	; 0x1d
     e46:	9e 8f       	std	Y+30, r25	; 0x1e
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <led_ON+0x722>
     e4a:	89 e1       	ldi	r24, 0x19	; 25
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	8f 8f       	std	Y+31, r24	; 0x1f
     e50:	98 a3       	std	Y+32, r25	; 0x20
     e52:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e54:	98 a1       	ldd	r25, Y+32	; 0x20
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <led_ON+0x710>
     e5a:	8f 8f       	std	Y+31, r24	; 0x1f
     e5c:	98 a3       	std	Y+32, r25	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e60:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	8d 8f       	std	Y+29, r24	; 0x1d
     e66:	9e 8f       	std	Y+30, r25	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e6c:	89 2b       	or	r24, r25
     e6e:	69 f7       	brne	.-38     	; 0xe4a <led_ON+0x704>
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <led_ON+0x754>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	69 8d       	ldd	r22, Y+25	; 0x19
     e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e7a:	0e 94 5e 07 	call	0xebc	; 0xebc <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	8d 8f       	std	Y+29, r24	; 0x1d
     e84:	9e 8f       	std	Y+30, r25	; 0x1e
     e86:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e88:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e8a:	89 a3       	std	Y+33, r24	; 0x21
     e8c:	9a a3       	std	Y+34, r25	; 0x22
     e8e:	89 a1       	ldd	r24, Y+33	; 0x21
     e90:	9a a1       	ldd	r25, Y+34	; 0x22
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <led_ON+0x74c>
     e96:	89 a3       	std	Y+33, r24	; 0x21
     e98:	9a a3       	std	Y+34, r25	; 0x22
     e9a:	00 00       	nop
     e9c:	c0 5a       	subi	r28, 0xA0	; 160
     e9e:	df 4f       	sbci	r29, 0xFF	; 255
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ff 90       	pop	r15
     eae:	ef 90       	pop	r14
     eb0:	08 95       	ret

00000eb2 <__cmpsf2>:
     eb2:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_cmp>
     eb6:	08 f4       	brcc	.+2      	; 0xeba <__cmpsf2+0x8>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	08 95       	ret

00000ebc <__fixunssfsi>:
     ebc:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_splitA>
     ec0:	88 f0       	brcs	.+34     	; 0xee4 <__fixunssfsi+0x28>
     ec2:	9f 57       	subi	r25, 0x7F	; 127
     ec4:	98 f0       	brcs	.+38     	; 0xeec <__fixunssfsi+0x30>
     ec6:	b9 2f       	mov	r27, r25
     ec8:	99 27       	eor	r25, r25
     eca:	b7 51       	subi	r27, 0x17	; 23
     ecc:	b0 f0       	brcs	.+44     	; 0xefa <__fixunssfsi+0x3e>
     ece:	e1 f0       	breq	.+56     	; 0xf08 <__fixunssfsi+0x4c>
     ed0:	66 0f       	add	r22, r22
     ed2:	77 1f       	adc	r23, r23
     ed4:	88 1f       	adc	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	1a f0       	brmi	.+6      	; 0xee0 <__fixunssfsi+0x24>
     eda:	ba 95       	dec	r27
     edc:	c9 f7       	brne	.-14     	; 0xed0 <__fixunssfsi+0x14>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <__fixunssfsi+0x4c>
     ee0:	b1 30       	cpi	r27, 0x01	; 1
     ee2:	91 f0       	breq	.+36     	; 0xf08 <__fixunssfsi+0x4c>
     ee4:	0e 94 10 08 	call	0x1020	; 0x1020 <__fp_zero>
     ee8:	b1 e0       	ldi	r27, 0x01	; 1
     eea:	08 95       	ret
     eec:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_zero>
     ef0:	67 2f       	mov	r22, r23
     ef2:	78 2f       	mov	r23, r24
     ef4:	88 27       	eor	r24, r24
     ef6:	b8 5f       	subi	r27, 0xF8	; 248
     ef8:	39 f0       	breq	.+14     	; 0xf08 <__fixunssfsi+0x4c>
     efa:	b9 3f       	cpi	r27, 0xF9	; 249
     efc:	cc f3       	brlt	.-14     	; 0xef0 <__fixunssfsi+0x34>
     efe:	86 95       	lsr	r24
     f00:	77 95       	ror	r23
     f02:	67 95       	ror	r22
     f04:	b3 95       	inc	r27
     f06:	d9 f7       	brne	.-10     	; 0xefe <__fixunssfsi+0x42>
     f08:	3e f4       	brtc	.+14     	; 0xf18 <__fixunssfsi+0x5c>
     f0a:	90 95       	com	r25
     f0c:	80 95       	com	r24
     f0e:	70 95       	com	r23
     f10:	61 95       	neg	r22
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	8f 4f       	sbci	r24, 0xFF	; 255
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	08 95       	ret

00000f1a <__floatunsisf>:
     f1a:	e8 94       	clt
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <__floatsisf+0x12>

00000f1e <__floatsisf>:
     f1e:	97 fb       	bst	r25, 7
     f20:	3e f4       	brtc	.+14     	; 0xf30 <__floatsisf+0x12>
     f22:	90 95       	com	r25
     f24:	80 95       	com	r24
     f26:	70 95       	com	r23
     f28:	61 95       	neg	r22
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	99 23       	and	r25, r25
     f32:	a9 f0       	breq	.+42     	; 0xf5e <__floatsisf+0x40>
     f34:	f9 2f       	mov	r31, r25
     f36:	96 e9       	ldi	r25, 0x96	; 150
     f38:	bb 27       	eor	r27, r27
     f3a:	93 95       	inc	r25
     f3c:	f6 95       	lsr	r31
     f3e:	87 95       	ror	r24
     f40:	77 95       	ror	r23
     f42:	67 95       	ror	r22
     f44:	b7 95       	ror	r27
     f46:	f1 11       	cpse	r31, r1
     f48:	f8 cf       	rjmp	.-16     	; 0xf3a <__floatsisf+0x1c>
     f4a:	fa f4       	brpl	.+62     	; 0xf8a <__floatsisf+0x6c>
     f4c:	bb 0f       	add	r27, r27
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__floatsisf+0x36>
     f50:	60 ff       	sbrs	r22, 0
     f52:	1b c0       	rjmp	.+54     	; 0xf8a <__floatsisf+0x6c>
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f 4f       	sbci	r24, 0xFF	; 255
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	16 c0       	rjmp	.+44     	; 0xf8a <__floatsisf+0x6c>
     f5e:	88 23       	and	r24, r24
     f60:	11 f0       	breq	.+4      	; 0xf66 <__floatsisf+0x48>
     f62:	96 e9       	ldi	r25, 0x96	; 150
     f64:	11 c0       	rjmp	.+34     	; 0xf88 <__floatsisf+0x6a>
     f66:	77 23       	and	r23, r23
     f68:	21 f0       	breq	.+8      	; 0xf72 <__floatsisf+0x54>
     f6a:	9e e8       	ldi	r25, 0x8E	; 142
     f6c:	87 2f       	mov	r24, r23
     f6e:	76 2f       	mov	r23, r22
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <__floatsisf+0x5e>
     f72:	66 23       	and	r22, r22
     f74:	71 f0       	breq	.+28     	; 0xf92 <__floatsisf+0x74>
     f76:	96 e8       	ldi	r25, 0x86	; 134
     f78:	86 2f       	mov	r24, r22
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	2a f0       	brmi	.+10     	; 0xf8a <__floatsisf+0x6c>
     f80:	9a 95       	dec	r25
     f82:	66 0f       	add	r22, r22
     f84:	77 1f       	adc	r23, r23
     f86:	88 1f       	adc	r24, r24
     f88:	da f7       	brpl	.-10     	; 0xf80 <__floatsisf+0x62>
     f8a:	88 0f       	add	r24, r24
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	97 f9       	bld	r25, 7
     f92:	08 95       	ret

00000f94 <__fp_cmp>:
     f94:	99 0f       	add	r25, r25
     f96:	00 08       	sbc	r0, r0
     f98:	55 0f       	add	r21, r21
     f9a:	aa 0b       	sbc	r26, r26
     f9c:	e0 e8       	ldi	r30, 0x80	; 128
     f9e:	fe ef       	ldi	r31, 0xFE	; 254
     fa0:	16 16       	cp	r1, r22
     fa2:	17 06       	cpc	r1, r23
     fa4:	e8 07       	cpc	r30, r24
     fa6:	f9 07       	cpc	r31, r25
     fa8:	c0 f0       	brcs	.+48     	; 0xfda <__fp_cmp+0x46>
     faa:	12 16       	cp	r1, r18
     fac:	13 06       	cpc	r1, r19
     fae:	e4 07       	cpc	r30, r20
     fb0:	f5 07       	cpc	r31, r21
     fb2:	98 f0       	brcs	.+38     	; 0xfda <__fp_cmp+0x46>
     fb4:	62 1b       	sub	r22, r18
     fb6:	73 0b       	sbc	r23, r19
     fb8:	84 0b       	sbc	r24, r20
     fba:	95 0b       	sbc	r25, r21
     fbc:	39 f4       	brne	.+14     	; 0xfcc <__fp_cmp+0x38>
     fbe:	0a 26       	eor	r0, r26
     fc0:	61 f0       	breq	.+24     	; 0xfda <__fp_cmp+0x46>
     fc2:	23 2b       	or	r18, r19
     fc4:	24 2b       	or	r18, r20
     fc6:	25 2b       	or	r18, r21
     fc8:	21 f4       	brne	.+8      	; 0xfd2 <__fp_cmp+0x3e>
     fca:	08 95       	ret
     fcc:	0a 26       	eor	r0, r26
     fce:	09 f4       	brne	.+2      	; 0xfd2 <__fp_cmp+0x3e>
     fd0:	a1 40       	sbci	r26, 0x01	; 1
     fd2:	a6 95       	lsr	r26
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	81 1d       	adc	r24, r1
     fd8:	81 1d       	adc	r24, r1
     fda:	08 95       	ret

00000fdc <__fp_split3>:
     fdc:	57 fd       	sbrc	r21, 7
     fde:	90 58       	subi	r25, 0x80	; 128
     fe0:	44 0f       	add	r20, r20
     fe2:	55 1f       	adc	r21, r21
     fe4:	59 f0       	breq	.+22     	; 0xffc <__fp_splitA+0x10>
     fe6:	5f 3f       	cpi	r21, 0xFF	; 255
     fe8:	71 f0       	breq	.+28     	; 0x1006 <__fp_splitA+0x1a>
     fea:	47 95       	ror	r20

00000fec <__fp_splitA>:
     fec:	88 0f       	add	r24, r24
     fee:	97 fb       	bst	r25, 7
     ff0:	99 1f       	adc	r25, r25
     ff2:	61 f0       	breq	.+24     	; 0x100c <__fp_splitA+0x20>
     ff4:	9f 3f       	cpi	r25, 0xFF	; 255
     ff6:	79 f0       	breq	.+30     	; 0x1016 <__fp_splitA+0x2a>
     ff8:	87 95       	ror	r24
     ffa:	08 95       	ret
     ffc:	12 16       	cp	r1, r18
     ffe:	13 06       	cpc	r1, r19
    1000:	14 06       	cpc	r1, r20
    1002:	55 1f       	adc	r21, r21
    1004:	f2 cf       	rjmp	.-28     	; 0xfea <__fp_split3+0xe>
    1006:	46 95       	lsr	r20
    1008:	f1 df       	rcall	.-30     	; 0xfec <__fp_splitA>
    100a:	08 c0       	rjmp	.+16     	; 0x101c <__fp_splitA+0x30>
    100c:	16 16       	cp	r1, r22
    100e:	17 06       	cpc	r1, r23
    1010:	18 06       	cpc	r1, r24
    1012:	99 1f       	adc	r25, r25
    1014:	f1 cf       	rjmp	.-30     	; 0xff8 <__fp_splitA+0xc>
    1016:	86 95       	lsr	r24
    1018:	71 05       	cpc	r23, r1
    101a:	61 05       	cpc	r22, r1
    101c:	08 94       	sec
    101e:	08 95       	ret

00001020 <__fp_zero>:
    1020:	e8 94       	clt

00001022 <__fp_szero>:
    1022:	bb 27       	eor	r27, r27
    1024:	66 27       	eor	r22, r22
    1026:	77 27       	eor	r23, r23
    1028:	cb 01       	movw	r24, r22
    102a:	97 f9       	bld	r25, 7
    102c:	08 95       	ret

0000102e <__gesf2>:
    102e:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_cmp>
    1032:	08 f4       	brcc	.+2      	; 0x1036 <__gesf2+0x8>
    1034:	8f ef       	ldi	r24, 0xFF	; 255
    1036:	08 95       	ret

00001038 <__mulsf3>:
    1038:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3x>
    103c:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__fp_round>
    1040:	0e 94 92 08 	call	0x1124	; 0x1124 <__fp_pscA>
    1044:	38 f0       	brcs	.+14     	; 0x1054 <__mulsf3+0x1c>
    1046:	0e 94 99 08 	call	0x1132	; 0x1132 <__fp_pscB>
    104a:	20 f0       	brcs	.+8      	; 0x1054 <__mulsf3+0x1c>
    104c:	95 23       	and	r25, r21
    104e:	11 f0       	breq	.+4      	; 0x1054 <__mulsf3+0x1c>
    1050:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
    1054:	0c 94 8f 08 	jmp	0x111e	; 0x111e <__fp_nan>
    1058:	11 24       	eor	r1, r1
    105a:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>

0000105e <__mulsf3x>:
    105e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fp_split3>
    1062:	70 f3       	brcs	.-36     	; 0x1040 <__mulsf3+0x8>

00001064 <__mulsf3_pse>:
    1064:	95 9f       	mul	r25, r21
    1066:	c1 f3       	breq	.-16     	; 0x1058 <__mulsf3+0x20>
    1068:	95 0f       	add	r25, r21
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	55 1f       	adc	r21, r21
    106e:	62 9f       	mul	r22, r18
    1070:	f0 01       	movw	r30, r0
    1072:	72 9f       	mul	r23, r18
    1074:	bb 27       	eor	r27, r27
    1076:	f0 0d       	add	r31, r0
    1078:	b1 1d       	adc	r27, r1
    107a:	63 9f       	mul	r22, r19
    107c:	aa 27       	eor	r26, r26
    107e:	f0 0d       	add	r31, r0
    1080:	b1 1d       	adc	r27, r1
    1082:	aa 1f       	adc	r26, r26
    1084:	64 9f       	mul	r22, r20
    1086:	66 27       	eor	r22, r22
    1088:	b0 0d       	add	r27, r0
    108a:	a1 1d       	adc	r26, r1
    108c:	66 1f       	adc	r22, r22
    108e:	82 9f       	mul	r24, r18
    1090:	22 27       	eor	r18, r18
    1092:	b0 0d       	add	r27, r0
    1094:	a1 1d       	adc	r26, r1
    1096:	62 1f       	adc	r22, r18
    1098:	73 9f       	mul	r23, r19
    109a:	b0 0d       	add	r27, r0
    109c:	a1 1d       	adc	r26, r1
    109e:	62 1f       	adc	r22, r18
    10a0:	83 9f       	mul	r24, r19
    10a2:	a0 0d       	add	r26, r0
    10a4:	61 1d       	adc	r22, r1
    10a6:	22 1f       	adc	r18, r18
    10a8:	74 9f       	mul	r23, r20
    10aa:	33 27       	eor	r19, r19
    10ac:	a0 0d       	add	r26, r0
    10ae:	61 1d       	adc	r22, r1
    10b0:	23 1f       	adc	r18, r19
    10b2:	84 9f       	mul	r24, r20
    10b4:	60 0d       	add	r22, r0
    10b6:	21 1d       	adc	r18, r1
    10b8:	82 2f       	mov	r24, r18
    10ba:	76 2f       	mov	r23, r22
    10bc:	6a 2f       	mov	r22, r26
    10be:	11 24       	eor	r1, r1
    10c0:	9f 57       	subi	r25, 0x7F	; 127
    10c2:	50 40       	sbci	r21, 0x00	; 0
    10c4:	9a f0       	brmi	.+38     	; 0x10ec <__mulsf3_pse+0x88>
    10c6:	f1 f0       	breq	.+60     	; 0x1104 <__mulsf3_pse+0xa0>
    10c8:	88 23       	and	r24, r24
    10ca:	4a f0       	brmi	.+18     	; 0x10de <__mulsf3_pse+0x7a>
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	bb 1f       	adc	r27, r27
    10d2:	66 1f       	adc	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	91 50       	subi	r25, 0x01	; 1
    10da:	50 40       	sbci	r21, 0x00	; 0
    10dc:	a9 f7       	brne	.-22     	; 0x10c8 <__mulsf3_pse+0x64>
    10de:	9e 3f       	cpi	r25, 0xFE	; 254
    10e0:	51 05       	cpc	r21, r1
    10e2:	80 f0       	brcs	.+32     	; 0x1104 <__mulsf3_pse+0xa0>
    10e4:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_inf>
    10e8:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>
    10ec:	5f 3f       	cpi	r21, 0xFF	; 255
    10ee:	e4 f3       	brlt	.-8      	; 0x10e8 <__mulsf3_pse+0x84>
    10f0:	98 3e       	cpi	r25, 0xE8	; 232
    10f2:	d4 f3       	brlt	.-12     	; 0x10e8 <__mulsf3_pse+0x84>
    10f4:	86 95       	lsr	r24
    10f6:	77 95       	ror	r23
    10f8:	67 95       	ror	r22
    10fa:	b7 95       	ror	r27
    10fc:	f7 95       	ror	r31
    10fe:	e7 95       	ror	r30
    1100:	9f 5f       	subi	r25, 0xFF	; 255
    1102:	c1 f7       	brne	.-16     	; 0x10f4 <__mulsf3_pse+0x90>
    1104:	fe 2b       	or	r31, r30
    1106:	88 0f       	add	r24, r24
    1108:	91 1d       	adc	r25, r1
    110a:	96 95       	lsr	r25
    110c:	87 95       	ror	r24
    110e:	97 f9       	bld	r25, 7
    1110:	08 95       	ret

00001112 <__fp_inf>:
    1112:	97 f9       	bld	r25, 7
    1114:	9f 67       	ori	r25, 0x7F	; 127
    1116:	80 e8       	ldi	r24, 0x80	; 128
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	08 95       	ret

0000111e <__fp_nan>:
    111e:	9f ef       	ldi	r25, 0xFF	; 255
    1120:	80 ec       	ldi	r24, 0xC0	; 192
    1122:	08 95       	ret

00001124 <__fp_pscA>:
    1124:	00 24       	eor	r0, r0
    1126:	0a 94       	dec	r0
    1128:	16 16       	cp	r1, r22
    112a:	17 06       	cpc	r1, r23
    112c:	18 06       	cpc	r1, r24
    112e:	09 06       	cpc	r0, r25
    1130:	08 95       	ret

00001132 <__fp_pscB>:
    1132:	00 24       	eor	r0, r0
    1134:	0a 94       	dec	r0
    1136:	12 16       	cp	r1, r18
    1138:	13 06       	cpc	r1, r19
    113a:	14 06       	cpc	r1, r20
    113c:	05 06       	cpc	r0, r21
    113e:	08 95       	ret

00001140 <__fp_round>:
    1140:	09 2e       	mov	r0, r25
    1142:	03 94       	inc	r0
    1144:	00 0c       	add	r0, r0
    1146:	11 f4       	brne	.+4      	; 0x114c <__fp_round+0xc>
    1148:	88 23       	and	r24, r24
    114a:	52 f0       	brmi	.+20     	; 0x1160 <__fp_round+0x20>
    114c:	bb 0f       	add	r27, r27
    114e:	40 f4       	brcc	.+16     	; 0x1160 <__fp_round+0x20>
    1150:	bf 2b       	or	r27, r31
    1152:	11 f4       	brne	.+4      	; 0x1158 <__fp_round+0x18>
    1154:	60 ff       	sbrs	r22, 0
    1156:	04 c0       	rjmp	.+8      	; 0x1160 <__fp_round+0x20>
    1158:	6f 5f       	subi	r22, 0xFF	; 255
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	8f 4f       	sbci	r24, 0xFF	; 255
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	08 95       	ret

00001162 <_exit>:
    1162:	f8 94       	cli

00001164 <__stop_program>:
    1164:	ff cf       	rjmp	.-2      	; 0x1164 <__stop_program>
