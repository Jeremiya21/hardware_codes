
BuZZ_Sam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000328  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003362  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027be  00000000  00000000  000037e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ae3  00000000  00000000  00005fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00006a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000161e  00000000  00000000  00006bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  00008216  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000833a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  a0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 cb 00 	call	0x196	; 0x196 <system_init>
  ac:	08 95       	ret

000000ae <buzz_Freq>:

void buzz_Freq(uint16_t freq)
{
	uint8_t count;
	
	count=CLK_FREQ/freq;
  ae:	9c 01       	movw	r18, r24
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	64 eb       	ldi	r22, 0xB4	; 180
  b6:	74 ec       	ldi	r23, 0xC4	; 196
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 ee 00 	call	0x1dc	; 0x1dc <__divmodsi4>
	TCB0.CCMPL=count;
  c0:	e0 e8       	ldi	r30, 0x80	; 128
  c2:	fa e0       	ldi	r31, 0x0A	; 10
  c4:	24 87       	std	Z+12, r18	; 0x0c
	TCB0.CCMPH=count/2;
  c6:	26 95       	lsr	r18
  c8:	25 87       	std	Z+13, r18	; 0x0d
  ca:	08 95       	ret

000000cc <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) 
	{
		buzz_Freq(20000);	//minimum value 1226 Hz
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	9e e4       	ldi	r25, 0x4E	; 78
  d4:	0e 94 57 00 	call	0xae	; 0xae <buzz_Freq>
  d8:	fb cf       	rjmp	.-10     	; 0xd0 <main+0x4>

000000da <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret

000000de <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  de:	4b e0       	ldi	r20, 0x0B	; 11
  e0:	68 ed       	ldi	r22, 0xD8	; 216
  e2:	81 e6       	ldi	r24, 0x61	; 97
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret

000000ee <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret

000000f2 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 c0       	rjmp	.+16     	; 0x106 <__EEPROM_REGION_LENGTH__+0x6>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  f6:	e8 2f       	mov	r30, r24
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	e0 5f       	subi	r30, 0xF0	; 240
  fc:	fb 4f       	sbci	r31, 0xFB	; 251
  fe:	90 81       	ld	r25, Z
 100:	98 60       	ori	r25, 0x08	; 8
 102:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	88 30       	cpi	r24, 0x08	; 8
 108:	b0 f3       	brcs	.-20     	; 0xf6 <mcu_init+0x4>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	08 c0       	rjmp	.+16     	; 0x11e <__EEPROM_REGION_LENGTH__+0x1e>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 10e:	e8 2f       	mov	r30, r24
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	e0 5d       	subi	r30, 0xD0	; 208
 114:	fb 4f       	sbci	r31, 0xFB	; 251
 116:	90 81       	ld	r25, Z
 118:	98 60       	ori	r25, 0x08	; 8
 11a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 11c:	8f 5f       	subi	r24, 0xFF	; 255
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	b0 f3       	brcs	.-20     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	08 c0       	rjmp	.+16     	; 0x136 <__EEPROM_REGION_LENGTH__+0x36>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 126:	e8 2f       	mov	r30, r24
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e0 5b       	subi	r30, 0xB0	; 176
 12c:	fb 4f       	sbci	r31, 0xFB	; 251
 12e:	90 81       	ld	r25, Z
 130:	98 60       	ori	r25, 0x08	; 8
 132:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	b0 f3       	brcs	.-20     	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 c0       	rjmp	.+16     	; 0x14e <__EEPROM_REGION_LENGTH__+0x4e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 13e:	e8 2f       	mov	r30, r24
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	e0 59       	subi	r30, 0x90	; 144
 144:	fb 4f       	sbci	r31, 0xFB	; 251
 146:	90 81       	ld	r25, Z
 148:	98 60       	ori	r25, 0x08	; 8
 14a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	b0 f3       	brcs	.-20     	; 0x13e <__EEPROM_REGION_LENGTH__+0x3e>
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	08 c0       	rjmp	.+16     	; 0x166 <__EEPROM_REGION_LENGTH__+0x66>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 156:	e8 2f       	mov	r30, r24
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	e0 57       	subi	r30, 0x70	; 112
 15c:	fb 4f       	sbci	r31, 0xFB	; 251
 15e:	90 81       	ld	r25, Z
 160:	98 60       	ori	r25, 0x08	; 8
 162:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	b0 f3       	brcs	.-20     	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	08 c0       	rjmp	.+16     	; 0x17e <__EEPROM_REGION_LENGTH__+0x7e>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 16e:	e8 2f       	mov	r30, r24
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e0 55       	subi	r30, 0x50	; 80
 174:	fb 4f       	sbci	r31, 0xFB	; 251
 176:	90 81       	ld	r25, Z
 178:	98 60       	ori	r25, 0x08	; 8
 17a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	b0 f3       	brcs	.-20     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 182:	08 95       	ret

00000184 <TIMER_0_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 184:	81 b1       	in	r24, 0x01	; 1
 186:	8b 7f       	andi	r24, 0xFB	; 251
 188:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 18a:	80 b1       	in	r24, 0x00	; 0
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	BUZZ_MCU_set_dir(PORT_DIR_OUT);

	TIMER_0_init();
 190:	0e 94 de 00 	call	0x1bc	; 0x1bc <TIMER_0_init>
 194:	08 95       	ret

00000196 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 196:	0e 94 79 00 	call	0xf2	; 0xf2 <mcu_init>

	CLKCTRL_init();
 19a:	0e 94 6f 00 	call	0xde	; 0xde <CLKCTRL_init>

	TIMER_0_initialization();
 19e:	0e 94 c2 00 	call	0x184	; 0x184 <TIMER_0_initialization>

	CPUINT_init();
 1a2:	0e 94 77 00 	call	0xee	; 0xee <CPUINT_init>

	SLPCTRL_init();
 1a6:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SLPCTRL_init>

	BOD_init();
 1aa:	0e 94 6d 00 	call	0xda	; 0xda <BOD_init>
 1ae:	08 95       	ret

000001b0 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1b0:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1b2:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1b4:	40 83       	st	Z, r20
	ret                             // Return to caller
 1b6:	08 95       	ret

000001b8 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	08 95       	ret

000001bc <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCB0.CCMP = 0xff; /* Compare or Capture: 0xff */
 1bc:	e0 e8       	ldi	r30, 0x80	; 128
 1be:	fa e0       	ldi	r31, 0x0A	; 10
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	84 87       	std	Z+12, r24	; 0x0c
 1c6:	95 87       	std	Z+13, r25	; 0x0d

	TCB0.CNT = 0x25; /* Count: 0x25 */
 1c8:	85 e2       	ldi	r24, 0x25	; 37
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	82 87       	std	Z+10, r24	; 0x0a
 1ce:	93 87       	std	Z+11, r25	; 0x0b

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 1d0:	87 e1       	ldi	r24, 0x17	; 23
 1d2:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB0.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */;

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc  /* CLK_PER (No Prescaling) */
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 83       	st	Z, r24
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	08 95       	ret

000001dc <__divmodsi4>:
 1dc:	05 2e       	mov	r0, r21
 1de:	97 fb       	bst	r25, 7
 1e0:	1e f4       	brtc	.+6      	; 0x1e8 <__divmodsi4+0xc>
 1e2:	00 94       	com	r0
 1e4:	0e 94 05 01 	call	0x20a	; 0x20a <__negsi2>
 1e8:	57 fd       	sbrc	r21, 7
 1ea:	07 d0       	rcall	.+14     	; 0x1fa <__divmodsi4_neg2>
 1ec:	0e 94 0d 01 	call	0x21a	; 0x21a <__udivmodsi4>
 1f0:	07 fc       	sbrc	r0, 7
 1f2:	03 d0       	rcall	.+6      	; 0x1fa <__divmodsi4_neg2>
 1f4:	4e f4       	brtc	.+18     	; 0x208 <__divmodsi4_exit>
 1f6:	0c 94 05 01 	jmp	0x20a	; 0x20a <__negsi2>

000001fa <__divmodsi4_neg2>:
 1fa:	50 95       	com	r21
 1fc:	40 95       	com	r20
 1fe:	30 95       	com	r19
 200:	21 95       	neg	r18
 202:	3f 4f       	sbci	r19, 0xFF	; 255
 204:	4f 4f       	sbci	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255

00000208 <__divmodsi4_exit>:
 208:	08 95       	ret

0000020a <__negsi2>:
 20a:	90 95       	com	r25
 20c:	80 95       	com	r24
 20e:	70 95       	com	r23
 210:	61 95       	neg	r22
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	8f 4f       	sbci	r24, 0xFF	; 255
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	08 95       	ret

0000021a <__udivmodsi4>:
 21a:	a1 e2       	ldi	r26, 0x21	; 33
 21c:	1a 2e       	mov	r1, r26
 21e:	aa 1b       	sub	r26, r26
 220:	bb 1b       	sub	r27, r27
 222:	fd 01       	movw	r30, r26
 224:	0d c0       	rjmp	.+26     	; 0x240 <__udivmodsi4_ep>

00000226 <__udivmodsi4_loop>:
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	ee 1f       	adc	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	a2 17       	cp	r26, r18
 230:	b3 07       	cpc	r27, r19
 232:	e4 07       	cpc	r30, r20
 234:	f5 07       	cpc	r31, r21
 236:	20 f0       	brcs	.+8      	; 0x240 <__udivmodsi4_ep>
 238:	a2 1b       	sub	r26, r18
 23a:	b3 0b       	sbc	r27, r19
 23c:	e4 0b       	sbc	r30, r20
 23e:	f5 0b       	sbc	r31, r21

00000240 <__udivmodsi4_ep>:
 240:	66 1f       	adc	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	88 1f       	adc	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	1a 94       	dec	r1
 24a:	69 f7       	brne	.-38     	; 0x226 <__udivmodsi4_loop>
 24c:	60 95       	com	r22
 24e:	70 95       	com	r23
 250:	80 95       	com	r24
 252:	90 95       	com	r25
 254:	9b 01       	movw	r18, r22
 256:	ac 01       	movw	r20, r24
 258:	bd 01       	movw	r22, r26
 25a:	cf 01       	movw	r24, r30
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
