
Question1_Sam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000077c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e8c  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000025f9  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000be0  00000000  00000000  00005e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  00006a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001363  00000000  00000000  00006e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000791  00000000  00000000  000081cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  0000895c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  a0:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 8a 03 	call	0x714	; 0x714 <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <PORTA_set_pin_level+0x6>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	88 23       	and	r24, r24
  ce:	a9 f0       	breq	.+42     	; 0xfa <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	68 2f       	mov	r22, r24
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	48 2f       	mov	r20, r24
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <PORTA_set_pin_level+0x32>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	4a 95       	dec	r20
  f0:	e2 f7       	brpl	.-8      	; 0xea <PORTA_set_pin_level+0x2e>
  f2:	86 2b       	or	r24, r22
  f4:	f9 01       	movw	r30, r18
  f6:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
  f8:	15 c0       	rjmp	.+42     	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	68 2f       	mov	r22, r24
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	48 2f       	mov	r20, r24
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	4a 95       	dec	r20
 11a:	e2 f7       	brpl	.-8      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 11c:	80 95       	com	r24
 11e:	86 23       	and	r24, r22
 120:	f9 01       	movw	r30, r18
 122:	81 83       	std	Z+1, r24	; 0x01
	}
}
 124:	00 00       	nop
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <PORTD_set_pin_level+0x6>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	88 23       	and	r24, r24
 142:	a9 f0       	breq	.+42     	; 0x16e <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2c e0       	ldi	r18, 0x0C	; 12
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	21 81       	ldd	r18, Z+1	; 0x01
 150:	62 2f       	mov	r22, r18
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	42 2f       	mov	r20, r18
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <PORTD_set_pin_level+0x32>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	4a 95       	dec	r20
 164:	e2 f7       	brpl	.-8      	; 0x15e <PORTD_set_pin_level+0x2e>
 166:	26 2b       	or	r18, r22
 168:	fc 01       	movw	r30, r24
 16a:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 16c:	15 c0       	rjmp	.+42     	; 0x198 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2c e0       	ldi	r18, 0x0C	; 12
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	21 81       	ldd	r18, Z+1	; 0x01
 17a:	62 2f       	mov	r22, r18
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	42 2f       	mov	r20, r18
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <PORTD_set_pin_level+0x5c>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	4a 95       	dec	r20
 18e:	e2 f7       	brpl	.-8      	; 0x188 <PORTD_set_pin_level+0x58>
 190:	20 95       	com	r18
 192:	26 23       	and	r18, r22
 194:	fc 01       	movw	r30, r24
 196:	21 83       	std	Z+1, r18	; 0x01
	}
}
 198:	00 00       	nop
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 1b0:	69 81       	ldd	r22, Y+1	; 0x01
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTA_set_pin_level>
}
 1b8:	00 00       	nop
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	1f 92       	push	r1
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 1ce:	69 81       	ldd	r22, Y+1	; 0x01
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 1d6:	00 00       	nop
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	1f 92       	push	r1
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 1ec:	69 81       	ldd	r22, Y+1	; 0x01
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 1f4:	00 00       	nop
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	1f 92       	push	r1
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 20a:	69 81       	ldd	r22, Y+1	; 0x01
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 212:	00 00       	nop
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <LedOnFunction>:
 *  Author: samsunny
 */ 
#include "LedOnFunction.h"

void LedOnFunction(bool R,bool G, bool B, bool W)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	00 d0       	rcall	.+0      	; 0x222 <LedOnFunction+0x6>
 222:	00 d0       	rcall	.+0      	; 0x224 <LedOnFunction+0x8>
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	6a 83       	std	Y+2, r22	; 0x02
 22c:	4b 83       	std	Y+3, r20	; 0x03
 22e:	2c 83       	std	Y+4, r18	; 0x04
	R0_MCU_set_level(R);
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <R0_MCU_set_level>
	G0_MCU_set_level(G);
 236:	8a 81       	ldd	r24, Y+2	; 0x02
 238:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <G0_MCU_set_level>
	B0_MCU_set_level(B);
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <B0_MCU_set_level>
	W0_MCU_set_level(W);
 242:	8c 81       	ldd	r24, Y+4	; 0x04
 244:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <W0_MCU_set_level>
 248:	00 00       	nop
 24a:	24 96       	adiw	r28, 0x04	; 4
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	de bf       	out	0x3e, r29	; 62
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <main>:

#include "LedOnFunction.h"
int main(void)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	00 d0       	rcall	.+0      	; 0x25c <main+0x6>
 25c:	00 d0       	rcall	.+0      	; 0x25e <main+0x8>
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 262:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	bool R,G,B,W;
	R=true;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	89 83       	std	Y+1, r24	; 0x01
	G=false;
 26a:	1a 82       	std	Y+2, r1	; 0x02
	B=false;
 26c:	1b 82       	std	Y+3, r1	; 0x03
	W=false;
 26e:	1c 82       	std	Y+4, r1	; 0x04
	
	LedOnFunction(R,G,B,W);
 270:	2c 81       	ldd	r18, Y+4	; 0x04
 272:	4b 81       	ldd	r20, Y+3	; 0x03
 274:	6a 81       	ldd	r22, Y+2	; 0x02
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	0e 94 0e 01 	call	0x21c	; 0x21c <LedOnFunction>
	
	return 0;
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
	
}
 280:	24 96       	adiw	r28, 0x04	; 4
 282:	cd bf       	out	0x3d, r28	; 61
 284:	de bf       	out	0x3e, r29	; 62
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 294:	80 e0       	ldi	r24, 0x00	; 0
}
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <PORTA_set_pin_dir+0x6>
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	88 2f       	mov	r24, r24
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	91 05       	cpc	r25, r1
 2d4:	e1 f0       	breq	.+56     	; 0x30e <PORTA_set_pin_dir+0x52>
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	91 05       	cpc	r25, r1
 2da:	71 f1       	breq	.+92     	; 0x338 <PORTA_set_pin_dir+0x7c>
 2dc:	89 2b       	or	r24, r25
 2de:	09 f0       	breq	.+2      	; 0x2e2 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 2e0:	3b c0       	rjmp	.+118    	; 0x358 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	fc 01       	movw	r30, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	68 2f       	mov	r22, r24
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	48 2f       	mov	r20, r24
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <PORTA_set_pin_dir+0x44>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	4a 95       	dec	r20
 302:	e2 f7       	brpl	.-8      	; 0x2fc <PORTA_set_pin_dir+0x40>
 304:	80 95       	com	r24
 306:	86 23       	and	r24, r22
 308:	f9 01       	movw	r30, r18
 30a:	80 83       	st	Z, r24
		break;
 30c:	25 c0       	rjmp	.+74     	; 0x358 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	68 2f       	mov	r22, r24
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	48 2f       	mov	r20, r24
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <PORTA_set_pin_dir+0x70>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	4a 95       	dec	r20
 32e:	e2 f7       	brpl	.-8      	; 0x328 <PORTA_set_pin_dir+0x6c>
 330:	86 2b       	or	r24, r22
 332:	f9 01       	movw	r30, r18
 334:	80 83       	st	Z, r24
		break;
 336:	10 c0       	rjmp	.+32     	; 0x358 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 2f       	mov	r24, r24
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	80 5f       	subi	r24, 0xF0	; 240
 340:	9b 4f       	sbci	r25, 0xFB	; 251
 342:	29 81       	ldd	r18, Y+1	; 0x01
 344:	22 2f       	mov	r18, r18
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	20 5f       	subi	r18, 0xF0	; 240
 34a:	3b 4f       	sbci	r19, 0xFB	; 251
 34c:	f9 01       	movw	r30, r18
 34e:	20 81       	ld	r18, Z
 350:	28 60       	ori	r18, 0x08	; 8
 352:	fc 01       	movw	r30, r24
 354:	20 83       	st	Z, r18
		break;
 356:	00 00       	nop
	default:
		break;
	}
}
 358:	00 00       	nop
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	00 d0       	rcall	.+0      	; 0x36a <PORTA_set_pin_level+0x6>
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	88 23       	and	r24, r24
 376:	a9 f0       	breq	.+42     	; 0x3a2 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	fc 01       	movw	r30, r24
 382:	81 81       	ldd	r24, Z+1	; 0x01
 384:	68 2f       	mov	r22, r24
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	48 2f       	mov	r20, r24
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <PORTA_set_pin_level+0x32>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	4a 95       	dec	r20
 398:	e2 f7       	brpl	.-8      	; 0x392 <PORTA_set_pin_level+0x2e>
 39a:	86 2b       	or	r24, r22
 39c:	f9 01       	movw	r30, r18
 39e:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 3a0:	15 c0       	rjmp	.+42     	; 0x3cc <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	fc 01       	movw	r30, r24
 3ac:	81 81       	ldd	r24, Z+1	; 0x01
 3ae:	68 2f       	mov	r22, r24
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	48 2f       	mov	r20, r24
 3b4:	50 e0       	ldi	r21, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <PORTA_set_pin_level+0x5c>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	4a 95       	dec	r20
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <PORTA_set_pin_level+0x58>
 3c4:	80 95       	com	r24
 3c6:	86 23       	and	r24, r22
 3c8:	f9 01       	movw	r30, r18
 3ca:	81 83       	std	Z+1, r24	; 0x01
	}
}
 3cc:	00 00       	nop
 3ce:	0f 90       	pop	r0
 3d0:	0f 90       	pop	r0
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	00 d0       	rcall	.+0      	; 0x3de <PORTD_set_pin_dir+0x6>
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	89 83       	std	Y+1, r24	; 0x01
 3e4:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	91 05       	cpc	r25, r1
 3f0:	e1 f0       	breq	.+56     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	91 05       	cpc	r25, r1
 3f6:	71 f1       	breq	.+92     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 3f8:	89 2b       	or	r24, r25
 3fa:	09 f0       	breq	.+2      	; 0x3fe <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 3fc:	3b c0       	rjmp	.+118    	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
 3fe:	8c e0       	ldi	r24, 0x0C	; 12
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	2c e0       	ldi	r18, 0x0C	; 12
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	62 2f       	mov	r22, r18
 40c:	29 81       	ldd	r18, Y+1	; 0x01
 40e:	42 2f       	mov	r20, r18
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	22 0f       	add	r18, r18
 41a:	33 1f       	adc	r19, r19
 41c:	4a 95       	dec	r20
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	20 95       	com	r18
 422:	26 23       	and	r18, r22
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18
		break;
 428:	25 c0       	rjmp	.+74     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 42a:	8c e0       	ldi	r24, 0x0C	; 12
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	2c e0       	ldi	r18, 0x0C	; 12
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	f9 01       	movw	r30, r18
 434:	20 81       	ld	r18, Z
 436:	62 2f       	mov	r22, r18
 438:	29 81       	ldd	r18, Y+1	; 0x01
 43a:	42 2f       	mov	r20, r18
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 444:	22 0f       	add	r18, r18
 446:	33 1f       	adc	r19, r19
 448:	4a 95       	dec	r20
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	26 2b       	or	r18, r22
 44e:	fc 01       	movw	r30, r24
 450:	20 83       	st	Z, r18
		break;
 452:	10 c0       	rjmp	.+32     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	80 59       	subi	r24, 0x90	; 144
 45c:	9b 4f       	sbci	r25, 0xFB	; 251
 45e:	29 81       	ldd	r18, Y+1	; 0x01
 460:	22 2f       	mov	r18, r18
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	20 59       	subi	r18, 0x90	; 144
 466:	3b 4f       	sbci	r19, 0xFB	; 251
 468:	f9 01       	movw	r30, r18
 46a:	20 81       	ld	r18, Z
 46c:	28 60       	ori	r18, 0x08	; 8
 46e:	fc 01       	movw	r30, r24
 470:	20 83       	st	Z, r18
		break;
 472:	00 00       	nop
	default:
		break;
	}
}
 474:	00 00       	nop
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	00 d0       	rcall	.+0      	; 0x486 <PORTD_set_pin_level+0x6>
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	89 83       	std	Y+1, r24	; 0x01
 48c:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	88 23       	and	r24, r24
 492:	a9 f0       	breq	.+42     	; 0x4be <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 494:	8c e0       	ldi	r24, 0x0C	; 12
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2c e0       	ldi	r18, 0x0C	; 12
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	f9 01       	movw	r30, r18
 49e:	21 81       	ldd	r18, Z+1	; 0x01
 4a0:	62 2f       	mov	r22, r18
 4a2:	29 81       	ldd	r18, Y+1	; 0x01
 4a4:	42 2f       	mov	r20, r18
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <PORTD_set_pin_level+0x32>
 4ae:	22 0f       	add	r18, r18
 4b0:	33 1f       	adc	r19, r19
 4b2:	4a 95       	dec	r20
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <PORTD_set_pin_level+0x2e>
 4b6:	26 2b       	or	r18, r22
 4b8:	fc 01       	movw	r30, r24
 4ba:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 4bc:	15 c0       	rjmp	.+42     	; 0x4e8 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 4be:	8c e0       	ldi	r24, 0x0C	; 12
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	2c e0       	ldi	r18, 0x0C	; 12
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	f9 01       	movw	r30, r18
 4c8:	21 81       	ldd	r18, Z+1	; 0x01
 4ca:	62 2f       	mov	r22, r18
 4cc:	29 81       	ldd	r18, Y+1	; 0x01
 4ce:	42 2f       	mov	r20, r18
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	21 e0       	ldi	r18, 0x01	; 1
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <PORTD_set_pin_level+0x5c>
 4d8:	22 0f       	add	r18, r18
 4da:	33 1f       	adc	r19, r19
 4dc:	4a 95       	dec	r20
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <PORTD_set_pin_level+0x58>
 4e0:	20 95       	com	r18
 4e2:	26 23       	and	r18, r22
 4e4:	fc 01       	movw	r30, r24
 4e6:	21 83       	std	Z+1, r18	; 0x01
	}
}
 4e8:	00 00       	nop
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	1f 92       	push	r1
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
 500:	69 81       	ldd	r22, Y+1	; 0x01
 502:	83 e0       	ldi	r24, 0x03	; 3
 504:	0e 94 5e 01 	call	0x2bc	; 0x2bc <PORTA_set_pin_dir>
}
 508:	00 00       	nop
 50a:	0f 90       	pop	r0
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	1f 92       	push	r1
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 51e:	69 81       	ldd	r22, Y+1	; 0x01
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	0e 94 b2 01 	call	0x364	; 0x364 <PORTA_set_pin_level>
}
 526:	00 00       	nop
 528:	0f 90       	pop	r0
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	08 95       	ret

00000530 <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	1f 92       	push	r1
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
 53c:	69 81       	ldd	r22, Y+1	; 0x01
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <PORTD_set_pin_dir>
}
 544:	00 00       	nop
 546:	0f 90       	pop	r0
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	1f 92       	push	r1
 554:	cd b7       	in	r28, 0x3d	; 61
 556:	de b7       	in	r29, 0x3e	; 62
 558:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 55a:	69 81       	ldd	r22, Y+1	; 0x01
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 40 02 	call	0x480	; 0x480 <PORTD_set_pin_level>
}
 562:	00 00       	nop
 564:	0f 90       	pop	r0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	1f 92       	push	r1
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
 578:	69 81       	ldd	r22, Y+1	; 0x01
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <PORTD_set_pin_dir>
}
 580:	00 00       	nop
 582:	0f 90       	pop	r0
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 58a:	cf 93       	push	r28
 58c:	df 93       	push	r29
 58e:	1f 92       	push	r1
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
 594:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 596:	69 81       	ldd	r22, Y+1	; 0x01
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 40 02 	call	0x480	; 0x480 <PORTD_set_pin_level>
}
 59e:	00 00       	nop
 5a0:	0f 90       	pop	r0
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	1f 92       	push	r1
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
 5b4:	69 81       	ldd	r22, Y+1	; 0x01
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <PORTD_set_pin_dir>
}
 5bc:	00 00       	nop
 5be:	0f 90       	pop	r0
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	1f 92       	push	r1
 5cc:	cd b7       	in	r28, 0x3d	; 61
 5ce:	de b7       	in	r29, 0x3e	; 62
 5d0:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 5d2:	69 81       	ldd	r22, Y+1	; 0x01
 5d4:	82 e0       	ldi	r24, 0x02	; 2
 5d6:	0e 94 40 02 	call	0x480	; 0x480 <PORTD_set_pin_level>
}
 5da:	00 00       	nop
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
 5ec:	26 97       	sbiw	r28, 0x06	; 6
 5ee:	cd bf       	out	0x3d, r28	; 61
 5f0:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 5f2:	19 82       	std	Y+1, r1	; 0x01
 5f4:	12 c0       	rjmp	.+36     	; 0x61a <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	88 2f       	mov	r24, r24
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	80 5f       	subi	r24, 0xF0	; 240
 5fe:	9b 4f       	sbci	r25, 0xFB	; 251
 600:	29 81       	ldd	r18, Y+1	; 0x01
 602:	22 2f       	mov	r18, r18
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	20 5f       	subi	r18, 0xF0	; 240
 608:	3b 4f       	sbci	r19, 0xFB	; 251
 60a:	f9 01       	movw	r30, r18
 60c:	20 81       	ld	r18, Z
 60e:	28 60       	ori	r18, 0x08	; 8
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	8f 5f       	subi	r24, 0xFF	; 255
 618:	89 83       	std	Y+1, r24	; 0x01
 61a:	89 81       	ldd	r24, Y+1	; 0x01
 61c:	88 30       	cpi	r24, 0x08	; 8
 61e:	58 f3       	brcs	.-42     	; 0x5f6 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 620:	1a 82       	std	Y+2, r1	; 0x02
 622:	12 c0       	rjmp	.+36     	; 0x648 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 624:	8a 81       	ldd	r24, Y+2	; 0x02
 626:	88 2f       	mov	r24, r24
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	80 5d       	subi	r24, 0xD0	; 208
 62c:	9b 4f       	sbci	r25, 0xFB	; 251
 62e:	2a 81       	ldd	r18, Y+2	; 0x02
 630:	22 2f       	mov	r18, r18
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	20 5d       	subi	r18, 0xD0	; 208
 636:	3b 4f       	sbci	r19, 0xFB	; 251
 638:	f9 01       	movw	r30, r18
 63a:	20 81       	ld	r18, Z
 63c:	28 60       	ori	r18, 0x08	; 8
 63e:	fc 01       	movw	r30, r24
 640:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	8f 5f       	subi	r24, 0xFF	; 255
 646:	8a 83       	std	Y+2, r24	; 0x02
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	88 30       	cpi	r24, 0x08	; 8
 64c:	58 f3       	brcs	.-42     	; 0x624 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 64e:	1b 82       	std	Y+3, r1	; 0x03
 650:	12 c0       	rjmp	.+36     	; 0x676 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 652:	8b 81       	ldd	r24, Y+3	; 0x03
 654:	88 2f       	mov	r24, r24
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	80 5b       	subi	r24, 0xB0	; 176
 65a:	9b 4f       	sbci	r25, 0xFB	; 251
 65c:	2b 81       	ldd	r18, Y+3	; 0x03
 65e:	22 2f       	mov	r18, r18
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	20 5b       	subi	r18, 0xB0	; 176
 664:	3b 4f       	sbci	r19, 0xFB	; 251
 666:	f9 01       	movw	r30, r18
 668:	20 81       	ld	r18, Z
 66a:	28 60       	ori	r18, 0x08	; 8
 66c:	fc 01       	movw	r30, r24
 66e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 670:	8b 81       	ldd	r24, Y+3	; 0x03
 672:	8f 5f       	subi	r24, 0xFF	; 255
 674:	8b 83       	std	Y+3, r24	; 0x03
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	88 30       	cpi	r24, 0x08	; 8
 67a:	58 f3       	brcs	.-42     	; 0x652 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 67c:	1c 82       	std	Y+4, r1	; 0x04
 67e:	12 c0       	rjmp	.+36     	; 0x6a4 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 680:	8c 81       	ldd	r24, Y+4	; 0x04
 682:	88 2f       	mov	r24, r24
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	80 59       	subi	r24, 0x90	; 144
 688:	9b 4f       	sbci	r25, 0xFB	; 251
 68a:	2c 81       	ldd	r18, Y+4	; 0x04
 68c:	22 2f       	mov	r18, r18
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	20 59       	subi	r18, 0x90	; 144
 692:	3b 4f       	sbci	r19, 0xFB	; 251
 694:	f9 01       	movw	r30, r18
 696:	20 81       	ld	r18, Z
 698:	28 60       	ori	r18, 0x08	; 8
 69a:	fc 01       	movw	r30, r24
 69c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 69e:	8c 81       	ldd	r24, Y+4	; 0x04
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	8c 83       	std	Y+4, r24	; 0x04
 6a4:	8c 81       	ldd	r24, Y+4	; 0x04
 6a6:	88 30       	cpi	r24, 0x08	; 8
 6a8:	58 f3       	brcs	.-42     	; 0x680 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 6aa:	1d 82       	std	Y+5, r1	; 0x05
 6ac:	12 c0       	rjmp	.+36     	; 0x6d2 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 6ae:	8d 81       	ldd	r24, Y+5	; 0x05
 6b0:	88 2f       	mov	r24, r24
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	80 57       	subi	r24, 0x70	; 112
 6b6:	9b 4f       	sbci	r25, 0xFB	; 251
 6b8:	2d 81       	ldd	r18, Y+5	; 0x05
 6ba:	22 2f       	mov	r18, r18
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	20 57       	subi	r18, 0x70	; 112
 6c0:	3b 4f       	sbci	r19, 0xFB	; 251
 6c2:	f9 01       	movw	r30, r18
 6c4:	20 81       	ld	r18, Z
 6c6:	28 60       	ori	r18, 0x08	; 8
 6c8:	fc 01       	movw	r30, r24
 6ca:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 6cc:	8d 81       	ldd	r24, Y+5	; 0x05
 6ce:	8f 5f       	subi	r24, 0xFF	; 255
 6d0:	8d 83       	std	Y+5, r24	; 0x05
 6d2:	8d 81       	ldd	r24, Y+5	; 0x05
 6d4:	88 30       	cpi	r24, 0x08	; 8
 6d6:	58 f3       	brcs	.-42     	; 0x6ae <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 6d8:	1e 82       	std	Y+6, r1	; 0x06
 6da:	12 c0       	rjmp	.+36     	; 0x700 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 6dc:	8e 81       	ldd	r24, Y+6	; 0x06
 6de:	88 2f       	mov	r24, r24
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	80 55       	subi	r24, 0x50	; 80
 6e4:	9b 4f       	sbci	r25, 0xFB	; 251
 6e6:	2e 81       	ldd	r18, Y+6	; 0x06
 6e8:	22 2f       	mov	r18, r18
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	20 55       	subi	r18, 0x50	; 80
 6ee:	3b 4f       	sbci	r19, 0xFB	; 251
 6f0:	f9 01       	movw	r30, r18
 6f2:	20 81       	ld	r18, Z
 6f4:	28 60       	ori	r18, 0x08	; 8
 6f6:	fc 01       	movw	r30, r24
 6f8:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 6fa:	8e 81       	ldd	r24, Y+6	; 0x06
 6fc:	8f 5f       	subi	r24, 0xFF	; 255
 6fe:	8e 83       	std	Y+6, r24	; 0x06
 700:	8e 81       	ldd	r24, Y+6	; 0x06
 702:	88 30       	cpi	r24, 0x08	; 8
 704:	58 f3       	brcs	.-42     	; 0x6dc <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 706:	00 00       	nop
 708:	26 96       	adiw	r28, 0x06	; 6
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 71c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	0e 94 89 02 	call	0x512	; 0x512 <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	0e 94 a7 02 	call	0x54e	; 0x54e <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	0e 94 98 02 	call	0x530	; 0x530 <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	0e 94 c5 02 	call	0x58a	; 0x58a <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	0e 94 b6 02 	call	0x56c	; 0x56c <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <B0_MCU_set_dir>

	CLKCTRL_init();
 750:	0e 94 4e 01 	call	0x29c	; 0x29c <CLKCTRL_init>

	CPUINT_init();
 754:	0e 94 56 01 	call	0x2ac	; 0x2ac <CPUINT_init>

	SLPCTRL_init();
 758:	0e 94 b4 03 	call	0x768	; 0x768 <SLPCTRL_init>

	BOD_init();
 75c:	0e 94 46 01 	call	0x28c	; 0x28c <BOD_init>
}
 760:	00 00       	nop
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 768:	cf 93       	push	r28
 76a:	df 93       	push	r29
 76c:	cd b7       	in	r28, 0x3d	; 61
 76e:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 770:	80 e0       	ldi	r24, 0x00	; 0
}
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	08 95       	ret

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
