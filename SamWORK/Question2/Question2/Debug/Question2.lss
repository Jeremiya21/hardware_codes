
Question2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000002a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000318  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004344  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028e6  00000000  00000000  000047ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cb8  00000000  00000000  000070d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00007d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000194d  00000000  00000000  00007f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d3  00000000  00000000  000098a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00009a74  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  a0:	0c 94 27 01 	jmp	0x24e	; 0x24e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 ed 00 	call	0x1da	; 0x1da <system_init>
  ac:	08 95       	ret

000000ae <Led_Combo>:

#include "Led_Combo.h"

void Led_Combo(uint8_t red,uint8_t green,uint8_t blue)
{
	TCA0.SPLIT.HCMP0=red;
  ae:	80 93 29 0a 	sts	0x0A29, r24	; 0x800a29 <__TEXT_REGION_LENGTH__+0x7f4a29>
	TCB0.CCMPL=255;
  b2:	a0 e8       	ldi	r26, 0x80	; 128
  b4:	ba e0       	ldi	r27, 0x0A	; 10
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	1c 96       	adiw	r26, 0x0c	; 12
  ba:	8c 93       	st	X, r24
  bc:	1c 97       	sbiw	r26, 0x0c	; 12
	TCB1.CCMPL=255;
  be:	e0 e9       	ldi	r30, 0x90	; 144
  c0:	fa e0       	ldi	r31, 0x0A	; 10
  c2:	84 87       	std	Z+12, r24	; 0x0c
	TCB0.CCMPH=green;
  c4:	1d 96       	adiw	r26, 0x0d	; 13
  c6:	6c 93       	st	X, r22
	TCB1.CCMPH=blue;		
  c8:	45 87       	std	Z+13, r20	; 0x0d
  ca:	08 95       	ret

000000cc <main>:
#include "Led_Combo.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) 
	{
		Led_Combo(10,20,30);	// (R,G,B)
  d0:	4e e1       	ldi	r20, 0x1E	; 30
  d2:	64 e1       	ldi	r22, 0x14	; 20
  d4:	8a e0       	ldi	r24, 0x0A	; 10
  d6:	0e 94 57 00 	call	0xae	; 0xae <Led_Combo>
  da:	fa cf       	rjmp	.-12     	; 0xd0 <main+0x4>

000000dc <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret

000000e0 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  e0:	40 e1       	ldi	r20, 0x10	; 16
  e2:	68 ed       	ldi	r22, 0xD8	; 216
  e4:	81 e6       	ldi	r24, 0x61	; 97
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret

000000f0 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	08 95       	ret

000000f4 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 c0       	rjmp	.+16     	; 0x108 <__EEPROM_REGION_LENGTH__+0x8>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  f8:	e8 2f       	mov	r30, r24
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	e0 5f       	subi	r30, 0xF0	; 240
  fe:	fb 4f       	sbci	r31, 0xFB	; 251
 100:	90 81       	ld	r25, Z
 102:	98 60       	ori	r25, 0x08	; 8
 104:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	b0 f3       	brcs	.-20     	; 0xf8 <mcu_init+0x4>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 c0       	rjmp	.+16     	; 0x120 <__EEPROM_REGION_LENGTH__+0x20>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 110:	e8 2f       	mov	r30, r24
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	e0 5d       	subi	r30, 0xD0	; 208
 116:	fb 4f       	sbci	r31, 0xFB	; 251
 118:	90 81       	ld	r25, Z
 11a:	98 60       	ori	r25, 0x08	; 8
 11c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	88 30       	cpi	r24, 0x08	; 8
 122:	b0 f3       	brcs	.-20     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 c0       	rjmp	.+16     	; 0x138 <__EEPROM_REGION_LENGTH__+0x38>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 128:	e8 2f       	mov	r30, r24
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e0 5b       	subi	r30, 0xB0	; 176
 12e:	fb 4f       	sbci	r31, 0xFB	; 251
 130:	90 81       	ld	r25, Z
 132:	98 60       	ori	r25, 0x08	; 8
 134:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	b0 f3       	brcs	.-20     	; 0x128 <__EEPROM_REGION_LENGTH__+0x28>
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	08 c0       	rjmp	.+16     	; 0x150 <__EEPROM_REGION_LENGTH__+0x50>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 140:	e8 2f       	mov	r30, r24
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e0 59       	subi	r30, 0x90	; 144
 146:	fb 4f       	sbci	r31, 0xFB	; 251
 148:	90 81       	ld	r25, Z
 14a:	98 60       	ori	r25, 0x08	; 8
 14c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 14e:	8f 5f       	subi	r24, 0xFF	; 255
 150:	88 30       	cpi	r24, 0x08	; 8
 152:	b0 f3       	brcs	.-20     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 c0       	rjmp	.+16     	; 0x168 <__EEPROM_REGION_LENGTH__+0x68>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 158:	e8 2f       	mov	r30, r24
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e0 57       	subi	r30, 0x70	; 112
 15e:	fb 4f       	sbci	r31, 0xFB	; 251
 160:	90 81       	ld	r25, Z
 162:	98 60       	ori	r25, 0x08	; 8
 164:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	88 30       	cpi	r24, 0x08	; 8
 16a:	b0 f3       	brcs	.-20     	; 0x158 <__EEPROM_REGION_LENGTH__+0x58>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 c0       	rjmp	.+16     	; 0x180 <__EEPROM_REGION_LENGTH__+0x80>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 170:	e8 2f       	mov	r30, r24
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	e0 55       	subi	r30, 0x50	; 80
 176:	fb 4f       	sbci	r31, 0xFB	; 251
 178:	90 81       	ld	r25, Z
 17a:	98 60       	ori	r25, 0x08	; 8
 17c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	88 30       	cpi	r24, 0x08	; 8
 182:	b0 f3       	brcs	.-20     	; 0x170 <__EEPROM_REGION_LENGTH__+0x70>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 184:	08 95       	ret

00000186 <TIMER_0_initialization>:
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 186:	85 b3       	in	r24, 0x15	; 21
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 18c:	84 b3       	in	r24, 0x14	; 20
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	84 bb       	out	0x14, r24	; 20

	R3_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA02_bm);
 192:	e0 ee       	ldi	r30, 0xE0	; 224
 194:	f5 e0       	ldi	r31, 0x05	; 5
 196:	84 81       	ldd	r24, Z+4	; 0x04
 198:	85 60       	ori	r24, 0x05	; 5
 19a:	84 83       	std	Z+4, r24	; 0x04

	TIMER_0_init();
 19c:	0e 94 04 01 	call	0x208	; 0x208 <TIMER_0_init>
 1a0:	08 95       	ret

000001a2 <TIMER_1_initialization>:
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 1a2:	85 b3       	in	r24, 0x15	; 21
 1a4:	8f 7e       	andi	r24, 0xEF	; 239
 1a6:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 1a8:	84 b3       	in	r24, 0x14	; 20
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	84 bb       	out	0x14, r24	; 20

	G3_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCBROUTEA |= PORTMUX_TCB0_bm;
 1ae:	e0 ee       	ldi	r30, 0xE0	; 224
 1b0:	f5 e0       	ldi	r31, 0x05	; 5
 1b2:	85 81       	ldd	r24, Z+5	; 0x05
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	85 83       	std	Z+5, r24	; 0x05

	TIMER_1_init();
 1b8:	0e 94 0f 01 	call	0x21e	; 0x21e <TIMER_1_init>
 1bc:	08 95       	ret

000001be <TIMER_2_initialization>:
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 1be:	85 b3       	in	r24, 0x15	; 21
 1c0:	8f 7d       	andi	r24, 0xDF	; 223
 1c2:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 1c4:	84 b3       	in	r24, 0x14	; 20
 1c6:	80 62       	ori	r24, 0x20	; 32
 1c8:	84 bb       	out	0x14, r24	; 20

	B3_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCBROUTEA |= PORTMUX_TCB1_bm;
 1ca:	e0 ee       	ldi	r30, 0xE0	; 224
 1cc:	f5 e0       	ldi	r31, 0x05	; 5
 1ce:	85 81       	ldd	r24, Z+5	; 0x05
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	85 83       	std	Z+5, r24	; 0x05

	TIMER_2_init();
 1d4:	0e 94 1b 01 	call	0x236	; 0x236 <TIMER_2_init>
 1d8:	08 95       	ret

000001da <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1da:	0e 94 7a 00 	call	0xf4	; 0xf4 <mcu_init>

	CLKCTRL_init();
 1de:	0e 94 70 00 	call	0xe0	; 0xe0 <CLKCTRL_init>

	TIMER_0_initialization();
 1e2:	0e 94 c3 00 	call	0x186	; 0x186 <TIMER_0_initialization>

	TIMER_1_initialization();
 1e6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TIMER_1_initialization>

	TIMER_2_initialization();
 1ea:	0e 94 df 00 	call	0x1be	; 0x1be <TIMER_2_initialization>

	CPUINT_init();
 1ee:	0e 94 78 00 	call	0xf0	; 0xf0 <CPUINT_init>

	SLPCTRL_init();
 1f2:	0e 94 02 01 	call	0x204	; 0x204 <SLPCTRL_init>

	BOD_init();
 1f6:	0e 94 6e 00 	call	0xdc	; 0xdc <BOD_init>
 1fa:	08 95       	ret

000001fc <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1fc:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1fe:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 200:	40 83       	st	Z, r20
	ret                             // Return to caller
 202:	08 95       	ret

00000204 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret

00000208 <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCA0.SPLIT.CTRLD = 1 << TCA_SPLIT_SPLITM_bp /* Split Mode : enabled */;
 208:	e0 e0       	ldi	r30, 0x00	; 0
 20a:	fa e0       	ldi	r31, 0x0A	; 10
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	83 83       	std	Z+3, r24	; 0x03

	TCA0.SPLIT.CTRLB = 1 << TCA_SPLIT_HCMP0EN_bp    /* High Compare 0 Enable: enabled */
 210:	90 e1       	ldi	r25, 0x10	; 16
 212:	91 83       	std	Z+1, r25	; 0x01
	//		 | 0 << TCA_SPLIT_HCMP2OV_bp /* High Compare 2 Output Value: disabled */
	//		 | 0 << TCA_SPLIT_LCMP0OV_bp /* Low Compare 0 Output Value: disabled */
	//		 | 0 << TCA_SPLIT_LCMP1OV_bp /* Low Compare 1 Output Value: disabled */
	//		 | 0 << TCA_SPLIT_LCMP2OV_bp; /* Low Compare 2 Output Value: disabled */

	TCA0.SPLIT.HCMP0 = 0xff; /* Compare value of channel 0: 0xff */
 214:	9f ef       	ldi	r25, 0xFF	; 255
 216:	91 a7       	std	Z+41, r25	; 0x29

	// TCA0.SPLIT.LPER = 0xff; /*  Low-byte Timer Period Register: 0xff */

	// TCA0.SPLIT.DBGCTRL = 0 << TCA_SPLIT_DBGRUN_bp; /* Debug Run: disabled */

	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc    /* System Clock */
 218:	80 83       	st	Z, r24
	                   | 1 << TCA_SPLIT_ENABLE_bp; /* Module Enable: enabled */

	return 0;
}
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	08 95       	ret

0000021e <TIMER_1_init>:
 * \return Initialization status.
 */
int8_t TIMER_1_init()
{

	TCB0.CCMP = 0xff; /* Compare or Capture: 0xff */
 21e:	e0 e8       	ldi	r30, 0x80	; 128
 220:	fa e0       	ldi	r31, 0x0A	; 10
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	84 87       	std	Z+12, r24	; 0x0c
 228:	95 87       	std	Z+13, r25	; 0x0d

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 22a:	87 e1       	ldi	r24, 0x17	; 23
 22c:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB0.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */;

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc  /* CLK_PER (No Prescaling) */
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
}
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret

00000236 <TIMER_2_init>:
 * \return Initialization status.
 */
int8_t TIMER_2_init()
{

	TCB1.CCMP = 0xff; /* Compare or Capture: 0xff */
 236:	e0 e9       	ldi	r30, 0x90	; 144
 238:	fa e0       	ldi	r31, 0x0A	; 10
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	84 87       	std	Z+12, r24	; 0x0c
 240:	95 87       	std	Z+13, r25	; 0x0d

	// TCB1.CNT = 0x0; /* Count: 0x0 */

	TCB1.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 242:	87 e1       	ldi	r24, 0x17	; 23
 244:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB1.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */;

	TCB1.CTRLA = TCB_CLKSEL_CLKDIV1_gc  /* CLK_PER (No Prescaling) */
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	80 83       	st	Z, r24
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
}
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
