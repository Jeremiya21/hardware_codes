
Question2_Sam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f88  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003151  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000026ce  00000000  00000000  0000433d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e1b  00000000  00000000  00006a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000438  00000000  00000000  00007828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013ca  00000000  00000000  00007c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c4  00000000  00000000  0000902a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000138  00000000  00000000  000097ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <main>
  a0:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 c6 05 	call	0xb8c	; 0xb8c <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <PORTA_set_pin_level+0x6>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	88 23       	and	r24, r24
  ce:	a9 f0       	breq	.+42     	; 0xfa <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	68 2f       	mov	r22, r24
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	48 2f       	mov	r20, r24
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <PORTA_set_pin_level+0x32>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	4a 95       	dec	r20
  f0:	e2 f7       	brpl	.-8      	; 0xea <PORTA_set_pin_level+0x2e>
  f2:	86 2b       	or	r24, r22
  f4:	f9 01       	movw	r30, r18
  f6:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
  f8:	15 c0       	rjmp	.+42     	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	68 2f       	mov	r22, r24
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	48 2f       	mov	r20, r24
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	4a 95       	dec	r20
 11a:	e2 f7       	brpl	.-8      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 11c:	80 95       	com	r24
 11e:	86 23       	and	r24, r22
 120:	f9 01       	movw	r30, r18
 122:	81 83       	std	Z+1, r24	; 0x01
	}
}
 124:	00 00       	nop
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <PORTD_set_pin_level+0x6>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	88 23       	and	r24, r24
 142:	a9 f0       	breq	.+42     	; 0x16e <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2c e0       	ldi	r18, 0x0C	; 12
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	21 81       	ldd	r18, Z+1	; 0x01
 150:	62 2f       	mov	r22, r18
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	42 2f       	mov	r20, r18
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <PORTD_set_pin_level+0x32>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	4a 95       	dec	r20
 164:	e2 f7       	brpl	.-8      	; 0x15e <PORTD_set_pin_level+0x2e>
 166:	26 2b       	or	r18, r22
 168:	fc 01       	movw	r30, r24
 16a:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 16c:	15 c0       	rjmp	.+42     	; 0x198 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2c e0       	ldi	r18, 0x0C	; 12
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	21 81       	ldd	r18, Z+1	; 0x01
 17a:	62 2f       	mov	r22, r18
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	42 2f       	mov	r20, r18
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <PORTD_set_pin_level+0x5c>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	4a 95       	dec	r20
 18e:	e2 f7       	brpl	.-8      	; 0x188 <PORTD_set_pin_level+0x58>
 190:	20 95       	com	r18
 192:	26 23       	and	r18, r22
 194:	fc 01       	movw	r30, r24
 196:	21 83       	std	Z+1, r18	; 0x01
	}
}
 198:	00 00       	nop
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 1b0:	69 81       	ldd	r22, Y+1	; 0x01
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTA_set_pin_level>
}
 1b8:	00 00       	nop
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	1f 92       	push	r1
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 1ce:	69 81       	ldd	r22, Y+1	; 0x01
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 1d6:	00 00       	nop
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	1f 92       	push	r1
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 1ec:	69 81       	ldd	r22, Y+1	; 0x01
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 1f4:	00 00       	nop
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	1f 92       	push	r1
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 20a:	69 81       	ldd	r22, Y+1	; 0x01
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 212:	00 00       	nop
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <LedToggle>:
 * Created: 9/26/2023 9:59:06 AM
 *  Author: samsunny
 */ 
#include "LedToggle.h"
void LedToggle(bool R,bool G,bool B,bool W,uint16_t uSdelay)
{
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	c6 54       	subi	r28, 0x46	; 70
 22a:	d1 09       	sbc	r29, r1
 22c:	cd bf       	out	0x3d, r28	; 61
 22e:	de bf       	out	0x3e, r29	; 62
 230:	fe 01       	movw	r30, r28
 232:	ef 5b       	subi	r30, 0xBF	; 191
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	80 83       	st	Z, r24
 238:	ce 01       	movw	r24, r28
 23a:	8e 5b       	subi	r24, 0xBE	; 190
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	fc 01       	movw	r30, r24
 240:	60 83       	st	Z, r22
 242:	ce 01       	movw	r24, r28
 244:	8d 5b       	subi	r24, 0xBD	; 189
 246:	9f 4f       	sbci	r25, 0xFF	; 255
 248:	fc 01       	movw	r30, r24
 24a:	40 83       	st	Z, r20
 24c:	ce 01       	movw	r24, r28
 24e:	8c 5b       	subi	r24, 0xBC	; 188
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
 256:	ce 01       	movw	r24, r28
 258:	8b 5b       	subi	r24, 0xBB	; 187
 25a:	9f 4f       	sbci	r25, 0xFF	; 255
 25c:	fc 01       	movw	r30, r24
 25e:	00 83       	st	Z, r16
 260:	11 83       	std	Z+1, r17	; 0x01
	R0_MCU_set_level(R);
 262:	ce 01       	movw	r24, r28
 264:	8f 5b       	subi	r24, 0xBF	; 191
 266:	9f 4f       	sbci	r25, 0xFF	; 255
 268:	fc 01       	movw	r30, r24
 26a:	80 81       	ld	r24, Z
 26c:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <R0_MCU_set_level>
	G0_MCU_set_level(G);
 270:	ce 01       	movw	r24, r28
 272:	8e 5b       	subi	r24, 0xBE	; 190
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	fc 01       	movw	r30, r24
 278:	80 81       	ld	r24, Z
 27a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <G0_MCU_set_level>
	B0_MCU_set_level(B);
 27e:	ce 01       	movw	r24, r28
 280:	8d 5b       	subi	r24, 0xBD	; 189
 282:	9f 4f       	sbci	r25, 0xFF	; 255
 284:	fc 01       	movw	r30, r24
 286:	80 81       	ld	r24, Z
 288:	0e 94 ff 00 	call	0x1fe	; 0x1fe <B0_MCU_set_level>
	W0_MCU_set_level(W);
 28c:	ce 01       	movw	r24, r28
 28e:	8c 5b       	subi	r24, 0xBC	; 188
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	fc 01       	movw	r30, r24
 294:	80 81       	ld	r24, Z
 296:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <W0_MCU_set_level>
	
	_delay_us(uSdelay);
 29a:	ce 01       	movw	r24, r28
 29c:	8b 5b       	subi	r24, 0xBB	; 187
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	fc 01       	movw	r30, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	91 81       	ldd	r25, Z+1	; 0x01
 2a6:	cc 01       	movw	r24, r24
 2a8:	a0 e0       	ldi	r26, 0x00	; 0
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	bc 01       	movw	r22, r24
 2ae:	cd 01       	movw	r24, r26
 2b0:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__floatunsisf>
 2b4:	dc 01       	movw	r26, r24
 2b6:	cb 01       	movw	r24, r22
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	9a 83       	std	Y+2, r25	; 0x02
 2bc:	ab 83       	std	Y+3, r26	; 0x03
 2be:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 2c0:	23 ee       	ldi	r18, 0xE3	; 227
 2c2:	38 e3       	ldi	r19, 0x38	; 56
 2c4:	4e e8       	ldi	r20, 0x8E	; 142
 2c6:	5f e3       	ldi	r21, 0x3F	; 63
 2c8:	69 81       	ldd	r22, Y+1	; 0x01
 2ca:	7a 81       	ldd	r23, Y+2	; 0x02
 2cc:	8b 81       	ldd	r24, Y+3	; 0x03
 2ce:	9c 81       	ldd	r25, Y+4	; 0x04
 2d0:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
 2d4:	dc 01       	movw	r26, r24
 2d6:	cb 01       	movw	r24, r22
 2d8:	8d a3       	std	Y+37, r24	; 0x25
 2da:	9e a3       	std	Y+38, r25	; 0x26
 2dc:	af a3       	std	Y+39, r26	; 0x27
 2de:	b8 a7       	std	Y+40, r27	; 0x28
	__tmp2 = ((F_CPU) / 4e6) * __us;
 2e0:	24 e5       	ldi	r18, 0x54	; 84
 2e2:	35 e5       	ldi	r19, 0x55	; 85
 2e4:	45 e5       	ldi	r20, 0x55	; 85
 2e6:	5f e3       	ldi	r21, 0x3F	; 63
 2e8:	69 81       	ldd	r22, Y+1	; 0x01
 2ea:	7a 81       	ldd	r23, Y+2	; 0x02
 2ec:	8b 81       	ldd	r24, Y+3	; 0x03
 2ee:	9c 81       	ldd	r25, Y+4	; 0x04
 2f0:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
 2f4:	dc 01       	movw	r26, r24
 2f6:	cb 01       	movw	r24, r22
 2f8:	89 a7       	std	Y+41, r24	; 0x29
 2fa:	9a a7       	std	Y+42, r25	; 0x2a
 2fc:	ab a7       	std	Y+43, r26	; 0x2b
 2fe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 e8       	ldi	r20, 0x80	; 128
 306:	5f e3       	ldi	r21, 0x3F	; 63
 308:	6d a1       	ldd	r22, Y+37	; 0x25
 30a:	7e a1       	ldd	r23, Y+38	; 0x26
 30c:	8f a1       	ldd	r24, Y+39	; 0x27
 30e:	98 a5       	ldd	r25, Y+40	; 0x28
 310:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__cmpsf2>
 314:	88 23       	and	r24, r24
 316:	1c f4       	brge	.+6      	; 0x31e <LedToggle+0x102>
		__ticks = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	8d a7       	std	Y+45, r24	; 0x2d
 31c:	b2 c0       	rjmp	.+356    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	else if (__tmp2 > 65535)
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	3f ef       	ldi	r19, 0xFF	; 255
 322:	4f e7       	ldi	r20, 0x7F	; 127
 324:	57 e4       	ldi	r21, 0x47	; 71
 326:	69 a5       	ldd	r22, Y+41	; 0x29
 328:	7a a5       	ldd	r23, Y+42	; 0x2a
 32a:	8b a5       	ldd	r24, Y+43	; 0x2b
 32c:	9c a5       	ldd	r25, Y+44	; 0x2c
 32e:	0e 94 50 07 	call	0xea0	; 0xea0 <__gesf2>
 332:	18 16       	cp	r1, r24
 334:	0c f0       	brlt	.+2      	; 0x338 <LedToggle+0x11c>
 336:	7b c0       	rjmp	.+246    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	{
		_delay_ms(__us / 1000.0);
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	4a e7       	ldi	r20, 0x7A	; 122
 33e:	54 e4       	ldi	r21, 0x44	; 68
 340:	69 81       	ldd	r22, Y+1	; 0x01
 342:	7a 81       	ldd	r23, Y+2	; 0x02
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	9c 81       	ldd	r25, Y+4	; 0x04
 348:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__divsf3>
 34c:	dc 01       	movw	r26, r24
 34e:	cb 01       	movw	r24, r22
 350:	8e a7       	std	Y+46, r24	; 0x2e
 352:	9f a7       	std	Y+47, r25	; 0x2f
 354:	a8 ab       	std	Y+48, r26	; 0x30
 356:	b9 ab       	std	Y+49, r27	; 0x31

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 358:	24 e5       	ldi	r18, 0x54	; 84
 35a:	35 e5       	ldi	r19, 0x55	; 85
 35c:	40 e5       	ldi	r20, 0x50	; 80
 35e:	54 e4       	ldi	r21, 0x44	; 68
 360:	6e a5       	ldd	r22, Y+46	; 0x2e
 362:	7f a5       	ldd	r23, Y+47	; 0x2f
 364:	88 a9       	ldd	r24, Y+48	; 0x30
 366:	99 a9       	ldd	r25, Y+49	; 0x31
 368:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
 36c:	dc 01       	movw	r26, r24
 36e:	cb 01       	movw	r24, r22
 370:	8a ab       	std	Y+50, r24	; 0x32
 372:	9b ab       	std	Y+51, r25	; 0x33
 374:	ac ab       	std	Y+52, r26	; 0x34
 376:	bd ab       	std	Y+53, r27	; 0x35
	if (__tmp < 1.0)
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e8       	ldi	r20, 0x80	; 128
 37e:	5f e3       	ldi	r21, 0x3F	; 63
 380:	6a a9       	ldd	r22, Y+50	; 0x32
 382:	7b a9       	ldd	r23, Y+51	; 0x33
 384:	8c a9       	ldd	r24, Y+52	; 0x34
 386:	9d a9       	ldd	r25, Y+53	; 0x35
 388:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__cmpsf2>
 38c:	88 23       	and	r24, r24
 38e:	2c f4       	brge	.+10     	; 0x39a <LedToggle+0x17e>
		__ticks = 1;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	8e ab       	std	Y+54, r24	; 0x36
 396:	9f ab       	std	Y+55, r25	; 0x37
 398:	3f c0       	rjmp	.+126    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	else if (__tmp > 65535)
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	3f ef       	ldi	r19, 0xFF	; 255
 39e:	4f e7       	ldi	r20, 0x7F	; 127
 3a0:	57 e4       	ldi	r21, 0x47	; 71
 3a2:	6a a9       	ldd	r22, Y+50	; 0x32
 3a4:	7b a9       	ldd	r23, Y+51	; 0x33
 3a6:	8c a9       	ldd	r24, Y+52	; 0x34
 3a8:	9d a9       	ldd	r25, Y+53	; 0x35
 3aa:	0e 94 50 07 	call	0xea0	; 0xea0 <__gesf2>
 3ae:	18 16       	cp	r1, r24
 3b0:	4c f5       	brge	.+82     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	40 e2       	ldi	r20, 0x20	; 32
 3b8:	51 e4       	ldi	r21, 0x41	; 65
 3ba:	6e a5       	ldd	r22, Y+46	; 0x2e
 3bc:	7f a5       	ldd	r23, Y+47	; 0x2f
 3be:	88 a9       	ldd	r24, Y+48	; 0x30
 3c0:	99 a9       	ldd	r25, Y+49	; 0x31
 3c2:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
 3c6:	dc 01       	movw	r26, r24
 3c8:	cb 01       	movw	r24, r22
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 3d2:	dc 01       	movw	r26, r24
 3d4:	cb 01       	movw	r24, r22
 3d6:	8e ab       	std	Y+54, r24	; 0x36
 3d8:	9f ab       	std	Y+55, r25	; 0x37
 3da:	0f c0       	rjmp	.+30     	; 0x3fa <LedToggle+0x1de>
 3dc:	83 e5       	ldi	r24, 0x53	; 83
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	88 af       	std	Y+56, r24	; 0x38
 3e2:	99 af       	std	Y+57, r25	; 0x39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3e4:	88 ad       	ldd	r24, Y+56	; 0x38
 3e6:	99 ad       	ldd	r25, Y+57	; 0x39
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LedToggle+0x1cc>
 3ec:	88 af       	std	Y+56, r24	; 0x38
 3ee:	99 af       	std	Y+57, r25	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f0:	8e a9       	ldd	r24, Y+54	; 0x36
 3f2:	9f a9       	ldd	r25, Y+55	; 0x37
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	8e ab       	std	Y+54, r24	; 0x36
 3f8:	9f ab       	std	Y+55, r25	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3fa:	8e a9       	ldd	r24, Y+54	; 0x36
 3fc:	9f a9       	ldd	r25, Y+55	; 0x37
 3fe:	89 2b       	or	r24, r25
 400:	69 f7       	brne	.-38     	; 0x3dc <LedToggle+0x1c0>
 402:	3f c0       	rjmp	.+126    	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 404:	6a a9       	ldd	r22, Y+50	; 0x32
 406:	7b a9       	ldd	r23, Y+51	; 0x33
 408:	8c a9       	ldd	r24, Y+52	; 0x34
 40a:	9d a9       	ldd	r25, Y+53	; 0x35
 40c:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 410:	dc 01       	movw	r26, r24
 412:	cb 01       	movw	r24, r22
 414:	8e ab       	std	Y+54, r24	; 0x36
 416:	9f ab       	std	Y+55, r25	; 0x37
 418:	8e a9       	ldd	r24, Y+54	; 0x36
 41a:	9f a9       	ldd	r25, Y+55	; 0x37
 41c:	8a af       	std	Y+58, r24	; 0x3a
 41e:	9b af       	std	Y+59, r25	; 0x3b
 420:	8a ad       	ldd	r24, Y+58	; 0x3a
 422:	9b ad       	ldd	r25, Y+59	; 0x3b
 424:	01 97       	sbiw	r24, 0x01	; 1
 426:	f1 f7       	brne	.-4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 428:	8a af       	std	Y+58, r24	; 0x3a
 42a:	9b af       	std	Y+59, r25	; 0x3b
 42c:	2a c0       	rjmp	.+84     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	4f e7       	ldi	r20, 0x7F	; 127
 434:	53 e4       	ldi	r21, 0x43	; 67
 436:	6d a1       	ldd	r22, Y+37	; 0x25
 438:	7e a1       	ldd	r23, Y+38	; 0x26
 43a:	8f a1       	ldd	r24, Y+39	; 0x27
 43c:	98 a5       	ldd	r25, Y+40	; 0x28
 43e:	0e 94 50 07 	call	0xea0	; 0xea0 <__gesf2>
 442:	18 16       	cp	r1, r24
 444:	ac f4       	brge	.+42     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 446:	69 a5       	ldd	r22, Y+41	; 0x29
 448:	7a a5       	ldd	r23, Y+42	; 0x2a
 44a:	8b a5       	ldd	r24, Y+43	; 0x2b
 44c:	9c a5       	ldd	r25, Y+44	; 0x2c
 44e:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 452:	dc 01       	movw	r26, r24
 454:	cb 01       	movw	r24, r22
 456:	8c af       	std	Y+60, r24	; 0x3c
 458:	9d af       	std	Y+61, r25	; 0x3d
 45a:	8c ad       	ldd	r24, Y+60	; 0x3c
 45c:	9d ad       	ldd	r25, Y+61	; 0x3d
 45e:	8e af       	std	Y+62, r24	; 0x3e
 460:	9f af       	std	Y+63, r25	; 0x3f
 462:	8e ad       	ldd	r24, Y+62	; 0x3e
 464:	9f ad       	ldd	r25, Y+63	; 0x3f
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46a:	8e af       	std	Y+62, r24	; 0x3e
 46c:	9f af       	std	Y+63, r25	; 0x3f
 46e:	1c c0       	rjmp	.+56     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 470:	6d a1       	ldd	r22, Y+37	; 0x25
 472:	7e a1       	ldd	r23, Y+38	; 0x26
 474:	8f a1       	ldd	r24, Y+39	; 0x27
 476:	98 a5       	ldd	r25, Y+40	; 0x28
 478:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 47c:	dc 01       	movw	r26, r24
 47e:	cb 01       	movw	r24, r22
 480:	8d a7       	std	Y+45, r24	; 0x2d
 482:	2d a5       	ldd	r18, Y+45	; 0x2d
 484:	ce 01       	movw	r24, r28
 486:	80 5c       	subi	r24, 0xC0	; 192
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	fc 01       	movw	r30, r24
 48c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 48e:	ce 01       	movw	r24, r28
 490:	80 5c       	subi	r24, 0xC0	; 192
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	fc 01       	movw	r30, r24
 496:	80 81       	ld	r24, Z
 498:	28 2f       	mov	r18, r24
 49a:	2a 95       	dec	r18
 49c:	f1 f7       	brne	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 49e:	ce 01       	movw	r24, r28
 4a0:	80 5c       	subi	r24, 0xC0	; 192
 4a2:	9f 4f       	sbci	r25, 0xFF	; 255
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
	
	R0_MCU_set_level(false);
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <R0_MCU_set_level>
	G0_MCU_set_level(false);
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <G0_MCU_set_level>
	B0_MCU_set_level(false);
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <B0_MCU_set_level>
	W0_MCU_set_level(false);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <W0_MCU_set_level>
	
	_delay_us(uSdelay);
 4c0:	ce 01       	movw	r24, r28
 4c2:	8b 5b       	subi	r24, 0xBB	; 187
 4c4:	9f 4f       	sbci	r25, 0xFF	; 255
 4c6:	fc 01       	movw	r30, r24
 4c8:	80 81       	ld	r24, Z
 4ca:	91 81       	ldd	r25, Z+1	; 0x01
 4cc:	cc 01       	movw	r24, r24
 4ce:	a0 e0       	ldi	r26, 0x00	; 0
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	bc 01       	movw	r22, r24
 4d4:	cd 01       	movw	r24, r26
 4d6:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__floatunsisf>
 4da:	dc 01       	movw	r26, r24
 4dc:	cb 01       	movw	r24, r22
 4de:	8d 83       	std	Y+5, r24	; 0x05
 4e0:	9e 83       	std	Y+6, r25	; 0x06
 4e2:	af 83       	std	Y+7, r26	; 0x07
 4e4:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
 4e6:	23 ee       	ldi	r18, 0xE3	; 227
 4e8:	38 e3       	ldi	r19, 0x38	; 56
 4ea:	4e e8       	ldi	r20, 0x8E	; 142
 4ec:	5f e3       	ldi	r21, 0x3F	; 63
 4ee:	6d 81       	ldd	r22, Y+5	; 0x05
 4f0:	7e 81       	ldd	r23, Y+6	; 0x06
 4f2:	8f 81       	ldd	r24, Y+7	; 0x07
 4f4:	98 85       	ldd	r25, Y+8	; 0x08
 4f6:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
 4fa:	dc 01       	movw	r26, r24
 4fc:	cb 01       	movw	r24, r22
 4fe:	89 87       	std	Y+9, r24	; 0x09
 500:	9a 87       	std	Y+10, r25	; 0x0a
 502:	ab 87       	std	Y+11, r26	; 0x0b
 504:	bc 87       	std	Y+12, r27	; 0x0c
	__tmp2 = ((F_CPU) / 4e6) * __us;
 506:	24 e5       	ldi	r18, 0x54	; 84
 508:	35 e5       	ldi	r19, 0x55	; 85
 50a:	45 e5       	ldi	r20, 0x55	; 85
 50c:	5f e3       	ldi	r21, 0x3F	; 63
 50e:	6d 81       	ldd	r22, Y+5	; 0x05
 510:	7e 81       	ldd	r23, Y+6	; 0x06
 512:	8f 81       	ldd	r24, Y+7	; 0x07
 514:	98 85       	ldd	r25, Y+8	; 0x08
 516:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
 51a:	dc 01       	movw	r26, r24
 51c:	cb 01       	movw	r24, r22
 51e:	8d 87       	std	Y+13, r24	; 0x0d
 520:	9e 87       	std	Y+14, r25	; 0x0e
 522:	af 87       	std	Y+15, r26	; 0x0f
 524:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 526:	20 e0       	ldi	r18, 0x00	; 0
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	40 e8       	ldi	r20, 0x80	; 128
 52c:	5f e3       	ldi	r21, 0x3F	; 63
 52e:	69 85       	ldd	r22, Y+9	; 0x09
 530:	7a 85       	ldd	r23, Y+10	; 0x0a
 532:	8b 85       	ldd	r24, Y+11	; 0x0b
 534:	9c 85       	ldd	r25, Y+12	; 0x0c
 536:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__cmpsf2>
 53a:	88 23       	and	r24, r24
 53c:	1c f4       	brge	.+6      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
		__ticks = 1;
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	89 8b       	std	Y+17, r24	; 0x11
 542:	b2 c0       	rjmp	.+356    	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
	else if (__tmp2 > 65535)
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	3f ef       	ldi	r19, 0xFF	; 255
 548:	4f e7       	ldi	r20, 0x7F	; 127
 54a:	57 e4       	ldi	r21, 0x47	; 71
 54c:	6d 85       	ldd	r22, Y+13	; 0x0d
 54e:	7e 85       	ldd	r23, Y+14	; 0x0e
 550:	8f 85       	ldd	r24, Y+15	; 0x0f
 552:	98 89       	ldd	r25, Y+16	; 0x10
 554:	0e 94 50 07 	call	0xea0	; 0xea0 <__gesf2>
 558:	18 16       	cp	r1, r24
 55a:	0c f0       	brlt	.+2      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55c:	7b c0       	rjmp	.+246    	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
	{
		_delay_ms(__us / 1000.0);
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	4a e7       	ldi	r20, 0x7A	; 122
 564:	54 e4       	ldi	r21, 0x44	; 68
 566:	6d 81       	ldd	r22, Y+5	; 0x05
 568:	7e 81       	ldd	r23, Y+6	; 0x06
 56a:	8f 81       	ldd	r24, Y+7	; 0x07
 56c:	98 85       	ldd	r25, Y+8	; 0x08
 56e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__divsf3>
 572:	dc 01       	movw	r26, r24
 574:	cb 01       	movw	r24, r22
 576:	8a 8b       	std	Y+18, r24	; 0x12
 578:	9b 8b       	std	Y+19, r25	; 0x13
 57a:	ac 8b       	std	Y+20, r26	; 0x14
 57c:	bd 8b       	std	Y+21, r27	; 0x15

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 57e:	24 e5       	ldi	r18, 0x54	; 84
 580:	35 e5       	ldi	r19, 0x55	; 85
 582:	40 e5       	ldi	r20, 0x50	; 80
 584:	54 e4       	ldi	r21, 0x44	; 68
 586:	6a 89       	ldd	r22, Y+18	; 0x12
 588:	7b 89       	ldd	r23, Y+19	; 0x13
 58a:	8c 89       	ldd	r24, Y+20	; 0x14
 58c:	9d 89       	ldd	r25, Y+21	; 0x15
 58e:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
 592:	dc 01       	movw	r26, r24
 594:	cb 01       	movw	r24, r22
 596:	8e 8b       	std	Y+22, r24	; 0x16
 598:	9f 8b       	std	Y+23, r25	; 0x17
 59a:	a8 8f       	std	Y+24, r26	; 0x18
 59c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	40 e8       	ldi	r20, 0x80	; 128
 5a4:	5f e3       	ldi	r21, 0x3F	; 63
 5a6:	6e 89       	ldd	r22, Y+22	; 0x16
 5a8:	7f 89       	ldd	r23, Y+23	; 0x17
 5aa:	88 8d       	ldd	r24, Y+24	; 0x18
 5ac:	99 8d       	ldd	r25, Y+25	; 0x19
 5ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__cmpsf2>
 5b2:	88 23       	and	r24, r24
 5b4:	2c f4       	brge	.+10     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
		__ticks = 1;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	8a 8f       	std	Y+26, r24	; 0x1a
 5bc:	9b 8f       	std	Y+27, r25	; 0x1b
 5be:	3f c0       	rjmp	.+126    	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
	else if (__tmp > 65535)
 5c0:	20 e0       	ldi	r18, 0x00	; 0
 5c2:	3f ef       	ldi	r19, 0xFF	; 255
 5c4:	4f e7       	ldi	r20, 0x7F	; 127
 5c6:	57 e4       	ldi	r21, 0x47	; 71
 5c8:	6e 89       	ldd	r22, Y+22	; 0x16
 5ca:	7f 89       	ldd	r23, Y+23	; 0x17
 5cc:	88 8d       	ldd	r24, Y+24	; 0x18
 5ce:	99 8d       	ldd	r25, Y+25	; 0x19
 5d0:	0e 94 50 07 	call	0xea0	; 0xea0 <__gesf2>
 5d4:	18 16       	cp	r1, r24
 5d6:	4c f5       	brge	.+82     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	40 e2       	ldi	r20, 0x20	; 32
 5de:	51 e4       	ldi	r21, 0x41	; 65
 5e0:	6a 89       	ldd	r22, Y+18	; 0x12
 5e2:	7b 89       	ldd	r23, Y+19	; 0x13
 5e4:	8c 89       	ldd	r24, Y+20	; 0x14
 5e6:	9d 89       	ldd	r25, Y+21	; 0x15
 5e8:	0e 94 55 07 	call	0xeaa	; 0xeaa <__mulsf3>
 5ec:	dc 01       	movw	r26, r24
 5ee:	cb 01       	movw	r24, r22
 5f0:	bc 01       	movw	r22, r24
 5f2:	cd 01       	movw	r24, r26
 5f4:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 5f8:	dc 01       	movw	r26, r24
 5fa:	cb 01       	movw	r24, r22
 5fc:	8a 8f       	std	Y+26, r24	; 0x1a
 5fe:	9b 8f       	std	Y+27, r25	; 0x1b
 600:	0f c0       	rjmp	.+30     	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
 602:	83 e5       	ldi	r24, 0x53	; 83
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	8c 8f       	std	Y+28, r24	; 0x1c
 608:	9d 8f       	std	Y+29, r25	; 0x1d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 60a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 60c:	9d 8d       	ldd	r25, Y+29	; 0x1d
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
 612:	8c 8f       	std	Y+28, r24	; 0x1c
 614:	9d 8f       	std	Y+29, r25	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 616:	8a 8d       	ldd	r24, Y+26	; 0x1a
 618:	9b 8d       	ldd	r25, Y+27	; 0x1b
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	8a 8f       	std	Y+26, r24	; 0x1a
 61e:	9b 8f       	std	Y+27, r25	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 620:	8a 8d       	ldd	r24, Y+26	; 0x1a
 622:	9b 8d       	ldd	r25, Y+27	; 0x1b
 624:	89 2b       	or	r24, r25
 626:	69 f7       	brne	.-38     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
 628:	3f c0       	rjmp	.+126    	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 62a:	6e 89       	ldd	r22, Y+22	; 0x16
 62c:	7f 89       	ldd	r23, Y+23	; 0x17
 62e:	88 8d       	ldd	r24, Y+24	; 0x18
 630:	99 8d       	ldd	r25, Y+25	; 0x19
 632:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 636:	dc 01       	movw	r26, r24
 638:	cb 01       	movw	r24, r22
 63a:	8a 8f       	std	Y+26, r24	; 0x1a
 63c:	9b 8f       	std	Y+27, r25	; 0x1b
 63e:	8a 8d       	ldd	r24, Y+26	; 0x1a
 640:	9b 8d       	ldd	r25, Y+27	; 0x1b
 642:	8e 8f       	std	Y+30, r24	; 0x1e
 644:	9f 8f       	std	Y+31, r25	; 0x1f
 646:	8e 8d       	ldd	r24, Y+30	; 0x1e
 648:	9f 8d       	ldd	r25, Y+31	; 0x1f
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	f1 f7       	brne	.-4      	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
 64e:	8e 8f       	std	Y+30, r24	; 0x1e
 650:	9f 8f       	std	Y+31, r25	; 0x1f
 652:	2a c0       	rjmp	.+84     	; 0x6a8 <__LOCK_REGION_LENGTH__+0x2a8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	4f e7       	ldi	r20, 0x7F	; 127
 65a:	53 e4       	ldi	r21, 0x43	; 67
 65c:	69 85       	ldd	r22, Y+9	; 0x09
 65e:	7a 85       	ldd	r23, Y+10	; 0x0a
 660:	8b 85       	ldd	r24, Y+11	; 0x0b
 662:	9c 85       	ldd	r25, Y+12	; 0x0c
 664:	0e 94 50 07 	call	0xea0	; 0xea0 <__gesf2>
 668:	18 16       	cp	r1, r24
 66a:	ac f4       	brge	.+42     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
 66c:	6d 85       	ldd	r22, Y+13	; 0x0d
 66e:	7e 85       	ldd	r23, Y+14	; 0x0e
 670:	8f 85       	ldd	r24, Y+15	; 0x0f
 672:	98 89       	ldd	r25, Y+16	; 0x10
 674:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 678:	dc 01       	movw	r26, r24
 67a:	cb 01       	movw	r24, r22
 67c:	88 a3       	std	Y+32, r24	; 0x20
 67e:	99 a3       	std	Y+33, r25	; 0x21
 680:	88 a1       	ldd	r24, Y+32	; 0x20
 682:	99 a1       	ldd	r25, Y+33	; 0x21
 684:	8a a3       	std	Y+34, r24	; 0x22
 686:	9b a3       	std	Y+35, r25	; 0x23
 688:	8a a1       	ldd	r24, Y+34	; 0x22
 68a:	9b a1       	ldd	r25, Y+35	; 0x23
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 690:	8a a3       	std	Y+34, r24	; 0x22
 692:	9b a3       	std	Y+35, r25	; 0x23
	
 694:	0f c0       	rjmp	.+30     	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 696:	69 85       	ldd	r22, Y+9	; 0x09
 698:	7a 85       	ldd	r23, Y+10	; 0x0a
 69a:	8b 85       	ldd	r24, Y+11	; 0x0b
 69c:	9c 85       	ldd	r25, Y+12	; 0x0c
 69e:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixunssfsi>
 6a2:	dc 01       	movw	r26, r24
 6a4:	cb 01       	movw	r24, r22
 6a6:	89 8b       	std	Y+17, r24	; 0x11
 6a8:	89 89       	ldd	r24, Y+17	; 0x11
 6aa:	8c a3       	std	Y+36, r24	; 0x24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 6ac:	8c a1       	ldd	r24, Y+36	; 0x24
 6ae:	8a 95       	dec	r24
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <__LOCK_REGION_LENGTH__+0x2ae>
 6b2:	8c a3       	std	Y+36, r24	; 0x24
 6b4:	00 00       	nop
 6b6:	ca 5b       	subi	r28, 0xBA	; 186
 6b8:	df 4f       	sbci	r29, 0xFF	; 255
 6ba:	cd bf       	out	0x3d, r28	; 61
 6bc:	de bf       	out	0x3e, r29	; 62
 6be:	df 91       	pop	r29
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	08 95       	ret

000006c8 <main>:

#include "LedToggle.h"
int main(void)
{
 6c8:	0f 93       	push	r16
 6ca:	1f 93       	push	r17
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	cd b7       	in	r28, 0x3d	; 61
 6d2:	de b7       	in	r29, 0x3e	; 62
 6d4:	26 97       	sbiw	r28, 0x06	; 6
 6d6:	cd bf       	out	0x3d, r28	; 61
 6d8:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 6da:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	bool R,G,B,W;
	uint16_t uSdelay=100;
 6de:	84 e6       	ldi	r24, 0x64	; 100
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	89 83       	std	Y+1, r24	; 0x01
 6e4:	9a 83       	std	Y+2, r25	; 0x02
	
	R=1;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	8b 83       	std	Y+3, r24	; 0x03
	G=0;
 6ea:	1c 82       	std	Y+4, r1	; 0x04
	B=0;
 6ec:	1d 82       	std	Y+5, r1	; 0x05
	W=0;
 6ee:	1e 82       	std	Y+6, r1	; 0x06
	
	while (1) {
		LedToggle(R,G,B,W,uSdelay);
 6f0:	89 81       	ldd	r24, Y+1	; 0x01
 6f2:	9a 81       	ldd	r25, Y+2	; 0x02
 6f4:	8c 01       	movw	r16, r24
 6f6:	2e 81       	ldd	r18, Y+6	; 0x06
 6f8:	4d 81       	ldd	r20, Y+5	; 0x05
 6fa:	6c 81       	ldd	r22, Y+4	; 0x04
 6fc:	8b 81       	ldd	r24, Y+3	; 0x03
 6fe:	0e 94 0e 01 	call	0x21c	; 0x21c <LedToggle>
	}
 702:	f6 cf       	rjmp	.-20     	; 0x6f0 <main+0x28>

00000704 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 70c:	80 e0       	ldi	r24, 0x00	; 0
}
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 71c:	80 e0       	ldi	r24, 0x00	; 0
}
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 72c:	80 e0       	ldi	r24, 0x00	; 0
}
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	08 95       	ret

00000734 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	00 d0       	rcall	.+0      	; 0x73a <PORTA_set_pin_dir+0x6>
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	89 83       	std	Y+1, r24	; 0x01
 740:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	88 2f       	mov	r24, r24
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	81 30       	cpi	r24, 0x01	; 1
 74a:	91 05       	cpc	r25, r1
 74c:	e1 f0       	breq	.+56     	; 0x786 <PORTA_set_pin_dir+0x52>
 74e:	82 30       	cpi	r24, 0x02	; 2
 750:	91 05       	cpc	r25, r1
 752:	71 f1       	breq	.+92     	; 0x7b0 <PORTA_set_pin_dir+0x7c>
 754:	89 2b       	or	r24, r25
 756:	09 f0       	breq	.+2      	; 0x75a <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 758:	3b c0       	rjmp	.+118    	; 0x7d0 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	fc 01       	movw	r30, r24
 764:	80 81       	ld	r24, Z
 766:	68 2f       	mov	r22, r24
 768:	89 81       	ldd	r24, Y+1	; 0x01
 76a:	48 2f       	mov	r20, r24
 76c:	50 e0       	ldi	r21, 0x00	; 0
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <PORTA_set_pin_dir+0x44>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	4a 95       	dec	r20
 77a:	e2 f7       	brpl	.-8      	; 0x774 <PORTA_set_pin_dir+0x40>
 77c:	80 95       	com	r24
 77e:	86 23       	and	r24, r22
 780:	f9 01       	movw	r30, r18
 782:	80 83       	st	Z, r24
		break;
 784:	25 c0       	rjmp	.+74     	; 0x7d0 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 786:	20 e0       	ldi	r18, 0x00	; 0
 788:	30 e0       	ldi	r19, 0x00	; 0
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	fc 01       	movw	r30, r24
 790:	80 81       	ld	r24, Z
 792:	68 2f       	mov	r22, r24
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	48 2f       	mov	r20, r24
 798:	50 e0       	ldi	r21, 0x00	; 0
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <PORTA_set_pin_dir+0x70>
 7a0:	88 0f       	add	r24, r24
 7a2:	99 1f       	adc	r25, r25
 7a4:	4a 95       	dec	r20
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <PORTA_set_pin_dir+0x6c>
 7a8:	86 2b       	or	r24, r22
 7aa:	f9 01       	movw	r30, r18
 7ac:	80 83       	st	Z, r24
		break;
 7ae:	10 c0       	rjmp	.+32     	; 0x7d0 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 7b0:	89 81       	ldd	r24, Y+1	; 0x01
 7b2:	88 2f       	mov	r24, r24
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	80 5f       	subi	r24, 0xF0	; 240
 7b8:	9b 4f       	sbci	r25, 0xFB	; 251
 7ba:	29 81       	ldd	r18, Y+1	; 0x01
 7bc:	22 2f       	mov	r18, r18
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	20 5f       	subi	r18, 0xF0	; 240
 7c2:	3b 4f       	sbci	r19, 0xFB	; 251
 7c4:	f9 01       	movw	r30, r18
 7c6:	20 81       	ld	r18, Z
 7c8:	28 60       	ori	r18, 0x08	; 8
 7ca:	fc 01       	movw	r30, r24
 7cc:	20 83       	st	Z, r18
		break;
 7ce:	00 00       	nop
	default:
		break;
	}
}
 7d0:	00 00       	nop
 7d2:	0f 90       	pop	r0
 7d4:	0f 90       	pop	r0
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	08 95       	ret

000007dc <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 7dc:	cf 93       	push	r28
 7de:	df 93       	push	r29
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <PORTA_set_pin_level+0x6>
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
 7e6:	89 83       	std	Y+1, r24	; 0x01
 7e8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 7ea:	8a 81       	ldd	r24, Y+2	; 0x02
 7ec:	88 23       	and	r24, r24
 7ee:	a9 f0       	breq	.+42     	; 0x81a <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 7f0:	20 e0       	ldi	r18, 0x00	; 0
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	fc 01       	movw	r30, r24
 7fa:	81 81       	ldd	r24, Z+1	; 0x01
 7fc:	68 2f       	mov	r22, r24
 7fe:	89 81       	ldd	r24, Y+1	; 0x01
 800:	48 2f       	mov	r20, r24
 802:	50 e0       	ldi	r21, 0x00	; 0
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <PORTA_set_pin_level+0x32>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	4a 95       	dec	r20
 810:	e2 f7       	brpl	.-8      	; 0x80a <PORTA_set_pin_level+0x2e>
 812:	86 2b       	or	r24, r22
 814:	f9 01       	movw	r30, r18
 816:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 818:	15 c0       	rjmp	.+42     	; 0x844 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	fc 01       	movw	r30, r24
 824:	81 81       	ldd	r24, Z+1	; 0x01
 826:	68 2f       	mov	r22, r24
 828:	89 81       	ldd	r24, Y+1	; 0x01
 82a:	48 2f       	mov	r20, r24
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <PORTA_set_pin_level+0x5c>
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	4a 95       	dec	r20
 83a:	e2 f7       	brpl	.-8      	; 0x834 <PORTA_set_pin_level+0x58>
 83c:	80 95       	com	r24
 83e:	86 23       	and	r24, r22
 840:	f9 01       	movw	r30, r18
 842:	81 83       	std	Z+1, r24	; 0x01
	}
}
 844:	00 00       	nop
 846:	0f 90       	pop	r0
 848:	0f 90       	pop	r0
 84a:	df 91       	pop	r29
 84c:	cf 91       	pop	r28
 84e:	08 95       	ret

00000850 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	00 d0       	rcall	.+0      	; 0x856 <PORTD_set_pin_dir+0x6>
 856:	cd b7       	in	r28, 0x3d	; 61
 858:	de b7       	in	r29, 0x3e	; 62
 85a:	89 83       	std	Y+1, r24	; 0x01
 85c:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 85e:	8a 81       	ldd	r24, Y+2	; 0x02
 860:	88 2f       	mov	r24, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	81 30       	cpi	r24, 0x01	; 1
 866:	91 05       	cpc	r25, r1
 868:	e1 f0       	breq	.+56     	; 0x8a2 <PORTD_set_pin_dir+0x52>
 86a:	82 30       	cpi	r24, 0x02	; 2
 86c:	91 05       	cpc	r25, r1
 86e:	71 f1       	breq	.+92     	; 0x8cc <PORTD_set_pin_dir+0x7c>
 870:	89 2b       	or	r24, r25
 872:	09 f0       	breq	.+2      	; 0x876 <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 874:	3b c0       	rjmp	.+118    	; 0x8ec <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
 876:	8c e0       	ldi	r24, 0x0C	; 12
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	2c e0       	ldi	r18, 0x0C	; 12
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	f9 01       	movw	r30, r18
 880:	20 81       	ld	r18, Z
 882:	62 2f       	mov	r22, r18
 884:	29 81       	ldd	r18, Y+1	; 0x01
 886:	42 2f       	mov	r20, r18
 888:	50 e0       	ldi	r21, 0x00	; 0
 88a:	21 e0       	ldi	r18, 0x01	; 1
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <PORTD_set_pin_dir+0x44>
 890:	22 0f       	add	r18, r18
 892:	33 1f       	adc	r19, r19
 894:	4a 95       	dec	r20
 896:	e2 f7       	brpl	.-8      	; 0x890 <PORTD_set_pin_dir+0x40>
 898:	20 95       	com	r18
 89a:	26 23       	and	r18, r22
 89c:	fc 01       	movw	r30, r24
 89e:	20 83       	st	Z, r18
		break;
 8a0:	25 c0       	rjmp	.+74     	; 0x8ec <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 8a2:	8c e0       	ldi	r24, 0x0C	; 12
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	2c e0       	ldi	r18, 0x0C	; 12
 8a8:	30 e0       	ldi	r19, 0x00	; 0
 8aa:	f9 01       	movw	r30, r18
 8ac:	20 81       	ld	r18, Z
 8ae:	62 2f       	mov	r22, r18
 8b0:	29 81       	ldd	r18, Y+1	; 0x01
 8b2:	42 2f       	mov	r20, r18
 8b4:	50 e0       	ldi	r21, 0x00	; 0
 8b6:	21 e0       	ldi	r18, 0x01	; 1
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <PORTD_set_pin_dir+0x70>
 8bc:	22 0f       	add	r18, r18
 8be:	33 1f       	adc	r19, r19
 8c0:	4a 95       	dec	r20
 8c2:	e2 f7       	brpl	.-8      	; 0x8bc <PORTD_set_pin_dir+0x6c>
 8c4:	26 2b       	or	r18, r22
 8c6:	fc 01       	movw	r30, r24
 8c8:	20 83       	st	Z, r18
		break;
 8ca:	10 c0       	rjmp	.+32     	; 0x8ec <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	88 2f       	mov	r24, r24
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	80 59       	subi	r24, 0x90	; 144
 8d4:	9b 4f       	sbci	r25, 0xFB	; 251
 8d6:	29 81       	ldd	r18, Y+1	; 0x01
 8d8:	22 2f       	mov	r18, r18
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	20 59       	subi	r18, 0x90	; 144
 8de:	3b 4f       	sbci	r19, 0xFB	; 251
 8e0:	f9 01       	movw	r30, r18
 8e2:	20 81       	ld	r18, Z
 8e4:	28 60       	ori	r18, 0x08	; 8
 8e6:	fc 01       	movw	r30, r24
 8e8:	20 83       	st	Z, r18
		break;
 8ea:	00 00       	nop
	default:
		break;
	}
}
 8ec:	00 00       	nop
 8ee:	0f 90       	pop	r0
 8f0:	0f 90       	pop	r0
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	08 95       	ret

000008f8 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 8f8:	cf 93       	push	r28
 8fa:	df 93       	push	r29
 8fc:	00 d0       	rcall	.+0      	; 0x8fe <PORTD_set_pin_level+0x6>
 8fe:	cd b7       	in	r28, 0x3d	; 61
 900:	de b7       	in	r29, 0x3e	; 62
 902:	89 83       	std	Y+1, r24	; 0x01
 904:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 906:	8a 81       	ldd	r24, Y+2	; 0x02
 908:	88 23       	and	r24, r24
 90a:	a9 f0       	breq	.+42     	; 0x936 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 90c:	8c e0       	ldi	r24, 0x0C	; 12
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	2c e0       	ldi	r18, 0x0C	; 12
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	f9 01       	movw	r30, r18
 916:	21 81       	ldd	r18, Z+1	; 0x01
 918:	62 2f       	mov	r22, r18
 91a:	29 81       	ldd	r18, Y+1	; 0x01
 91c:	42 2f       	mov	r20, r18
 91e:	50 e0       	ldi	r21, 0x00	; 0
 920:	21 e0       	ldi	r18, 0x01	; 1
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	02 c0       	rjmp	.+4      	; 0x92a <PORTD_set_pin_level+0x32>
 926:	22 0f       	add	r18, r18
 928:	33 1f       	adc	r19, r19
 92a:	4a 95       	dec	r20
 92c:	e2 f7       	brpl	.-8      	; 0x926 <PORTD_set_pin_level+0x2e>
 92e:	26 2b       	or	r18, r22
 930:	fc 01       	movw	r30, r24
 932:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 934:	15 c0       	rjmp	.+42     	; 0x960 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 936:	8c e0       	ldi	r24, 0x0C	; 12
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	2c e0       	ldi	r18, 0x0C	; 12
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	f9 01       	movw	r30, r18
 940:	21 81       	ldd	r18, Z+1	; 0x01
 942:	62 2f       	mov	r22, r18
 944:	29 81       	ldd	r18, Y+1	; 0x01
 946:	42 2f       	mov	r20, r18
 948:	50 e0       	ldi	r21, 0x00	; 0
 94a:	21 e0       	ldi	r18, 0x01	; 1
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <PORTD_set_pin_level+0x5c>
 950:	22 0f       	add	r18, r18
 952:	33 1f       	adc	r19, r19
 954:	4a 95       	dec	r20
 956:	e2 f7       	brpl	.-8      	; 0x950 <PORTD_set_pin_level+0x58>
 958:	20 95       	com	r18
 95a:	26 23       	and	r18, r22
 95c:	fc 01       	movw	r30, r24
 95e:	21 83       	std	Z+1, r18	; 0x01
	}
}
 960:	00 00       	nop
 962:	0f 90       	pop	r0
 964:	0f 90       	pop	r0
 966:	df 91       	pop	r29
 968:	cf 91       	pop	r28
 96a:	08 95       	ret

0000096c <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	1f 92       	push	r1
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
 976:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
 978:	69 81       	ldd	r22, Y+1	; 0x01
 97a:	83 e0       	ldi	r24, 0x03	; 3
 97c:	0e 94 9a 03 	call	0x734	; 0x734 <PORTA_set_pin_dir>
}
 980:	00 00       	nop
 982:	0f 90       	pop	r0
 984:	df 91       	pop	r29
 986:	cf 91       	pop	r28
 988:	08 95       	ret

0000098a <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 98a:	cf 93       	push	r28
 98c:	df 93       	push	r29
 98e:	1f 92       	push	r1
 990:	cd b7       	in	r28, 0x3d	; 61
 992:	de b7       	in	r29, 0x3e	; 62
 994:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 996:	69 81       	ldd	r22, Y+1	; 0x01
 998:	83 e0       	ldi	r24, 0x03	; 3
 99a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <PORTA_set_pin_level>
}
 99e:	00 00       	nop
 9a0:	0f 90       	pop	r0
 9a2:	df 91       	pop	r29
 9a4:	cf 91       	pop	r28
 9a6:	08 95       	ret

000009a8 <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
 9a8:	cf 93       	push	r28
 9aa:	df 93       	push	r29
 9ac:	1f 92       	push	r1
 9ae:	cd b7       	in	r28, 0x3d	; 61
 9b0:	de b7       	in	r29, 0x3e	; 62
 9b2:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
 9b4:	69 81       	ldd	r22, Y+1	; 0x01
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	0e 94 28 04 	call	0x850	; 0x850 <PORTD_set_pin_dir>
}
 9bc:	00 00       	nop
 9be:	0f 90       	pop	r0
 9c0:	df 91       	pop	r29
 9c2:	cf 91       	pop	r28
 9c4:	08 95       	ret

000009c6 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	1f 92       	push	r1
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
 9d0:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 9d2:	69 81       	ldd	r22, Y+1	; 0x01
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <PORTD_set_pin_level>
}
 9da:	00 00       	nop
 9dc:	0f 90       	pop	r0
 9de:	df 91       	pop	r29
 9e0:	cf 91       	pop	r28
 9e2:	08 95       	ret

000009e4 <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	1f 92       	push	r1
 9ea:	cd b7       	in	r28, 0x3d	; 61
 9ec:	de b7       	in	r29, 0x3e	; 62
 9ee:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
 9f0:	69 81       	ldd	r22, Y+1	; 0x01
 9f2:	81 e0       	ldi	r24, 0x01	; 1
 9f4:	0e 94 28 04 	call	0x850	; 0x850 <PORTD_set_pin_dir>
}
 9f8:	00 00       	nop
 9fa:	0f 90       	pop	r0
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	08 95       	ret

00000a02 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	1f 92       	push	r1
 a08:	cd b7       	in	r28, 0x3d	; 61
 a0a:	de b7       	in	r29, 0x3e	; 62
 a0c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 a0e:	69 81       	ldd	r22, Y+1	; 0x01
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <PORTD_set_pin_level>
}
 a16:	00 00       	nop
 a18:	0f 90       	pop	r0
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	08 95       	ret

00000a20 <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	1f 92       	push	r1
 a26:	cd b7       	in	r28, 0x3d	; 61
 a28:	de b7       	in	r29, 0x3e	; 62
 a2a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
 a2c:	69 81       	ldd	r22, Y+1	; 0x01
 a2e:	82 e0       	ldi	r24, 0x02	; 2
 a30:	0e 94 28 04 	call	0x850	; 0x850 <PORTD_set_pin_dir>
}
 a34:	00 00       	nop
 a36:	0f 90       	pop	r0
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	08 95       	ret

00000a3e <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	1f 92       	push	r1
 a44:	cd b7       	in	r28, 0x3d	; 61
 a46:	de b7       	in	r29, 0x3e	; 62
 a48:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 a4a:	69 81       	ldd	r22, Y+1	; 0x01
 a4c:	82 e0       	ldi	r24, 0x02	; 2
 a4e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <PORTD_set_pin_level>
}
 a52:	00 00       	nop
 a54:	0f 90       	pop	r0
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	08 95       	ret

00000a5c <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	cd b7       	in	r28, 0x3d	; 61
 a62:	de b7       	in	r29, 0x3e	; 62
 a64:	26 97       	sbiw	r28, 0x06	; 6
 a66:	cd bf       	out	0x3d, r28	; 61
 a68:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 a6a:	19 82       	std	Y+1, r1	; 0x01
 a6c:	12 c0       	rjmp	.+36     	; 0xa92 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 a6e:	89 81       	ldd	r24, Y+1	; 0x01
 a70:	88 2f       	mov	r24, r24
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	80 5f       	subi	r24, 0xF0	; 240
 a76:	9b 4f       	sbci	r25, 0xFB	; 251
 a78:	29 81       	ldd	r18, Y+1	; 0x01
 a7a:	22 2f       	mov	r18, r18
 a7c:	30 e0       	ldi	r19, 0x00	; 0
 a7e:	20 5f       	subi	r18, 0xF0	; 240
 a80:	3b 4f       	sbci	r19, 0xFB	; 251
 a82:	f9 01       	movw	r30, r18
 a84:	20 81       	ld	r18, Z
 a86:	28 60       	ori	r18, 0x08	; 8
 a88:	fc 01       	movw	r30, r24
 a8a:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 a8c:	89 81       	ldd	r24, Y+1	; 0x01
 a8e:	8f 5f       	subi	r24, 0xFF	; 255
 a90:	89 83       	std	Y+1, r24	; 0x01
 a92:	89 81       	ldd	r24, Y+1	; 0x01
 a94:	88 30       	cpi	r24, 0x08	; 8
 a96:	58 f3       	brcs	.-42     	; 0xa6e <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 a98:	1a 82       	std	Y+2, r1	; 0x02
 a9a:	12 c0       	rjmp	.+36     	; 0xac0 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 a9c:	8a 81       	ldd	r24, Y+2	; 0x02
 a9e:	88 2f       	mov	r24, r24
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	80 5d       	subi	r24, 0xD0	; 208
 aa4:	9b 4f       	sbci	r25, 0xFB	; 251
 aa6:	2a 81       	ldd	r18, Y+2	; 0x02
 aa8:	22 2f       	mov	r18, r18
 aaa:	30 e0       	ldi	r19, 0x00	; 0
 aac:	20 5d       	subi	r18, 0xD0	; 208
 aae:	3b 4f       	sbci	r19, 0xFB	; 251
 ab0:	f9 01       	movw	r30, r18
 ab2:	20 81       	ld	r18, Z
 ab4:	28 60       	ori	r18, 0x08	; 8
 ab6:	fc 01       	movw	r30, r24
 ab8:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 aba:	8a 81       	ldd	r24, Y+2	; 0x02
 abc:	8f 5f       	subi	r24, 0xFF	; 255
 abe:	8a 83       	std	Y+2, r24	; 0x02
 ac0:	8a 81       	ldd	r24, Y+2	; 0x02
 ac2:	88 30       	cpi	r24, 0x08	; 8
 ac4:	58 f3       	brcs	.-42     	; 0xa9c <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 ac6:	1b 82       	std	Y+3, r1	; 0x03
 ac8:	12 c0       	rjmp	.+36     	; 0xaee <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 aca:	8b 81       	ldd	r24, Y+3	; 0x03
 acc:	88 2f       	mov	r24, r24
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	80 5b       	subi	r24, 0xB0	; 176
 ad2:	9b 4f       	sbci	r25, 0xFB	; 251
 ad4:	2b 81       	ldd	r18, Y+3	; 0x03
 ad6:	22 2f       	mov	r18, r18
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	20 5b       	subi	r18, 0xB0	; 176
 adc:	3b 4f       	sbci	r19, 0xFB	; 251
 ade:	f9 01       	movw	r30, r18
 ae0:	20 81       	ld	r18, Z
 ae2:	28 60       	ori	r18, 0x08	; 8
 ae4:	fc 01       	movw	r30, r24
 ae6:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 ae8:	8b 81       	ldd	r24, Y+3	; 0x03
 aea:	8f 5f       	subi	r24, 0xFF	; 255
 aec:	8b 83       	std	Y+3, r24	; 0x03
 aee:	8b 81       	ldd	r24, Y+3	; 0x03
 af0:	88 30       	cpi	r24, 0x08	; 8
 af2:	58 f3       	brcs	.-42     	; 0xaca <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 af4:	1c 82       	std	Y+4, r1	; 0x04
 af6:	12 c0       	rjmp	.+36     	; 0xb1c <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 af8:	8c 81       	ldd	r24, Y+4	; 0x04
 afa:	88 2f       	mov	r24, r24
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	80 59       	subi	r24, 0x90	; 144
 b00:	9b 4f       	sbci	r25, 0xFB	; 251
 b02:	2c 81       	ldd	r18, Y+4	; 0x04
 b04:	22 2f       	mov	r18, r18
 b06:	30 e0       	ldi	r19, 0x00	; 0
 b08:	20 59       	subi	r18, 0x90	; 144
 b0a:	3b 4f       	sbci	r19, 0xFB	; 251
 b0c:	f9 01       	movw	r30, r18
 b0e:	20 81       	ld	r18, Z
 b10:	28 60       	ori	r18, 0x08	; 8
 b12:	fc 01       	movw	r30, r24
 b14:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b16:	8c 81       	ldd	r24, Y+4	; 0x04
 b18:	8f 5f       	subi	r24, 0xFF	; 255
 b1a:	8c 83       	std	Y+4, r24	; 0x04
 b1c:	8c 81       	ldd	r24, Y+4	; 0x04
 b1e:	88 30       	cpi	r24, 0x08	; 8
 b20:	58 f3       	brcs	.-42     	; 0xaf8 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b22:	1d 82       	std	Y+5, r1	; 0x05
 b24:	12 c0       	rjmp	.+36     	; 0xb4a <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 b26:	8d 81       	ldd	r24, Y+5	; 0x05
 b28:	88 2f       	mov	r24, r24
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	80 57       	subi	r24, 0x70	; 112
 b2e:	9b 4f       	sbci	r25, 0xFB	; 251
 b30:	2d 81       	ldd	r18, Y+5	; 0x05
 b32:	22 2f       	mov	r18, r18
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	20 57       	subi	r18, 0x70	; 112
 b38:	3b 4f       	sbci	r19, 0xFB	; 251
 b3a:	f9 01       	movw	r30, r18
 b3c:	20 81       	ld	r18, Z
 b3e:	28 60       	ori	r18, 0x08	; 8
 b40:	fc 01       	movw	r30, r24
 b42:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b44:	8d 81       	ldd	r24, Y+5	; 0x05
 b46:	8f 5f       	subi	r24, 0xFF	; 255
 b48:	8d 83       	std	Y+5, r24	; 0x05
 b4a:	8d 81       	ldd	r24, Y+5	; 0x05
 b4c:	88 30       	cpi	r24, 0x08	; 8
 b4e:	58 f3       	brcs	.-42     	; 0xb26 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b50:	1e 82       	std	Y+6, r1	; 0x06
 b52:	12 c0       	rjmp	.+36     	; 0xb78 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 b54:	8e 81       	ldd	r24, Y+6	; 0x06
 b56:	88 2f       	mov	r24, r24
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	80 55       	subi	r24, 0x50	; 80
 b5c:	9b 4f       	sbci	r25, 0xFB	; 251
 b5e:	2e 81       	ldd	r18, Y+6	; 0x06
 b60:	22 2f       	mov	r18, r18
 b62:	30 e0       	ldi	r19, 0x00	; 0
 b64:	20 55       	subi	r18, 0x50	; 80
 b66:	3b 4f       	sbci	r19, 0xFB	; 251
 b68:	f9 01       	movw	r30, r18
 b6a:	20 81       	ld	r18, Z
 b6c:	28 60       	ori	r18, 0x08	; 8
 b6e:	fc 01       	movw	r30, r24
 b70:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 b72:	8e 81       	ldd	r24, Y+6	; 0x06
 b74:	8f 5f       	subi	r24, 0xFF	; 255
 b76:	8e 83       	std	Y+6, r24	; 0x06
 b78:	8e 81       	ldd	r24, Y+6	; 0x06
 b7a:	88 30       	cpi	r24, 0x08	; 8
 b7c:	58 f3       	brcs	.-42     	; 0xb54 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 b7e:	00 00       	nop
 b80:	26 96       	adiw	r28, 0x06	; 6
 b82:	cd bf       	out	0x3d, r28	; 61
 b84:	de bf       	out	0x3e, r29	; 62
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	08 95       	ret

00000b8c <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 b8c:	cf 93       	push	r28
 b8e:	df 93       	push	r29
 b90:	cd b7       	in	r28, 0x3d	; 61
 b92:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 b94:	0e 94 2e 05 	call	0xa5c	; 0xa5c <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	0e 94 c5 04 	call	0x98a	; 0x98a <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
 b9e:	81 e0       	ldi	r24, 0x01	; 1
 ba0:	0e 94 b6 04 	call	0x96c	; 0x96c <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
 ba4:	80 e0       	ldi	r24, 0x00	; 0
 ba6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
 baa:	81 e0       	ldi	r24, 0x01	; 1
 bac:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	0e 94 01 05 	call	0xa02	; 0xa02 <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
 bb6:	81 e0       	ldi	r24, 0x01	; 1
 bb8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
 bbc:	80 e0       	ldi	r24, 0x00	; 0
 bbe:	0e 94 1f 05 	call	0xa3e	; 0xa3e <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	0e 94 10 05 	call	0xa20	; 0xa20 <B0_MCU_set_dir>

	CLKCTRL_init();
 bc8:	0e 94 8a 03 	call	0x714	; 0x714 <CLKCTRL_init>

	CPUINT_init();
 bcc:	0e 94 92 03 	call	0x724	; 0x724 <CPUINT_init>

	SLPCTRL_init();
 bd0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <SLPCTRL_init>

	BOD_init();
 bd4:	0e 94 82 03 	call	0x704	; 0x704 <BOD_init>
}
 bd8:	00 00       	nop
 bda:	df 91       	pop	r29
 bdc:	cf 91       	pop	r28
 bde:	08 95       	ret

00000be0 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	cd b7       	in	r28, 0x3d	; 61
 be6:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 be8:	80 e0       	ldi	r24, 0x00	; 0
}
 bea:	df 91       	pop	r29
 bec:	cf 91       	pop	r28
 bee:	08 95       	ret

00000bf0 <__cmpsf2>:
 bf0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_cmp>
 bf4:	08 f4       	brcc	.+2      	; 0xbf8 <__cmpsf2+0x8>
 bf6:	81 e0       	ldi	r24, 0x01	; 1
 bf8:	08 95       	ret

00000bfa <__divsf3>:
 bfa:	0e 94 11 06 	call	0xc22	; 0xc22 <__divsf3x>
 bfe:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_round>
 c02:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fp_pscB>
 c06:	58 f0       	brcs	.+22     	; 0xc1e <__divsf3+0x24>
 c08:	0e 94 08 07 	call	0xe10	; 0xe10 <__fp_pscA>
 c0c:	40 f0       	brcs	.+16     	; 0xc1e <__divsf3+0x24>
 c0e:	29 f4       	brne	.+10     	; 0xc1a <__divsf3+0x20>
 c10:	5f 3f       	cpi	r21, 0xFF	; 255
 c12:	29 f0       	breq	.+10     	; 0xc1e <__divsf3+0x24>
 c14:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_inf>
 c18:	51 11       	cpse	r21, r1
 c1a:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_szero>
 c1e:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__fp_nan>

00000c22 <__divsf3x>:
 c22:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fp_split3>
 c26:	68 f3       	brcs	.-38     	; 0xc02 <__divsf3+0x8>

00000c28 <__divsf3_pse>:
 c28:	99 23       	and	r25, r25
 c2a:	b1 f3       	breq	.-20     	; 0xc18 <__divsf3+0x1e>
 c2c:	55 23       	and	r21, r21
 c2e:	91 f3       	breq	.-28     	; 0xc14 <__divsf3+0x1a>
 c30:	95 1b       	sub	r25, r21
 c32:	55 0b       	sbc	r21, r21
 c34:	bb 27       	eor	r27, r27
 c36:	aa 27       	eor	r26, r26
 c38:	62 17       	cp	r22, r18
 c3a:	73 07       	cpc	r23, r19
 c3c:	84 07       	cpc	r24, r20
 c3e:	38 f0       	brcs	.+14     	; 0xc4e <__divsf3_pse+0x26>
 c40:	9f 5f       	subi	r25, 0xFF	; 255
 c42:	5f 4f       	sbci	r21, 0xFF	; 255
 c44:	22 0f       	add	r18, r18
 c46:	33 1f       	adc	r19, r19
 c48:	44 1f       	adc	r20, r20
 c4a:	aa 1f       	adc	r26, r26
 c4c:	a9 f3       	breq	.-22     	; 0xc38 <__divsf3_pse+0x10>
 c4e:	35 d0       	rcall	.+106    	; 0xcba <__divsf3_pse+0x92>
 c50:	0e 2e       	mov	r0, r30
 c52:	3a f0       	brmi	.+14     	; 0xc62 <__divsf3_pse+0x3a>
 c54:	e0 e8       	ldi	r30, 0x80	; 128
 c56:	32 d0       	rcall	.+100    	; 0xcbc <__divsf3_pse+0x94>
 c58:	91 50       	subi	r25, 0x01	; 1
 c5a:	50 40       	sbci	r21, 0x00	; 0
 c5c:	e6 95       	lsr	r30
 c5e:	00 1c       	adc	r0, r0
 c60:	ca f7       	brpl	.-14     	; 0xc54 <__divsf3_pse+0x2c>
 c62:	2b d0       	rcall	.+86     	; 0xcba <__divsf3_pse+0x92>
 c64:	fe 2f       	mov	r31, r30
 c66:	29 d0       	rcall	.+82     	; 0xcba <__divsf3_pse+0x92>
 c68:	66 0f       	add	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	bb 1f       	adc	r27, r27
 c70:	26 17       	cp	r18, r22
 c72:	37 07       	cpc	r19, r23
 c74:	48 07       	cpc	r20, r24
 c76:	ab 07       	cpc	r26, r27
 c78:	b0 e8       	ldi	r27, 0x80	; 128
 c7a:	09 f0       	breq	.+2      	; 0xc7e <__divsf3_pse+0x56>
 c7c:	bb 0b       	sbc	r27, r27
 c7e:	80 2d       	mov	r24, r0
 c80:	bf 01       	movw	r22, r30
 c82:	ff 27       	eor	r31, r31
 c84:	93 58       	subi	r25, 0x83	; 131
 c86:	5f 4f       	sbci	r21, 0xFF	; 255
 c88:	3a f0       	brmi	.+14     	; 0xc98 <__divsf3_pse+0x70>
 c8a:	9e 3f       	cpi	r25, 0xFE	; 254
 c8c:	51 05       	cpc	r21, r1
 c8e:	78 f0       	brcs	.+30     	; 0xcae <__divsf3_pse+0x86>
 c90:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_inf>
 c94:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_szero>
 c98:	5f 3f       	cpi	r21, 0xFF	; 255
 c9a:	e4 f3       	brlt	.-8      	; 0xc94 <__divsf3_pse+0x6c>
 c9c:	98 3e       	cpi	r25, 0xE8	; 232
 c9e:	d4 f3       	brlt	.-12     	; 0xc94 <__divsf3_pse+0x6c>
 ca0:	86 95       	lsr	r24
 ca2:	77 95       	ror	r23
 ca4:	67 95       	ror	r22
 ca6:	b7 95       	ror	r27
 ca8:	f7 95       	ror	r31
 caa:	9f 5f       	subi	r25, 0xFF	; 255
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__divsf3_pse+0x78>
 cae:	88 0f       	add	r24, r24
 cb0:	91 1d       	adc	r25, r1
 cb2:	96 95       	lsr	r25
 cb4:	87 95       	ror	r24
 cb6:	97 f9       	bld	r25, 7
 cb8:	08 95       	ret
 cba:	e1 e0       	ldi	r30, 0x01	; 1
 cbc:	66 0f       	add	r22, r22
 cbe:	77 1f       	adc	r23, r23
 cc0:	88 1f       	adc	r24, r24
 cc2:	bb 1f       	adc	r27, r27
 cc4:	62 17       	cp	r22, r18
 cc6:	73 07       	cpc	r23, r19
 cc8:	84 07       	cpc	r24, r20
 cca:	ba 07       	cpc	r27, r26
 ccc:	20 f0       	brcs	.+8      	; 0xcd6 <__divsf3_pse+0xae>
 cce:	62 1b       	sub	r22, r18
 cd0:	73 0b       	sbc	r23, r19
 cd2:	84 0b       	sbc	r24, r20
 cd4:	ba 0b       	sbc	r27, r26
 cd6:	ee 1f       	adc	r30, r30
 cd8:	88 f7       	brcc	.-30     	; 0xcbc <__divsf3_pse+0x94>
 cda:	e0 95       	com	r30
 cdc:	08 95       	ret

00000cde <__fixunssfsi>:
 cde:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__fp_splitA>
 ce2:	88 f0       	brcs	.+34     	; 0xd06 <__fixunssfsi+0x28>
 ce4:	9f 57       	subi	r25, 0x7F	; 127
 ce6:	98 f0       	brcs	.+38     	; 0xd0e <__fixunssfsi+0x30>
 ce8:	b9 2f       	mov	r27, r25
 cea:	99 27       	eor	r25, r25
 cec:	b7 51       	subi	r27, 0x17	; 23
 cee:	b0 f0       	brcs	.+44     	; 0xd1c <__fixunssfsi+0x3e>
 cf0:	e1 f0       	breq	.+56     	; 0xd2a <__fixunssfsi+0x4c>
 cf2:	66 0f       	add	r22, r22
 cf4:	77 1f       	adc	r23, r23
 cf6:	88 1f       	adc	r24, r24
 cf8:	99 1f       	adc	r25, r25
 cfa:	1a f0       	brmi	.+6      	; 0xd02 <__fixunssfsi+0x24>
 cfc:	ba 95       	dec	r27
 cfe:	c9 f7       	brne	.-14     	; 0xcf2 <__fixunssfsi+0x14>
 d00:	14 c0       	rjmp	.+40     	; 0xd2a <__fixunssfsi+0x4c>
 d02:	b1 30       	cpi	r27, 0x01	; 1
 d04:	91 f0       	breq	.+36     	; 0xd2a <__fixunssfsi+0x4c>
 d06:	0e 94 49 07 	call	0xe92	; 0xe92 <__fp_zero>
 d0a:	b1 e0       	ldi	r27, 0x01	; 1
 d0c:	08 95       	ret
 d0e:	0c 94 49 07 	jmp	0xe92	; 0xe92 <__fp_zero>
 d12:	67 2f       	mov	r22, r23
 d14:	78 2f       	mov	r23, r24
 d16:	88 27       	eor	r24, r24
 d18:	b8 5f       	subi	r27, 0xF8	; 248
 d1a:	39 f0       	breq	.+14     	; 0xd2a <__fixunssfsi+0x4c>
 d1c:	b9 3f       	cpi	r27, 0xF9	; 249
 d1e:	cc f3       	brlt	.-14     	; 0xd12 <__fixunssfsi+0x34>
 d20:	86 95       	lsr	r24
 d22:	77 95       	ror	r23
 d24:	67 95       	ror	r22
 d26:	b3 95       	inc	r27
 d28:	d9 f7       	brne	.-10     	; 0xd20 <__fixunssfsi+0x42>
 d2a:	3e f4       	brtc	.+14     	; 0xd3a <__fixunssfsi+0x5c>
 d2c:	90 95       	com	r25
 d2e:	80 95       	com	r24
 d30:	70 95       	com	r23
 d32:	61 95       	neg	r22
 d34:	7f 4f       	sbci	r23, 0xFF	; 255
 d36:	8f 4f       	sbci	r24, 0xFF	; 255
 d38:	9f 4f       	sbci	r25, 0xFF	; 255
 d3a:	08 95       	ret

00000d3c <__floatunsisf>:
 d3c:	e8 94       	clt
 d3e:	09 c0       	rjmp	.+18     	; 0xd52 <__floatsisf+0x12>

00000d40 <__floatsisf>:
 d40:	97 fb       	bst	r25, 7
 d42:	3e f4       	brtc	.+14     	; 0xd52 <__floatsisf+0x12>
 d44:	90 95       	com	r25
 d46:	80 95       	com	r24
 d48:	70 95       	com	r23
 d4a:	61 95       	neg	r22
 d4c:	7f 4f       	sbci	r23, 0xFF	; 255
 d4e:	8f 4f       	sbci	r24, 0xFF	; 255
 d50:	9f 4f       	sbci	r25, 0xFF	; 255
 d52:	99 23       	and	r25, r25
 d54:	a9 f0       	breq	.+42     	; 0xd80 <__floatsisf+0x40>
 d56:	f9 2f       	mov	r31, r25
 d58:	96 e9       	ldi	r25, 0x96	; 150
 d5a:	bb 27       	eor	r27, r27
 d5c:	93 95       	inc	r25
 d5e:	f6 95       	lsr	r31
 d60:	87 95       	ror	r24
 d62:	77 95       	ror	r23
 d64:	67 95       	ror	r22
 d66:	b7 95       	ror	r27
 d68:	f1 11       	cpse	r31, r1
 d6a:	f8 cf       	rjmp	.-16     	; 0xd5c <__floatsisf+0x1c>
 d6c:	fa f4       	brpl	.+62     	; 0xdac <__floatsisf+0x6c>
 d6e:	bb 0f       	add	r27, r27
 d70:	11 f4       	brne	.+4      	; 0xd76 <__floatsisf+0x36>
 d72:	60 ff       	sbrs	r22, 0
 d74:	1b c0       	rjmp	.+54     	; 0xdac <__floatsisf+0x6c>
 d76:	6f 5f       	subi	r22, 0xFF	; 255
 d78:	7f 4f       	sbci	r23, 0xFF	; 255
 d7a:	8f 4f       	sbci	r24, 0xFF	; 255
 d7c:	9f 4f       	sbci	r25, 0xFF	; 255
 d7e:	16 c0       	rjmp	.+44     	; 0xdac <__floatsisf+0x6c>
 d80:	88 23       	and	r24, r24
 d82:	11 f0       	breq	.+4      	; 0xd88 <__floatsisf+0x48>
 d84:	96 e9       	ldi	r25, 0x96	; 150
 d86:	11 c0       	rjmp	.+34     	; 0xdaa <__floatsisf+0x6a>
 d88:	77 23       	and	r23, r23
 d8a:	21 f0       	breq	.+8      	; 0xd94 <__floatsisf+0x54>
 d8c:	9e e8       	ldi	r25, 0x8E	; 142
 d8e:	87 2f       	mov	r24, r23
 d90:	76 2f       	mov	r23, r22
 d92:	05 c0       	rjmp	.+10     	; 0xd9e <__floatsisf+0x5e>
 d94:	66 23       	and	r22, r22
 d96:	71 f0       	breq	.+28     	; 0xdb4 <__floatsisf+0x74>
 d98:	96 e8       	ldi	r25, 0x86	; 134
 d9a:	86 2f       	mov	r24, r22
 d9c:	70 e0       	ldi	r23, 0x00	; 0
 d9e:	60 e0       	ldi	r22, 0x00	; 0
 da0:	2a f0       	brmi	.+10     	; 0xdac <__floatsisf+0x6c>
 da2:	9a 95       	dec	r25
 da4:	66 0f       	add	r22, r22
 da6:	77 1f       	adc	r23, r23
 da8:	88 1f       	adc	r24, r24
 daa:	da f7       	brpl	.-10     	; 0xda2 <__floatsisf+0x62>
 dac:	88 0f       	add	r24, r24
 dae:	96 95       	lsr	r25
 db0:	87 95       	ror	r24
 db2:	97 f9       	bld	r25, 7
 db4:	08 95       	ret

00000db6 <__fp_cmp>:
 db6:	99 0f       	add	r25, r25
 db8:	00 08       	sbc	r0, r0
 dba:	55 0f       	add	r21, r21
 dbc:	aa 0b       	sbc	r26, r26
 dbe:	e0 e8       	ldi	r30, 0x80	; 128
 dc0:	fe ef       	ldi	r31, 0xFE	; 254
 dc2:	16 16       	cp	r1, r22
 dc4:	17 06       	cpc	r1, r23
 dc6:	e8 07       	cpc	r30, r24
 dc8:	f9 07       	cpc	r31, r25
 dca:	c0 f0       	brcs	.+48     	; 0xdfc <__fp_cmp+0x46>
 dcc:	12 16       	cp	r1, r18
 dce:	13 06       	cpc	r1, r19
 dd0:	e4 07       	cpc	r30, r20
 dd2:	f5 07       	cpc	r31, r21
 dd4:	98 f0       	brcs	.+38     	; 0xdfc <__fp_cmp+0x46>
 dd6:	62 1b       	sub	r22, r18
 dd8:	73 0b       	sbc	r23, r19
 dda:	84 0b       	sbc	r24, r20
 ddc:	95 0b       	sbc	r25, r21
 dde:	39 f4       	brne	.+14     	; 0xdee <__fp_cmp+0x38>
 de0:	0a 26       	eor	r0, r26
 de2:	61 f0       	breq	.+24     	; 0xdfc <__fp_cmp+0x46>
 de4:	23 2b       	or	r18, r19
 de6:	24 2b       	or	r18, r20
 de8:	25 2b       	or	r18, r21
 dea:	21 f4       	brne	.+8      	; 0xdf4 <__fp_cmp+0x3e>
 dec:	08 95       	ret
 dee:	0a 26       	eor	r0, r26
 df0:	09 f4       	brne	.+2      	; 0xdf4 <__fp_cmp+0x3e>
 df2:	a1 40       	sbci	r26, 0x01	; 1
 df4:	a6 95       	lsr	r26
 df6:	8f ef       	ldi	r24, 0xFF	; 255
 df8:	81 1d       	adc	r24, r1
 dfa:	81 1d       	adc	r24, r1
 dfc:	08 95       	ret

00000dfe <__fp_inf>:
 dfe:	97 f9       	bld	r25, 7
 e00:	9f 67       	ori	r25, 0x7F	; 127
 e02:	80 e8       	ldi	r24, 0x80	; 128
 e04:	70 e0       	ldi	r23, 0x00	; 0
 e06:	60 e0       	ldi	r22, 0x00	; 0
 e08:	08 95       	ret

00000e0a <__fp_nan>:
 e0a:	9f ef       	ldi	r25, 0xFF	; 255
 e0c:	80 ec       	ldi	r24, 0xC0	; 192
 e0e:	08 95       	ret

00000e10 <__fp_pscA>:
 e10:	00 24       	eor	r0, r0
 e12:	0a 94       	dec	r0
 e14:	16 16       	cp	r1, r22
 e16:	17 06       	cpc	r1, r23
 e18:	18 06       	cpc	r1, r24
 e1a:	09 06       	cpc	r0, r25
 e1c:	08 95       	ret

00000e1e <__fp_pscB>:
 e1e:	00 24       	eor	r0, r0
 e20:	0a 94       	dec	r0
 e22:	12 16       	cp	r1, r18
 e24:	13 06       	cpc	r1, r19
 e26:	14 06       	cpc	r1, r20
 e28:	05 06       	cpc	r0, r21
 e2a:	08 95       	ret

00000e2c <__fp_round>:
 e2c:	09 2e       	mov	r0, r25
 e2e:	03 94       	inc	r0
 e30:	00 0c       	add	r0, r0
 e32:	11 f4       	brne	.+4      	; 0xe38 <__fp_round+0xc>
 e34:	88 23       	and	r24, r24
 e36:	52 f0       	brmi	.+20     	; 0xe4c <__fp_round+0x20>
 e38:	bb 0f       	add	r27, r27
 e3a:	40 f4       	brcc	.+16     	; 0xe4c <__fp_round+0x20>
 e3c:	bf 2b       	or	r27, r31
 e3e:	11 f4       	brne	.+4      	; 0xe44 <__fp_round+0x18>
 e40:	60 ff       	sbrs	r22, 0
 e42:	04 c0       	rjmp	.+8      	; 0xe4c <__fp_round+0x20>
 e44:	6f 5f       	subi	r22, 0xFF	; 255
 e46:	7f 4f       	sbci	r23, 0xFF	; 255
 e48:	8f 4f       	sbci	r24, 0xFF	; 255
 e4a:	9f 4f       	sbci	r25, 0xFF	; 255
 e4c:	08 95       	ret

00000e4e <__fp_split3>:
 e4e:	57 fd       	sbrc	r21, 7
 e50:	90 58       	subi	r25, 0x80	; 128
 e52:	44 0f       	add	r20, r20
 e54:	55 1f       	adc	r21, r21
 e56:	59 f0       	breq	.+22     	; 0xe6e <__fp_splitA+0x10>
 e58:	5f 3f       	cpi	r21, 0xFF	; 255
 e5a:	71 f0       	breq	.+28     	; 0xe78 <__fp_splitA+0x1a>
 e5c:	47 95       	ror	r20

00000e5e <__fp_splitA>:
 e5e:	88 0f       	add	r24, r24
 e60:	97 fb       	bst	r25, 7
 e62:	99 1f       	adc	r25, r25
 e64:	61 f0       	breq	.+24     	; 0xe7e <__fp_splitA+0x20>
 e66:	9f 3f       	cpi	r25, 0xFF	; 255
 e68:	79 f0       	breq	.+30     	; 0xe88 <__fp_splitA+0x2a>
 e6a:	87 95       	ror	r24
 e6c:	08 95       	ret
 e6e:	12 16       	cp	r1, r18
 e70:	13 06       	cpc	r1, r19
 e72:	14 06       	cpc	r1, r20
 e74:	55 1f       	adc	r21, r21
 e76:	f2 cf       	rjmp	.-28     	; 0xe5c <__fp_split3+0xe>
 e78:	46 95       	lsr	r20
 e7a:	f1 df       	rcall	.-30     	; 0xe5e <__fp_splitA>
 e7c:	08 c0       	rjmp	.+16     	; 0xe8e <__fp_splitA+0x30>
 e7e:	16 16       	cp	r1, r22
 e80:	17 06       	cpc	r1, r23
 e82:	18 06       	cpc	r1, r24
 e84:	99 1f       	adc	r25, r25
 e86:	f1 cf       	rjmp	.-30     	; 0xe6a <__fp_splitA+0xc>
 e88:	86 95       	lsr	r24
 e8a:	71 05       	cpc	r23, r1
 e8c:	61 05       	cpc	r22, r1
 e8e:	08 94       	sec
 e90:	08 95       	ret

00000e92 <__fp_zero>:
 e92:	e8 94       	clt

00000e94 <__fp_szero>:
 e94:	bb 27       	eor	r27, r27
 e96:	66 27       	eor	r22, r22
 e98:	77 27       	eor	r23, r23
 e9a:	cb 01       	movw	r24, r22
 e9c:	97 f9       	bld	r25, 7
 e9e:	08 95       	ret

00000ea0 <__gesf2>:
 ea0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_cmp>
 ea4:	08 f4       	brcc	.+2      	; 0xea8 <__gesf2+0x8>
 ea6:	8f ef       	ldi	r24, 0xFF	; 255
 ea8:	08 95       	ret

00000eaa <__mulsf3>:
 eaa:	0e 94 68 07 	call	0xed0	; 0xed0 <__mulsf3x>
 eae:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <__fp_round>
 eb2:	0e 94 08 07 	call	0xe10	; 0xe10 <__fp_pscA>
 eb6:	38 f0       	brcs	.+14     	; 0xec6 <__mulsf3+0x1c>
 eb8:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fp_pscB>
 ebc:	20 f0       	brcs	.+8      	; 0xec6 <__mulsf3+0x1c>
 ebe:	95 23       	and	r25, r21
 ec0:	11 f0       	breq	.+4      	; 0xec6 <__mulsf3+0x1c>
 ec2:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_inf>
 ec6:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__fp_nan>
 eca:	11 24       	eor	r1, r1
 ecc:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_szero>

00000ed0 <__mulsf3x>:
 ed0:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fp_split3>
 ed4:	70 f3       	brcs	.-36     	; 0xeb2 <__mulsf3+0x8>

00000ed6 <__mulsf3_pse>:
 ed6:	95 9f       	mul	r25, r21
 ed8:	c1 f3       	breq	.-16     	; 0xeca <__mulsf3+0x20>
 eda:	95 0f       	add	r25, r21
 edc:	50 e0       	ldi	r21, 0x00	; 0
 ede:	55 1f       	adc	r21, r21
 ee0:	62 9f       	mul	r22, r18
 ee2:	f0 01       	movw	r30, r0
 ee4:	72 9f       	mul	r23, r18
 ee6:	bb 27       	eor	r27, r27
 ee8:	f0 0d       	add	r31, r0
 eea:	b1 1d       	adc	r27, r1
 eec:	63 9f       	mul	r22, r19
 eee:	aa 27       	eor	r26, r26
 ef0:	f0 0d       	add	r31, r0
 ef2:	b1 1d       	adc	r27, r1
 ef4:	aa 1f       	adc	r26, r26
 ef6:	64 9f       	mul	r22, r20
 ef8:	66 27       	eor	r22, r22
 efa:	b0 0d       	add	r27, r0
 efc:	a1 1d       	adc	r26, r1
 efe:	66 1f       	adc	r22, r22
 f00:	82 9f       	mul	r24, r18
 f02:	22 27       	eor	r18, r18
 f04:	b0 0d       	add	r27, r0
 f06:	a1 1d       	adc	r26, r1
 f08:	62 1f       	adc	r22, r18
 f0a:	73 9f       	mul	r23, r19
 f0c:	b0 0d       	add	r27, r0
 f0e:	a1 1d       	adc	r26, r1
 f10:	62 1f       	adc	r22, r18
 f12:	83 9f       	mul	r24, r19
 f14:	a0 0d       	add	r26, r0
 f16:	61 1d       	adc	r22, r1
 f18:	22 1f       	adc	r18, r18
 f1a:	74 9f       	mul	r23, r20
 f1c:	33 27       	eor	r19, r19
 f1e:	a0 0d       	add	r26, r0
 f20:	61 1d       	adc	r22, r1
 f22:	23 1f       	adc	r18, r19
 f24:	84 9f       	mul	r24, r20
 f26:	60 0d       	add	r22, r0
 f28:	21 1d       	adc	r18, r1
 f2a:	82 2f       	mov	r24, r18
 f2c:	76 2f       	mov	r23, r22
 f2e:	6a 2f       	mov	r22, r26
 f30:	11 24       	eor	r1, r1
 f32:	9f 57       	subi	r25, 0x7F	; 127
 f34:	50 40       	sbci	r21, 0x00	; 0
 f36:	9a f0       	brmi	.+38     	; 0xf5e <__mulsf3_pse+0x88>
 f38:	f1 f0       	breq	.+60     	; 0xf76 <__mulsf3_pse+0xa0>
 f3a:	88 23       	and	r24, r24
 f3c:	4a f0       	brmi	.+18     	; 0xf50 <__mulsf3_pse+0x7a>
 f3e:	ee 0f       	add	r30, r30
 f40:	ff 1f       	adc	r31, r31
 f42:	bb 1f       	adc	r27, r27
 f44:	66 1f       	adc	r22, r22
 f46:	77 1f       	adc	r23, r23
 f48:	88 1f       	adc	r24, r24
 f4a:	91 50       	subi	r25, 0x01	; 1
 f4c:	50 40       	sbci	r21, 0x00	; 0
 f4e:	a9 f7       	brne	.-22     	; 0xf3a <__mulsf3_pse+0x64>
 f50:	9e 3f       	cpi	r25, 0xFE	; 254
 f52:	51 05       	cpc	r21, r1
 f54:	80 f0       	brcs	.+32     	; 0xf76 <__mulsf3_pse+0xa0>
 f56:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__fp_inf>
 f5a:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__fp_szero>
 f5e:	5f 3f       	cpi	r21, 0xFF	; 255
 f60:	e4 f3       	brlt	.-8      	; 0xf5a <__mulsf3_pse+0x84>
 f62:	98 3e       	cpi	r25, 0xE8	; 232
 f64:	d4 f3       	brlt	.-12     	; 0xf5a <__mulsf3_pse+0x84>
 f66:	86 95       	lsr	r24
 f68:	77 95       	ror	r23
 f6a:	67 95       	ror	r22
 f6c:	b7 95       	ror	r27
 f6e:	f7 95       	ror	r31
 f70:	e7 95       	ror	r30
 f72:	9f 5f       	subi	r25, 0xFF	; 255
 f74:	c1 f7       	brne	.-16     	; 0xf66 <__mulsf3_pse+0x90>
 f76:	fe 2b       	or	r31, r30
 f78:	88 0f       	add	r24, r24
 f7a:	91 1d       	adc	r25, r1
 f7c:	96 95       	lsr	r25
 f7e:	87 95       	ror	r24
 f80:	97 f9       	bld	r25, 7
 f82:	08 95       	ret

00000f84 <_exit>:
 f84:	f8 94       	cli

00000f86 <__stop_program>:
 f86:	ff cf       	rjmp	.-2      	; 0xf86 <__stop_program>
