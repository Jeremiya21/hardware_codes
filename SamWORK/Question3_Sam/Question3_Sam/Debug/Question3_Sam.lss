
Question3_Sam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000612  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000170  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cf7  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000252f  00000000  00000000  0000353f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000abe  00000000  00000000  00005a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  0000652c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001382  00000000  00000000  0000688c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005df  00000000  00000000  00007c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000081ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  a0:	0c 94 07 03 	jmp	0x60e	; 0x60e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <functionCall>:

#include "functionCall.h"
#include <stdlib.h>

void functionCall(uint16_t delay_R,uint16_t delay_B,uint16_t delay_G)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	26 97       	sbiw	r28, 0x06	; 6
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	6b 83       	std	Y+3, r22	; 0x03
  d0:	7c 83       	std	Y+4, r23	; 0x04
  d2:	4d 83       	std	Y+5, r20	; 0x05
  d4:	5e 83       	std	Y+6, r21	; 0x06
	
	
  d6:	00 00       	nop
  d8:	26 96       	adiw	r28, 0x06	; 6
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	de bf       	out	0x3e, r29	; 62
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <main>:
#include "functionCall.h"

int main(void)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	26 97       	sbiw	r28, 0x06	; 6
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  f2:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	uint16_t delay_R,delay_G,delay_B;
	
	delay_B=100;
  f6:	84 e6       	ldi	r24, 0x64	; 100
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	9a 83       	std	Y+2, r25	; 0x02
	delay_G=500;
  fe:	84 ef       	ldi	r24, 0xF4	; 244
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	8b 83       	std	Y+3, r24	; 0x03
 104:	9c 83       	std	Y+4, r25	; 0x04
	delay_R=1000;
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	8d 83       	std	Y+5, r24	; 0x05
 10c:	9e 83       	std	Y+6, r25	; 0x06

	while (1) 
	{
		/* Replace with your application code */
		functionCall(delay_R,delay_G,delay_B);
 10e:	49 81       	ldd	r20, Y+1	; 0x01
 110:	5a 81       	ldd	r21, Y+2	; 0x02
 112:	2b 81       	ldd	r18, Y+3	; 0x03
 114:	3c 81       	ldd	r19, Y+4	; 0x04
 116:	8d 81       	ldd	r24, Y+5	; 0x05
 118:	9e 81       	ldd	r25, Y+6	; 0x06
 11a:	b9 01       	movw	r22, r18
 11c:	0e 94 5e 00 	call	0xbc	; 0xbc <functionCall>
	}
 120:	f6 cf       	rjmp	.-20     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>

00000122 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 12a:	80 e0       	ldi	r24, 0x00	; 0
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 13a:	80 e0       	ldi	r24, 0x00	; 0
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 14a:	80 e0       	ldi	r24, 0x00	; 0
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	00 d0       	rcall	.+0      	; 0x158 <PORTA_set_pin_dir+0x6>
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 160:	8a 81       	ldd	r24, Y+2	; 0x02
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	91 05       	cpc	r25, r1
 16a:	e1 f0       	breq	.+56     	; 0x1a4 <PORTA_set_pin_dir+0x52>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	91 05       	cpc	r25, r1
 170:	71 f1       	breq	.+92     	; 0x1ce <PORTA_set_pin_dir+0x7c>
 172:	89 2b       	or	r24, r25
 174:	09 f0       	breq	.+2      	; 0x178 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 176:	3b c0       	rjmp	.+118    	; 0x1ee <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	fc 01       	movw	r30, r24
 182:	80 81       	ld	r24, Z
 184:	68 2f       	mov	r22, r24
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	48 2f       	mov	r20, r24
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <PORTA_set_pin_dir+0x44>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	4a 95       	dec	r20
 198:	e2 f7       	brpl	.-8      	; 0x192 <PORTA_set_pin_dir+0x40>
 19a:	80 95       	com	r24
 19c:	86 23       	and	r24, r22
 19e:	f9 01       	movw	r30, r18
 1a0:	80 83       	st	Z, r24
		break;
 1a2:	25 c0       	rjmp	.+74     	; 0x1ee <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	68 2f       	mov	r22, r24
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	48 2f       	mov	r20, r24
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <PORTA_set_pin_dir+0x70>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <PORTA_set_pin_dir+0x6c>
 1c6:	86 2b       	or	r24, r22
 1c8:	f9 01       	movw	r30, r18
 1ca:	80 83       	st	Z, r24
		break;
 1cc:	10 c0       	rjmp	.+32     	; 0x1ee <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	80 5f       	subi	r24, 0xF0	; 240
 1d6:	9b 4f       	sbci	r25, 0xFB	; 251
 1d8:	29 81       	ldd	r18, Y+1	; 0x01
 1da:	22 2f       	mov	r18, r18
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	20 5f       	subi	r18, 0xF0	; 240
 1e0:	3b 4f       	sbci	r19, 0xFB	; 251
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	28 60       	ori	r18, 0x08	; 8
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
		break;
 1ec:	00 00       	nop
	default:
		break;
	}
}
 1ee:	00 00       	nop
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	00 d0       	rcall	.+0      	; 0x200 <PORTA_set_pin_level+0x6>
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	88 23       	and	r24, r24
 20c:	a9 f0       	breq	.+42     	; 0x238 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	81 81       	ldd	r24, Z+1	; 0x01
 21a:	68 2f       	mov	r22, r24
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	48 2f       	mov	r20, r24
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <PORTA_set_pin_level+0x32>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	4a 95       	dec	r20
 22e:	e2 f7       	brpl	.-8      	; 0x228 <PORTA_set_pin_level+0x2e>
 230:	86 2b       	or	r24, r22
 232:	f9 01       	movw	r30, r18
 234:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 236:	15 c0       	rjmp	.+42     	; 0x262 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	81 81       	ldd	r24, Z+1	; 0x01
 244:	68 2f       	mov	r22, r24
 246:	89 81       	ldd	r24, Y+1	; 0x01
 248:	48 2f       	mov	r20, r24
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <PORTA_set_pin_level+0x5c>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	4a 95       	dec	r20
 258:	e2 f7       	brpl	.-8      	; 0x252 <PORTA_set_pin_level+0x58>
 25a:	80 95       	com	r24
 25c:	86 23       	and	r24, r22
 25e:	f9 01       	movw	r30, r18
 260:	81 83       	std	Z+1, r24	; 0x01
	}
}
 262:	00 00       	nop
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	00 d0       	rcall	.+0      	; 0x274 <PORTD_set_pin_dir+0x6>
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	89 83       	std	Y+1, r24	; 0x01
 27a:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	88 2f       	mov	r24, r24
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	e1 f0       	breq	.+56     	; 0x2c0 <PORTD_set_pin_dir+0x52>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	91 05       	cpc	r25, r1
 28c:	71 f1       	breq	.+92     	; 0x2ea <PORTD_set_pin_dir+0x7c>
 28e:	89 2b       	or	r24, r25
 290:	09 f0       	breq	.+2      	; 0x294 <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 292:	3b c0       	rjmp	.+118    	; 0x30a <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
 294:	8c e0       	ldi	r24, 0x0C	; 12
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	2c e0       	ldi	r18, 0x0C	; 12
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	20 81       	ld	r18, Z
 2a0:	62 2f       	mov	r22, r18
 2a2:	29 81       	ldd	r18, Y+1	; 0x01
 2a4:	42 2f       	mov	r20, r18
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <PORTD_set_pin_dir+0x44>
 2ae:	22 0f       	add	r18, r18
 2b0:	33 1f       	adc	r19, r19
 2b2:	4a 95       	dec	r20
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <PORTD_set_pin_dir+0x40>
 2b6:	20 95       	com	r18
 2b8:	26 23       	and	r18, r22
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
		break;
 2be:	25 c0       	rjmp	.+74     	; 0x30a <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 2c0:	8c e0       	ldi	r24, 0x0C	; 12
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	2c e0       	ldi	r18, 0x0C	; 12
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	20 81       	ld	r18, Z
 2cc:	62 2f       	mov	r22, r18
 2ce:	29 81       	ldd	r18, Y+1	; 0x01
 2d0:	42 2f       	mov	r20, r18
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <PORTD_set_pin_dir+0x70>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	4a 95       	dec	r20
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <PORTD_set_pin_dir+0x6c>
 2e2:	26 2b       	or	r18, r22
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
		break;
 2e8:	10 c0       	rjmp	.+32     	; 0x30a <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 2ea:	89 81       	ldd	r24, Y+1	; 0x01
 2ec:	88 2f       	mov	r24, r24
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	80 59       	subi	r24, 0x90	; 144
 2f2:	9b 4f       	sbci	r25, 0xFB	; 251
 2f4:	29 81       	ldd	r18, Y+1	; 0x01
 2f6:	22 2f       	mov	r18, r18
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	20 59       	subi	r18, 0x90	; 144
 2fc:	3b 4f       	sbci	r19, 0xFB	; 251
 2fe:	f9 01       	movw	r30, r18
 300:	20 81       	ld	r18, Z
 302:	28 60       	ori	r18, 0x08	; 8
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
		break;
 308:	00 00       	nop
	default:
		break;
	}
}
 30a:	00 00       	nop
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	00 d0       	rcall	.+0      	; 0x31c <PORTD_set_pin_level+0x6>
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	88 23       	and	r24, r24
 328:	a9 f0       	breq	.+42     	; 0x354 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 32a:	8c e0       	ldi	r24, 0x0C	; 12
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	2c e0       	ldi	r18, 0x0C	; 12
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	f9 01       	movw	r30, r18
 334:	21 81       	ldd	r18, Z+1	; 0x01
 336:	62 2f       	mov	r22, r18
 338:	29 81       	ldd	r18, Y+1	; 0x01
 33a:	42 2f       	mov	r20, r18
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <PORTD_set_pin_level+0x32>
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	4a 95       	dec	r20
 34a:	e2 f7       	brpl	.-8      	; 0x344 <PORTD_set_pin_level+0x2e>
 34c:	26 2b       	or	r18, r22
 34e:	fc 01       	movw	r30, r24
 350:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 352:	15 c0       	rjmp	.+42     	; 0x37e <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 354:	8c e0       	ldi	r24, 0x0C	; 12
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	2c e0       	ldi	r18, 0x0C	; 12
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	21 81       	ldd	r18, Z+1	; 0x01
 360:	62 2f       	mov	r22, r18
 362:	29 81       	ldd	r18, Y+1	; 0x01
 364:	42 2f       	mov	r20, r18
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <PORTD_set_pin_level+0x5c>
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	4a 95       	dec	r20
 374:	e2 f7       	brpl	.-8      	; 0x36e <PORTD_set_pin_level+0x58>
 376:	20 95       	com	r18
 378:	26 23       	and	r18, r22
 37a:	fc 01       	movw	r30, r24
 37c:	21 83       	std	Z+1, r18	; 0x01
	}
}
 37e:	00 00       	nop
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	1f 92       	push	r1
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
 396:	69 81       	ldd	r22, Y+1	; 0x01
 398:	83 e0       	ldi	r24, 0x03	; 3
 39a:	0e 94 a9 00 	call	0x152	; 0x152 <PORTA_set_pin_dir>
}
 39e:	00 00       	nop
 3a0:	0f 90       	pop	r0
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	1f 92       	push	r1
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 3b4:	69 81       	ldd	r22, Y+1	; 0x01
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <PORTA_set_pin_level>
}
 3bc:	00 00       	nop
 3be:	0f 90       	pop	r0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	1f 92       	push	r1
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
 3d2:	69 81       	ldd	r22, Y+1	; 0x01
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 37 01 	call	0x26e	; 0x26e <PORTD_set_pin_dir>
}
 3da:	00 00       	nop
 3dc:	0f 90       	pop	r0
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	1f 92       	push	r1
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 3f0:	69 81       	ldd	r22, Y+1	; 0x01
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 8b 01 	call	0x316	; 0x316 <PORTD_set_pin_level>
}
 3f8:	00 00       	nop
 3fa:	0f 90       	pop	r0
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	1f 92       	push	r1
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
 40e:	69 81       	ldd	r22, Y+1	; 0x01
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	0e 94 37 01 	call	0x26e	; 0x26e <PORTD_set_pin_dir>
}
 416:	00 00       	nop
 418:	0f 90       	pop	r0
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	1f 92       	push	r1
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 42c:	69 81       	ldd	r22, Y+1	; 0x01
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 8b 01 	call	0x316	; 0x316 <PORTD_set_pin_level>
}
 434:	00 00       	nop
 436:	0f 90       	pop	r0
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	1f 92       	push	r1
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
 44a:	69 81       	ldd	r22, Y+1	; 0x01
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	0e 94 37 01 	call	0x26e	; 0x26e <PORTD_set_pin_dir>
}
 452:	00 00       	nop
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	1f 92       	push	r1
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 468:	69 81       	ldd	r22, Y+1	; 0x01
 46a:	82 e0       	ldi	r24, 0x02	; 2
 46c:	0e 94 8b 01 	call	0x316	; 0x316 <PORTD_set_pin_level>
}
 470:	00 00       	nop
 472:	0f 90       	pop	r0
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	26 97       	sbiw	r28, 0x06	; 6
 484:	cd bf       	out	0x3d, r28	; 61
 486:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 488:	19 82       	std	Y+1, r1	; 0x01
 48a:	12 c0       	rjmp	.+36     	; 0x4b0 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 48c:	89 81       	ldd	r24, Y+1	; 0x01
 48e:	88 2f       	mov	r24, r24
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	80 5f       	subi	r24, 0xF0	; 240
 494:	9b 4f       	sbci	r25, 0xFB	; 251
 496:	29 81       	ldd	r18, Y+1	; 0x01
 498:	22 2f       	mov	r18, r18
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	20 5f       	subi	r18, 0xF0	; 240
 49e:	3b 4f       	sbci	r19, 0xFB	; 251
 4a0:	f9 01       	movw	r30, r18
 4a2:	20 81       	ld	r18, Z
 4a4:	28 60       	ori	r18, 0x08	; 8
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 4aa:	89 81       	ldd	r24, Y+1	; 0x01
 4ac:	8f 5f       	subi	r24, 0xFF	; 255
 4ae:	89 83       	std	Y+1, r24	; 0x01
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	88 30       	cpi	r24, 0x08	; 8
 4b4:	58 f3       	brcs	.-42     	; 0x48c <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 4b6:	1a 82       	std	Y+2, r1	; 0x02
 4b8:	12 c0       	rjmp	.+36     	; 0x4de <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 4ba:	8a 81       	ldd	r24, Y+2	; 0x02
 4bc:	88 2f       	mov	r24, r24
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	80 5d       	subi	r24, 0xD0	; 208
 4c2:	9b 4f       	sbci	r25, 0xFB	; 251
 4c4:	2a 81       	ldd	r18, Y+2	; 0x02
 4c6:	22 2f       	mov	r18, r18
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	20 5d       	subi	r18, 0xD0	; 208
 4cc:	3b 4f       	sbci	r19, 0xFB	; 251
 4ce:	f9 01       	movw	r30, r18
 4d0:	20 81       	ld	r18, Z
 4d2:	28 60       	ori	r18, 0x08	; 8
 4d4:	fc 01       	movw	r30, r24
 4d6:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 4d8:	8a 81       	ldd	r24, Y+2	; 0x02
 4da:	8f 5f       	subi	r24, 0xFF	; 255
 4dc:	8a 83       	std	Y+2, r24	; 0x02
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	88 30       	cpi	r24, 0x08	; 8
 4e2:	58 f3       	brcs	.-42     	; 0x4ba <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 4e4:	1b 82       	std	Y+3, r1	; 0x03
 4e6:	12 c0       	rjmp	.+36     	; 0x50c <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	88 2f       	mov	r24, r24
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	80 5b       	subi	r24, 0xB0	; 176
 4f0:	9b 4f       	sbci	r25, 0xFB	; 251
 4f2:	2b 81       	ldd	r18, Y+3	; 0x03
 4f4:	22 2f       	mov	r18, r18
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	20 5b       	subi	r18, 0xB0	; 176
 4fa:	3b 4f       	sbci	r19, 0xFB	; 251
 4fc:	f9 01       	movw	r30, r18
 4fe:	20 81       	ld	r18, Z
 500:	28 60       	ori	r18, 0x08	; 8
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 506:	8b 81       	ldd	r24, Y+3	; 0x03
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	8b 83       	std	Y+3, r24	; 0x03
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	88 30       	cpi	r24, 0x08	; 8
 510:	58 f3       	brcs	.-42     	; 0x4e8 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 512:	1c 82       	std	Y+4, r1	; 0x04
 514:	12 c0       	rjmp	.+36     	; 0x53a <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 516:	8c 81       	ldd	r24, Y+4	; 0x04
 518:	88 2f       	mov	r24, r24
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	80 59       	subi	r24, 0x90	; 144
 51e:	9b 4f       	sbci	r25, 0xFB	; 251
 520:	2c 81       	ldd	r18, Y+4	; 0x04
 522:	22 2f       	mov	r18, r18
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	20 59       	subi	r18, 0x90	; 144
 528:	3b 4f       	sbci	r19, 0xFB	; 251
 52a:	f9 01       	movw	r30, r18
 52c:	20 81       	ld	r18, Z
 52e:	28 60       	ori	r18, 0x08	; 8
 530:	fc 01       	movw	r30, r24
 532:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 534:	8c 81       	ldd	r24, Y+4	; 0x04
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	8c 83       	std	Y+4, r24	; 0x04
 53a:	8c 81       	ldd	r24, Y+4	; 0x04
 53c:	88 30       	cpi	r24, 0x08	; 8
 53e:	58 f3       	brcs	.-42     	; 0x516 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 540:	1d 82       	std	Y+5, r1	; 0x05
 542:	12 c0       	rjmp	.+36     	; 0x568 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 544:	8d 81       	ldd	r24, Y+5	; 0x05
 546:	88 2f       	mov	r24, r24
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	80 57       	subi	r24, 0x70	; 112
 54c:	9b 4f       	sbci	r25, 0xFB	; 251
 54e:	2d 81       	ldd	r18, Y+5	; 0x05
 550:	22 2f       	mov	r18, r18
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	20 57       	subi	r18, 0x70	; 112
 556:	3b 4f       	sbci	r19, 0xFB	; 251
 558:	f9 01       	movw	r30, r18
 55a:	20 81       	ld	r18, Z
 55c:	28 60       	ori	r18, 0x08	; 8
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 562:	8d 81       	ldd	r24, Y+5	; 0x05
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	8d 83       	std	Y+5, r24	; 0x05
 568:	8d 81       	ldd	r24, Y+5	; 0x05
 56a:	88 30       	cpi	r24, 0x08	; 8
 56c:	58 f3       	brcs	.-42     	; 0x544 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 56e:	1e 82       	std	Y+6, r1	; 0x06
 570:	12 c0       	rjmp	.+36     	; 0x596 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 572:	8e 81       	ldd	r24, Y+6	; 0x06
 574:	88 2f       	mov	r24, r24
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	80 55       	subi	r24, 0x50	; 80
 57a:	9b 4f       	sbci	r25, 0xFB	; 251
 57c:	2e 81       	ldd	r18, Y+6	; 0x06
 57e:	22 2f       	mov	r18, r18
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	20 55       	subi	r18, 0x50	; 80
 584:	3b 4f       	sbci	r19, 0xFB	; 251
 586:	f9 01       	movw	r30, r18
 588:	20 81       	ld	r18, Z
 58a:	28 60       	ori	r18, 0x08	; 8
 58c:	fc 01       	movw	r30, r24
 58e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 590:	8e 81       	ldd	r24, Y+6	; 0x06
 592:	8f 5f       	subi	r24, 0xFF	; 255
 594:	8e 83       	std	Y+6, r24	; 0x06
 596:	8e 81       	ldd	r24, Y+6	; 0x06
 598:	88 30       	cpi	r24, 0x08	; 8
 59a:	58 f3       	brcs	.-42     	; 0x572 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 59c:	00 00       	nop
 59e:	26 96       	adiw	r28, 0x06	; 6
 5a0:	cd bf       	out	0x3d, r28	; 61
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 5b2:	0e 94 3d 02 	call	0x47a	; 0x47a <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	0e 94 c5 01 	call	0x38a	; 0x38a <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	0e 94 10 02 	call	0x420	; 0x420 <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	0e 94 01 02 	call	0x402	; 0x402 <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 2e 02 	call	0x45c	; 0x45c <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	0e 94 1f 02 	call	0x43e	; 0x43e <B0_MCU_set_dir>

	CLKCTRL_init();
 5e6:	0e 94 99 00 	call	0x132	; 0x132 <CLKCTRL_init>

	CPUINT_init();
 5ea:	0e 94 a1 00 	call	0x142	; 0x142 <CPUINT_init>

	SLPCTRL_init();
 5ee:	0e 94 ff 02 	call	0x5fe	; 0x5fe <SLPCTRL_init>

	BOD_init();
 5f2:	0e 94 91 00 	call	0x122	; 0x122 <BOD_init>
}
 5f6:	00 00       	nop
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 606:	80 e0       	ldi	r24, 0x00	; 0
}
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
