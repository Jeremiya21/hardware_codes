
Question3_Sam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000dc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d72  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000dc6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002feb  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002666  00000000  00000000  00003fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000db2  00000000  00000000  00006619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000408  00000000  00000000  000073cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001427  00000000  00000000  000077d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000741  00000000  00000000  00008bfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000933c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 b7 02 	call	0x56e	; 0x56e <main>
  a0:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <PORTD_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
	VPORTD.IN |= 1 << pin;
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2c e0       	ldi	r18, 0x0C	; 12
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	22 81       	ldd	r18, Z+2	; 0x02
  d4:	62 2f       	mov	r22, r18
  d6:	29 81       	ldd	r18, Y+1	; 0x01
  d8:	42 2f       	mov	r20, r18
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <PORTD_toggle_pin_level+0x2a>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	4a 95       	dec	r20
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <PORTD_toggle_pin_level+0x26>
  ea:	26 2b       	or	r18, r22
  ec:	fc 01       	movw	r30, r24
  ee:	22 83       	std	Z+2, r18	; 0x02
}
  f0:	00 00       	nop
  f2:	0f 90       	pop	r0
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <R0_MCU_toggle_level>:
 * \brief Toggle output level on R0_MCU
 *
 * Toggle the pin level
 */
static inline void R0_MCU_toggle_level()
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(0);
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_toggle_pin_level>
}
 108:	00 00       	nop
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <G0_MCU_toggle_level>:
 * \brief Toggle output level on G0_MCU
 *
 * Toggle the pin level
 */
static inline void G0_MCU_toggle_level()
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(1);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_toggle_pin_level>
}
 11e:	00 00       	nop
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <B0_MCU_toggle_level>:
 * \brief Toggle output level on B0_MCU
 *
 * Toggle the pin level
 */
static inline void B0_MCU_toggle_level()
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(2);
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTD_toggle_pin_level>
}
 134:	00 00       	nop
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <functionCall>:

#include "functionCall.h"
#include <stdlib.h>

void functionCall(bool *r,bool *g,bool *b,uint16_t delay_R,uint16_t delay_B,uint16_t delay_G)
{
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	ec 97       	sbiw	r28, 0x3c	; 60
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	de bf       	out	0x3e, r29	; 62
 152:	89 ab       	std	Y+49, r24	; 0x31
 154:	9a ab       	std	Y+50, r25	; 0x32
 156:	6b ab       	std	Y+51, r22	; 0x33
 158:	7c ab       	std	Y+52, r23	; 0x34
 15a:	4d ab       	std	Y+53, r20	; 0x35
 15c:	5e ab       	std	Y+54, r21	; 0x36
 15e:	2f ab       	std	Y+55, r18	; 0x37
 160:	38 af       	std	Y+56, r19	; 0x38
 162:	09 af       	std	Y+57, r16	; 0x39
 164:	1a af       	std	Y+58, r17	; 0x3a
 166:	eb ae       	std	Y+59, r14	; 0x3b
 168:	fc ae       	std	Y+60, r15	; 0x3c
	int count_R=0,count_G=0,count_B=0;
 16a:	19 82       	std	Y+1, r1	; 0x01
 16c:	1a 82       	std	Y+2, r1	; 0x02
 16e:	1b 82       	std	Y+3, r1	; 0x03
 170:	1c 82       	std	Y+4, r1	; 0x04
 172:	1d 82       	std	Y+5, r1	; 0x05
 174:	1e 82       	std	Y+6, r1	; 0x06
	if(*r)
 176:	89 a9       	ldd	r24, Y+49	; 0x31
 178:	9a a9       	ldd	r25, Y+50	; 0x32
 17a:	fc 01       	movw	r30, r24
 17c:	80 81       	ld	r24, Z
 17e:	88 23       	and	r24, r24
 180:	39 f0       	breq	.+14     	; 0x190 <functionCall+0x54>
	{
		R0_MCU_toggle_level();
 182:	0e 94 7d 00 	call	0xfa	; 0xfa <R0_MCU_toggle_level>
		count_R++;
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	9a 81       	ldd	r25, Y+2	; 0x02
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	9a 83       	std	Y+2, r25	; 0x02
	}
	if(*g)
 190:	8b a9       	ldd	r24, Y+51	; 0x33
 192:	9c a9       	ldd	r25, Y+52	; 0x34
 194:	fc 01       	movw	r30, r24
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	39 f0       	breq	.+14     	; 0x1aa <functionCall+0x6e>
	{
		G0_MCU_toggle_level();
 19c:	0e 94 88 00 	call	0x110	; 0x110 <G0_MCU_toggle_level>
		count_G++;
 1a0:	8b 81       	ldd	r24, Y+3	; 0x03
 1a2:	9c 81       	ldd	r25, Y+4	; 0x04
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	8b 83       	std	Y+3, r24	; 0x03
 1a8:	9c 83       	std	Y+4, r25	; 0x04
	}
	if(*b)
 1aa:	8d a9       	ldd	r24, Y+53	; 0x35
 1ac:	9e a9       	ldd	r25, Y+54	; 0x36
 1ae:	fc 01       	movw	r30, r24
 1b0:	80 81       	ld	r24, Z
 1b2:	88 23       	and	r24, r24
 1b4:	39 f0       	breq	.+14     	; 0x1c4 <functionCall+0x88>
	{
		B0_MCU_toggle_level();
 1b6:	0e 94 93 00 	call	0x126	; 0x126 <B0_MCU_toggle_level>
		count_B++;
 1ba:	8d 81       	ldd	r24, Y+5	; 0x05
 1bc:	9e 81       	ldd	r25, Y+6	; 0x06
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	8d 83       	std	Y+5, r24	; 0x05
 1c2:	9e 83       	std	Y+6, r25	; 0x06
	}
	if(count_R>0)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	18 16       	cp	r1, r24
 1ca:	19 06       	cpc	r1, r25
 1cc:	0c f0       	brlt	.+2      	; 0x1d0 <functionCall+0x94>
 1ce:	7b c0       	rjmp	.+246    	; 0x2c6 <functionCall+0x18a>
	{
		_delay_ms(delay_R);
 1d0:	8f a9       	ldd	r24, Y+55	; 0x37
 1d2:	98 ad       	ldd	r25, Y+56	; 0x38
 1d4:	cc 01       	movw	r24, r24
 1d6:	a0 e0       	ldi	r26, 0x00	; 0
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	bc 01       	movw	r22, r24
 1dc:	cd 01       	movw	r24, r26
 1de:	0e 94 93 05 	call	0xb26	; 0xb26 <__floatunsisf>
 1e2:	dc 01       	movw	r26, r24
 1e4:	cb 01       	movw	r24, r22
 1e6:	8f 87       	std	Y+15, r24	; 0x0f
 1e8:	98 8b       	std	Y+16, r25	; 0x10
 1ea:	a9 8b       	std	Y+17, r26	; 0x11
 1ec:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1ee:	24 e5       	ldi	r18, 0x54	; 84
 1f0:	35 e5       	ldi	r19, 0x55	; 85
 1f2:	40 e5       	ldi	r20, 0x50	; 80
 1f4:	54 e4       	ldi	r21, 0x44	; 68
 1f6:	6f 85       	ldd	r22, Y+15	; 0x0f
 1f8:	78 89       	ldd	r23, Y+16	; 0x10
 1fa:	89 89       	ldd	r24, Y+17	; 0x11
 1fc:	9a 89       	ldd	r25, Y+18	; 0x12
 1fe:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 202:	dc 01       	movw	r26, r24
 204:	cb 01       	movw	r24, r22
 206:	8b 8b       	std	Y+19, r24	; 0x13
 208:	9c 8b       	std	Y+20, r25	; 0x14
 20a:	ad 8b       	std	Y+21, r26	; 0x15
 20c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	40 e8       	ldi	r20, 0x80	; 128
 214:	5f e3       	ldi	r21, 0x3F	; 63
 216:	6b 89       	ldd	r22, Y+19	; 0x13
 218:	7c 89       	ldd	r23, Y+20	; 0x14
 21a:	8d 89       	ldd	r24, Y+21	; 0x15
 21c:	9e 89       	ldd	r25, Y+22	; 0x16
 21e:	0e 94 5f 05 	call	0xabe	; 0xabe <__cmpsf2>
 222:	88 23       	and	r24, r24
 224:	2c f4       	brge	.+10     	; 0x230 <functionCall+0xf4>
		__ticks = 1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	8f 8b       	std	Y+23, r24	; 0x17
 22c:	98 8f       	std	Y+24, r25	; 0x18
 22e:	3f c0       	rjmp	.+126    	; 0x2ae <functionCall+0x172>
	else if (__tmp > 65535)
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	3f ef       	ldi	r19, 0xFF	; 255
 234:	4f e7       	ldi	r20, 0x7F	; 127
 236:	57 e4       	ldi	r21, 0x47	; 71
 238:	6b 89       	ldd	r22, Y+19	; 0x13
 23a:	7c 89       	ldd	r23, Y+20	; 0x14
 23c:	8d 89       	ldd	r24, Y+21	; 0x15
 23e:	9e 89       	ldd	r25, Y+22	; 0x16
 240:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__gesf2>
 244:	18 16       	cp	r1, r24
 246:	4c f5       	brge	.+82     	; 0x29a <functionCall+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e2       	ldi	r20, 0x20	; 32
 24e:	51 e4       	ldi	r21, 0x41	; 65
 250:	6f 85       	ldd	r22, Y+15	; 0x0f
 252:	78 89       	ldd	r23, Y+16	; 0x10
 254:	89 89       	ldd	r24, Y+17	; 0x11
 256:	9a 89       	ldd	r25, Y+18	; 0x12
 258:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	0e 94 64 05 	call	0xac8	; 0xac8 <__fixunssfsi>
 268:	dc 01       	movw	r26, r24
 26a:	cb 01       	movw	r24, r22
 26c:	8f 8b       	std	Y+23, r24	; 0x17
 26e:	98 8f       	std	Y+24, r25	; 0x18
 270:	0f c0       	rjmp	.+30     	; 0x290 <functionCall+0x154>
 272:	83 e5       	ldi	r24, 0x53	; 83
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	89 8f       	std	Y+25, r24	; 0x19
 278:	9a 8f       	std	Y+26, r25	; 0x1a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27a:	89 8d       	ldd	r24, Y+25	; 0x19
 27c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <functionCall+0x142>
 282:	89 8f       	std	Y+25, r24	; 0x19
 284:	9a 8f       	std	Y+26, r25	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 286:	8f 89       	ldd	r24, Y+23	; 0x17
 288:	98 8d       	ldd	r25, Y+24	; 0x18
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	8f 8b       	std	Y+23, r24	; 0x17
 28e:	98 8f       	std	Y+24, r25	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	8f 89       	ldd	r24, Y+23	; 0x17
 292:	98 8d       	ldd	r25, Y+24	; 0x18
 294:	89 2b       	or	r24, r25
 296:	69 f7       	brne	.-38     	; 0x272 <functionCall+0x136>
 298:	14 c0       	rjmp	.+40     	; 0x2c2 <functionCall+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 29a:	6b 89       	ldd	r22, Y+19	; 0x13
 29c:	7c 89       	ldd	r23, Y+20	; 0x14
 29e:	8d 89       	ldd	r24, Y+21	; 0x15
 2a0:	9e 89       	ldd	r25, Y+22	; 0x16
 2a2:	0e 94 64 05 	call	0xac8	; 0xac8 <__fixunssfsi>
 2a6:	dc 01       	movw	r26, r24
 2a8:	cb 01       	movw	r24, r22
 2aa:	8f 8b       	std	Y+23, r24	; 0x17
 2ac:	98 8f       	std	Y+24, r25	; 0x18
 2ae:	8f 89       	ldd	r24, Y+23	; 0x17
 2b0:	98 8d       	ldd	r25, Y+24	; 0x18
 2b2:	8b 8f       	std	Y+27, r24	; 0x1b
 2b4:	9c 8f       	std	Y+28, r25	; 0x1c
 2b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <functionCall+0x17e>
 2be:	8b 8f       	std	Y+27, r24	; 0x1b
 2c0:	9c 8f       	std	Y+28, r25	; 0x1c
		R0_MCU_toggle_level();
 2c2:	0e 94 7d 00 	call	0xfa	; 0xfa <R0_MCU_toggle_level>
	}
	if(count_G>0)
 2c6:	8b 81       	ldd	r24, Y+3	; 0x03
 2c8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ca:	18 16       	cp	r1, r24
 2cc:	19 06       	cpc	r1, r25
 2ce:	0c f0       	brlt	.+2      	; 0x2d2 <functionCall+0x196>
 2d0:	93 c0       	rjmp	.+294    	; 0x3f8 <functionCall+0x2bc>
	{
		
		delay_G=abs((delay_R * count_R) - delay_G);
 2d2:	49 81       	ldd	r20, Y+1	; 0x01
 2d4:	5a 81       	ldd	r21, Y+2	; 0x02
 2d6:	8f a9       	ldd	r24, Y+55	; 0x37
 2d8:	98 ad       	ldd	r25, Y+56	; 0x38
 2da:	48 9f       	mul	r20, r24
 2dc:	90 01       	movw	r18, r0
 2de:	49 9f       	mul	r20, r25
 2e0:	30 0d       	add	r19, r0
 2e2:	58 9f       	mul	r21, r24
 2e4:	30 0d       	add	r19, r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8b ad       	ldd	r24, Y+59	; 0x3b
 2ea:	9c ad       	ldd	r25, Y+60	; 0x3c
 2ec:	a9 01       	movw	r20, r18
 2ee:	48 1b       	sub	r20, r24
 2f0:	59 0b       	sbc	r21, r25
 2f2:	ca 01       	movw	r24, r20
 2f4:	99 23       	and	r25, r25
 2f6:	1c f4       	brge	.+6      	; 0x2fe <functionCall+0x1c2>
 2f8:	91 95       	neg	r25
 2fa:	81 95       	neg	r24
 2fc:	91 09       	sbc	r25, r1
 2fe:	8b af       	std	Y+59, r24	; 0x3b
 300:	9c af       	std	Y+60, r25	; 0x3c
		_delay_ms(delay_G);
 302:	8b ad       	ldd	r24, Y+59	; 0x3b
 304:	9c ad       	ldd	r25, Y+60	; 0x3c
 306:	cc 01       	movw	r24, r24
 308:	a0 e0       	ldi	r26, 0x00	; 0
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	bc 01       	movw	r22, r24
 30e:	cd 01       	movw	r24, r26
 310:	0e 94 93 05 	call	0xb26	; 0xb26 <__floatunsisf>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	8f 83       	std	Y+7, r24	; 0x07
 31a:	98 87       	std	Y+8, r25	; 0x08
 31c:	a9 87       	std	Y+9, r26	; 0x09
 31e:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 320:	24 e5       	ldi	r18, 0x54	; 84
 322:	35 e5       	ldi	r19, 0x55	; 85
 324:	40 e5       	ldi	r20, 0x50	; 80
 326:	54 e4       	ldi	r21, 0x44	; 68
 328:	6f 81       	ldd	r22, Y+7	; 0x07
 32a:	78 85       	ldd	r23, Y+8	; 0x08
 32c:	89 85       	ldd	r24, Y+9	; 0x09
 32e:	9a 85       	ldd	r25, Y+10	; 0x0a
 330:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 334:	dc 01       	movw	r26, r24
 336:	cb 01       	movw	r24, r22
 338:	8d 8f       	std	Y+29, r24	; 0x1d
 33a:	9e 8f       	std	Y+30, r25	; 0x1e
 33c:	af 8f       	std	Y+31, r26	; 0x1f
 33e:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	40 e8       	ldi	r20, 0x80	; 128
 346:	5f e3       	ldi	r21, 0x3F	; 63
 348:	6d 8d       	ldd	r22, Y+29	; 0x1d
 34a:	7e 8d       	ldd	r23, Y+30	; 0x1e
 34c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 34e:	98 a1       	ldd	r25, Y+32	; 0x20
 350:	0e 94 5f 05 	call	0xabe	; 0xabe <__cmpsf2>
 354:	88 23       	and	r24, r24
 356:	2c f4       	brge	.+10     	; 0x362 <functionCall+0x226>
		__ticks = 1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	89 a3       	std	Y+33, r24	; 0x21
 35e:	9a a3       	std	Y+34, r25	; 0x22
 360:	3f c0       	rjmp	.+126    	; 0x3e0 <functionCall+0x2a4>
	else if (__tmp > 65535)
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	3f ef       	ldi	r19, 0xFF	; 255
 366:	4f e7       	ldi	r20, 0x7F	; 127
 368:	57 e4       	ldi	r21, 0x47	; 71
 36a:	6d 8d       	ldd	r22, Y+29	; 0x1d
 36c:	7e 8d       	ldd	r23, Y+30	; 0x1e
 36e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 370:	98 a1       	ldd	r25, Y+32	; 0x20
 372:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__gesf2>
 376:	18 16       	cp	r1, r24
 378:	4c f5       	brge	.+82     	; 0x3cc <functionCall+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	40 e2       	ldi	r20, 0x20	; 32
 380:	51 e4       	ldi	r21, 0x41	; 65
 382:	6f 81       	ldd	r22, Y+7	; 0x07
 384:	78 85       	ldd	r23, Y+8	; 0x08
 386:	89 85       	ldd	r24, Y+9	; 0x09
 388:	9a 85       	ldd	r25, Y+10	; 0x0a
 38a:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 38e:	dc 01       	movw	r26, r24
 390:	cb 01       	movw	r24, r22
 392:	bc 01       	movw	r22, r24
 394:	cd 01       	movw	r24, r26
 396:	0e 94 64 05 	call	0xac8	; 0xac8 <__fixunssfsi>
 39a:	dc 01       	movw	r26, r24
 39c:	cb 01       	movw	r24, r22
 39e:	89 a3       	std	Y+33, r24	; 0x21
 3a0:	9a a3       	std	Y+34, r25	; 0x22
 3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <functionCall+0x286>
 3a4:	83 e5       	ldi	r24, 0x53	; 83
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	8b a3       	std	Y+35, r24	; 0x23
 3aa:	9c a3       	std	Y+36, r25	; 0x24
 3ac:	8b a1       	ldd	r24, Y+35	; 0x23
 3ae:	9c a1       	ldd	r25, Y+36	; 0x24
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <functionCall+0x274>
 3b4:	8b a3       	std	Y+35, r24	; 0x23
 3b6:	9c a3       	std	Y+36, r25	; 0x24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b8:	89 a1       	ldd	r24, Y+33	; 0x21
 3ba:	9a a1       	ldd	r25, Y+34	; 0x22
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	89 a3       	std	Y+33, r24	; 0x21
 3c0:	9a a3       	std	Y+34, r25	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c2:	89 a1       	ldd	r24, Y+33	; 0x21
 3c4:	9a a1       	ldd	r25, Y+34	; 0x22
 3c6:	89 2b       	or	r24, r25
 3c8:	69 f7       	brne	.-38     	; 0x3a4 <functionCall+0x268>
 3ca:	14 c0       	rjmp	.+40     	; 0x3f4 <functionCall+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3cc:	6d 8d       	ldd	r22, Y+29	; 0x1d
 3ce:	7e 8d       	ldd	r23, Y+30	; 0x1e
 3d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
 3d2:	98 a1       	ldd	r25, Y+32	; 0x20
 3d4:	0e 94 64 05 	call	0xac8	; 0xac8 <__fixunssfsi>
 3d8:	dc 01       	movw	r26, r24
 3da:	cb 01       	movw	r24, r22
 3dc:	89 a3       	std	Y+33, r24	; 0x21
 3de:	9a a3       	std	Y+34, r25	; 0x22
 3e0:	89 a1       	ldd	r24, Y+33	; 0x21
 3e2:	9a a1       	ldd	r25, Y+34	; 0x22
 3e4:	8d a3       	std	Y+37, r24	; 0x25
 3e6:	9e a3       	std	Y+38, r25	; 0x26
 3e8:	8d a1       	ldd	r24, Y+37	; 0x25
 3ea:	9e a1       	ldd	r25, Y+38	; 0x26
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <functionCall+0x2b0>
 3f0:	8d a3       	std	Y+37, r24	; 0x25
 3f2:	9e a3       	std	Y+38, r25	; 0x26
		G0_MCU_toggle_level();
 3f4:	0e 94 88 00 	call	0x110	; 0x110 <G0_MCU_toggle_level>
	}
	if(count_B>0)
 3f8:	8d 81       	ldd	r24, Y+5	; 0x05
 3fa:	9e 81       	ldd	r25, Y+6	; 0x06
 3fc:	18 16       	cp	r1, r24
 3fe:	19 06       	cpc	r1, r25
 400:	0c f0       	brlt	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 402:	aa c0       	rjmp	.+340    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
	{
		if(count_R>0 || count_G>0)
 404:	89 81       	ldd	r24, Y+1	; 0x01
 406:	9a 81       	ldd	r25, Y+2	; 0x02
 408:	18 16       	cp	r1, r24
 40a:	19 06       	cpc	r1, r25
 40c:	2c f0       	brlt	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	9c 81       	ldd	r25, Y+4	; 0x04
 412:	18 16       	cp	r1, r24
 414:	19 06       	cpc	r1, r25
 416:	2c f5       	brge	.+74     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		{
			delay_B=abs( ((delay_R * count_R) + (delay_G * count_G))- delay_B);
 418:	49 81       	ldd	r20, Y+1	; 0x01
 41a:	5a 81       	ldd	r21, Y+2	; 0x02
 41c:	8f a9       	ldd	r24, Y+55	; 0x37
 41e:	98 ad       	ldd	r25, Y+56	; 0x38
 420:	48 9f       	mul	r20, r24
 422:	90 01       	movw	r18, r0
 424:	49 9f       	mul	r20, r25
 426:	30 0d       	add	r19, r0
 428:	58 9f       	mul	r21, r24
 42a:	30 0d       	add	r19, r0
 42c:	11 24       	eor	r1, r1
 42e:	6b 81       	ldd	r22, Y+3	; 0x03
 430:	7c 81       	ldd	r23, Y+4	; 0x04
 432:	4b ad       	ldd	r20, Y+59	; 0x3b
 434:	5c ad       	ldd	r21, Y+60	; 0x3c
 436:	64 9f       	mul	r22, r20
 438:	c0 01       	movw	r24, r0
 43a:	65 9f       	mul	r22, r21
 43c:	90 0d       	add	r25, r0
 43e:	74 9f       	mul	r23, r20
 440:	90 0d       	add	r25, r0
 442:	11 24       	eor	r1, r1
 444:	28 0f       	add	r18, r24
 446:	39 1f       	adc	r19, r25
 448:	89 ad       	ldd	r24, Y+57	; 0x39
 44a:	9a ad       	ldd	r25, Y+58	; 0x3a
 44c:	f9 01       	movw	r30, r18
 44e:	e8 1b       	sub	r30, r24
 450:	f9 0b       	sbc	r31, r25
 452:	cf 01       	movw	r24, r30
 454:	99 23       	and	r25, r25
 456:	1c f4       	brge	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 458:	91 95       	neg	r25
 45a:	81 95       	neg	r24
 45c:	91 09       	sbc	r25, r1
 45e:	89 af       	std	Y+57, r24	; 0x39
 460:	9a af       	std	Y+58, r25	; 0x3a
		}
		_delay_ms(delay_B);
 462:	89 ad       	ldd	r24, Y+57	; 0x39
 464:	9a ad       	ldd	r25, Y+58	; 0x3a
 466:	cc 01       	movw	r24, r24
 468:	a0 e0       	ldi	r26, 0x00	; 0
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	bc 01       	movw	r22, r24
 46e:	cd 01       	movw	r24, r26
 470:	0e 94 93 05 	call	0xb26	; 0xb26 <__floatunsisf>
 474:	dc 01       	movw	r26, r24
 476:	cb 01       	movw	r24, r22
 478:	8b 87       	std	Y+11, r24	; 0x0b
 47a:	9c 87       	std	Y+12, r25	; 0x0c
 47c:	ad 87       	std	Y+13, r26	; 0x0d
 47e:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 480:	24 e5       	ldi	r18, 0x54	; 84
 482:	35 e5       	ldi	r19, 0x55	; 85
 484:	40 e5       	ldi	r20, 0x50	; 80
 486:	54 e4       	ldi	r21, 0x44	; 68
 488:	6b 85       	ldd	r22, Y+11	; 0x0b
 48a:	7c 85       	ldd	r23, Y+12	; 0x0c
 48c:	8d 85       	ldd	r24, Y+13	; 0x0d
 48e:	9e 85       	ldd	r25, Y+14	; 0x0e
 490:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	8f a3       	std	Y+39, r24	; 0x27
 49a:	98 a7       	std	Y+40, r25	; 0x28
 49c:	a9 a7       	std	Y+41, r26	; 0x29
 49e:	ba a7       	std	Y+42, r27	; 0x2a
	if (__tmp < 1.0)
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	40 e8       	ldi	r20, 0x80	; 128
 4a6:	5f e3       	ldi	r21, 0x3F	; 63
 4a8:	6f a1       	ldd	r22, Y+39	; 0x27
 4aa:	78 a5       	ldd	r23, Y+40	; 0x28
 4ac:	89 a5       	ldd	r24, Y+41	; 0x29
 4ae:	9a a5       	ldd	r25, Y+42	; 0x2a
 4b0:	0e 94 5f 05 	call	0xabe	; 0xabe <__cmpsf2>
 4b4:	88 23       	and	r24, r24
 4b6:	2c f4       	brge	.+10     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		__ticks = 1;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	8b a7       	std	Y+43, r24	; 0x2b
 4be:	9c a7       	std	Y+44, r25	; 0x2c
 4c0:	3f c0       	rjmp	.+126    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
	else if (__tmp > 65535)
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	3f ef       	ldi	r19, 0xFF	; 255
 4c6:	4f e7       	ldi	r20, 0x7F	; 127
 4c8:	57 e4       	ldi	r21, 0x47	; 71
 4ca:	6f a1       	ldd	r22, Y+39	; 0x27
 4cc:	78 a5       	ldd	r23, Y+40	; 0x28
 4ce:	89 a5       	ldd	r24, Y+41	; 0x29
 4d0:	9a a5       	ldd	r25, Y+42	; 0x2a
 4d2:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__gesf2>
 4d6:	18 16       	cp	r1, r24
 4d8:	4c f5       	brge	.+82     	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e2       	ldi	r20, 0x20	; 32
 4e0:	51 e4       	ldi	r21, 0x41	; 65
 4e2:	6b 85       	ldd	r22, Y+11	; 0x0b
 4e4:	7c 85       	ldd	r23, Y+12	; 0x0c
 4e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 4e8:	9e 85       	ldd	r25, Y+14	; 0x0e
 4ea:	0e 94 22 06 	call	0xc44	; 0xc44 <__mulsf3>
 4ee:	dc 01       	movw	r26, r24
 4f0:	cb 01       	movw	r24, r22
 4f2:	bc 01       	movw	r22, r24
 4f4:	cd 01       	movw	r24, r26
 4f6:	0e 94 64 05 	call	0xac8	; 0xac8 <__fixunssfsi>
 4fa:	dc 01       	movw	r26, r24
 4fc:	cb 01       	movw	r24, r22
 4fe:	8b a7       	std	Y+43, r24	; 0x2b
 500:	9c a7       	std	Y+44, r25	; 0x2c
 502:	0f c0       	rjmp	.+30     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 504:	83 e5       	ldi	r24, 0x53	; 83
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	8d a7       	std	Y+45, r24	; 0x2d
 50a:	9e a7       	std	Y+46, r25	; 0x2e
 50c:	8d a5       	ldd	r24, Y+45	; 0x2d
 50e:	9e a5       	ldd	r25, Y+46	; 0x2e
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
 514:	8d a7       	std	Y+45, r24	; 0x2d
 516:	9e a7       	std	Y+46, r25	; 0x2e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 518:	8b a5       	ldd	r24, Y+43	; 0x2b
 51a:	9c a5       	ldd	r25, Y+44	; 0x2c
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	8b a7       	std	Y+43, r24	; 0x2b
 520:	9c a7       	std	Y+44, r25	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 522:	8b a5       	ldd	r24, Y+43	; 0x2b
 524:	9c a5       	ldd	r25, Y+44	; 0x2c
 526:	89 2b       	or	r24, r25
 528:	69 f7       	brne	.-38     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
 52a:	14 c0       	rjmp	.+40     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 52c:	6f a1       	ldd	r22, Y+39	; 0x27
 52e:	78 a5       	ldd	r23, Y+40	; 0x28
 530:	89 a5       	ldd	r24, Y+41	; 0x29
 532:	9a a5       	ldd	r25, Y+42	; 0x2a
 534:	0e 94 64 05 	call	0xac8	; 0xac8 <__fixunssfsi>
 538:	dc 01       	movw	r26, r24
 53a:	cb 01       	movw	r24, r22
 53c:	8b a7       	std	Y+43, r24	; 0x2b
 53e:	9c a7       	std	Y+44, r25	; 0x2c
 540:	8b a5       	ldd	r24, Y+43	; 0x2b
 542:	9c a5       	ldd	r25, Y+44	; 0x2c
 544:	8f a7       	std	Y+47, r24	; 0x2f
 546:	98 ab       	std	Y+48, r25	; 0x30
 548:	8f a5       	ldd	r24, Y+47	; 0x2f
 54a:	98 a9       	ldd	r25, Y+48	; 0x30
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 550:	8f a7       	std	Y+47, r24	; 0x2f
 552:	98 ab       	std	Y+48, r25	; 0x30
		G0_MCU_toggle_level();
 554:	0e 94 88 00 	call	0x110	; 0x110 <G0_MCU_toggle_level>
	}
	
 558:	00 00       	nop
 55a:	ec 96       	adiw	r28, 0x3c	; 60
 55c:	cd bf       	out	0x3d, r28	; 61
 55e:	de bf       	out	0x3e, r29	; 62
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	ff 90       	pop	r15
 56a:	ef 90       	pop	r14
 56c:	08 95       	ret

0000056e <main>:
#include "functionCall.h"

int main(void)
{
 56e:	ef 92       	push	r14
 570:	ff 92       	push	r15
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	29 97       	sbiw	r28, 0x09	; 9
 580:	cd bf       	out	0x3d, r28	; 61
 582:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 584:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	uint16_t delay_R,delay_G,delay_B;
	delay_B=100;
 588:	84 e6       	ldi	r24, 0x64	; 100
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	89 83       	std	Y+1, r24	; 0x01
 58e:	9a 83       	std	Y+2, r25	; 0x02
	delay_G=500;
 590:	84 ef       	ldi	r24, 0xF4	; 244
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	8b 83       	std	Y+3, r24	; 0x03
 596:	9c 83       	std	Y+4, r25	; 0x04
	delay_R=1000;
 598:	88 ee       	ldi	r24, 0xE8	; 232
 59a:	93 e0       	ldi	r25, 0x03	; 3
 59c:	8d 83       	std	Y+5, r24	; 0x05
 59e:	9e 83       	std	Y+6, r25	; 0x06
	bool r,g,b;
	r=1;b=1;g=1;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	8f 83       	std	Y+7, r24	; 0x07
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	89 87       	std	Y+9, r24	; 0x09
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	88 87       	std	Y+8, r24	; 0x08
	while (1) 
	{
		/* Replace with your application code */
		functionCall(&r,&g,&b,delay_R,delay_G,delay_B);
 5ac:	a9 81       	ldd	r26, Y+1	; 0x01
 5ae:	ba 81       	ldd	r27, Y+2	; 0x02
 5b0:	eb 81       	ldd	r30, Y+3	; 0x03
 5b2:	fc 81       	ldd	r31, Y+4	; 0x04
 5b4:	2d 81       	ldd	r18, Y+5	; 0x05
 5b6:	3e 81       	ldd	r19, Y+6	; 0x06
 5b8:	ae 01       	movw	r20, r28
 5ba:	47 5f       	subi	r20, 0xF7	; 247
 5bc:	5f 4f       	sbci	r21, 0xFF	; 255
 5be:	be 01       	movw	r22, r28
 5c0:	68 5f       	subi	r22, 0xF8	; 248
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	ce 01       	movw	r24, r28
 5c6:	07 96       	adiw	r24, 0x07	; 7
 5c8:	7d 01       	movw	r14, r26
 5ca:	8f 01       	movw	r16, r30
 5cc:	0e 94 9e 00 	call	0x13c	; 0x13c <functionCall>
	}
 5d0:	ed cf       	rjmp	.-38     	; 0x5ac <main+0x3e>

000005d2 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	cd b7       	in	r28, 0x3d	; 61
 5d8:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 5da:	80 e0       	ldi	r24, 0x00	; 0
}
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	08 95       	ret

000005e2 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 5ea:	80 e0       	ldi	r24, 0x00	; 0
}
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	08 95       	ret

00000602 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	00 d0       	rcall	.+0      	; 0x608 <PORTA_set_pin_dir+0x6>
 608:	cd b7       	in	r28, 0x3d	; 61
 60a:	de b7       	in	r29, 0x3e	; 62
 60c:	89 83       	std	Y+1, r24	; 0x01
 60e:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	88 2f       	mov	r24, r24
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	91 05       	cpc	r25, r1
 61a:	e1 f0       	breq	.+56     	; 0x654 <PORTA_set_pin_dir+0x52>
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	71 f1       	breq	.+92     	; 0x67e <PORTA_set_pin_dir+0x7c>
 622:	89 2b       	or	r24, r25
 624:	09 f0       	breq	.+2      	; 0x628 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 626:	3b c0       	rjmp	.+118    	; 0x69e <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 628:	20 e0       	ldi	r18, 0x00	; 0
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	fc 01       	movw	r30, r24
 632:	80 81       	ld	r24, Z
 634:	68 2f       	mov	r22, r24
 636:	89 81       	ldd	r24, Y+1	; 0x01
 638:	48 2f       	mov	r20, r24
 63a:	50 e0       	ldi	r21, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <PORTA_set_pin_dir+0x44>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	4a 95       	dec	r20
 648:	e2 f7       	brpl	.-8      	; 0x642 <PORTA_set_pin_dir+0x40>
 64a:	80 95       	com	r24
 64c:	86 23       	and	r24, r22
 64e:	f9 01       	movw	r30, r18
 650:	80 83       	st	Z, r24
		break;
 652:	25 c0       	rjmp	.+74     	; 0x69e <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	fc 01       	movw	r30, r24
 65e:	80 81       	ld	r24, Z
 660:	68 2f       	mov	r22, r24
 662:	89 81       	ldd	r24, Y+1	; 0x01
 664:	48 2f       	mov	r20, r24
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <PORTA_set_pin_dir+0x70>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	4a 95       	dec	r20
 674:	e2 f7       	brpl	.-8      	; 0x66e <PORTA_set_pin_dir+0x6c>
 676:	86 2b       	or	r24, r22
 678:	f9 01       	movw	r30, r18
 67a:	80 83       	st	Z, r24
		break;
 67c:	10 c0       	rjmp	.+32     	; 0x69e <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	88 2f       	mov	r24, r24
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	80 5f       	subi	r24, 0xF0	; 240
 686:	9b 4f       	sbci	r25, 0xFB	; 251
 688:	29 81       	ldd	r18, Y+1	; 0x01
 68a:	22 2f       	mov	r18, r18
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	20 5f       	subi	r18, 0xF0	; 240
 690:	3b 4f       	sbci	r19, 0xFB	; 251
 692:	f9 01       	movw	r30, r18
 694:	20 81       	ld	r18, Z
 696:	28 60       	ori	r18, 0x08	; 8
 698:	fc 01       	movw	r30, r24
 69a:	20 83       	st	Z, r18
		break;
 69c:	00 00       	nop
	default:
		break;
	}
}
 69e:	00 00       	nop
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <PORTA_set_pin_level+0x6>
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	88 23       	and	r24, r24
 6bc:	a9 f0       	breq	.+42     	; 0x6e8 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	fc 01       	movw	r30, r24
 6c8:	81 81       	ldd	r24, Z+1	; 0x01
 6ca:	68 2f       	mov	r22, r24
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	48 2f       	mov	r20, r24
 6d0:	50 e0       	ldi	r21, 0x00	; 0
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <PORTA_set_pin_level+0x32>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	4a 95       	dec	r20
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <PORTA_set_pin_level+0x2e>
 6e0:	86 2b       	or	r24, r22
 6e2:	f9 01       	movw	r30, r18
 6e4:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 6e6:	15 c0       	rjmp	.+42     	; 0x712 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 6e8:	20 e0       	ldi	r18, 0x00	; 0
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	fc 01       	movw	r30, r24
 6f2:	81 81       	ldd	r24, Z+1	; 0x01
 6f4:	68 2f       	mov	r22, r24
 6f6:	89 81       	ldd	r24, Y+1	; 0x01
 6f8:	48 2f       	mov	r20, r24
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <PORTA_set_pin_level+0x5c>
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	4a 95       	dec	r20
 708:	e2 f7       	brpl	.-8      	; 0x702 <PORTA_set_pin_level+0x58>
 70a:	80 95       	com	r24
 70c:	86 23       	and	r24, r22
 70e:	f9 01       	movw	r30, r18
 710:	81 83       	std	Z+1, r24	; 0x01
	}
}
 712:	00 00       	nop
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	08 95       	ret

0000071e <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	00 d0       	rcall	.+0      	; 0x724 <PORTD_set_pin_dir+0x6>
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	89 83       	std	Y+1, r24	; 0x01
 72a:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 72c:	8a 81       	ldd	r24, Y+2	; 0x02
 72e:	88 2f       	mov	r24, r24
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	81 30       	cpi	r24, 0x01	; 1
 734:	91 05       	cpc	r25, r1
 736:	e1 f0       	breq	.+56     	; 0x770 <PORTD_set_pin_dir+0x52>
 738:	82 30       	cpi	r24, 0x02	; 2
 73a:	91 05       	cpc	r25, r1
 73c:	71 f1       	breq	.+92     	; 0x79a <PORTD_set_pin_dir+0x7c>
 73e:	89 2b       	or	r24, r25
 740:	09 f0       	breq	.+2      	; 0x744 <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 742:	3b c0       	rjmp	.+118    	; 0x7ba <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
 744:	8c e0       	ldi	r24, 0x0C	; 12
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	2c e0       	ldi	r18, 0x0C	; 12
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	f9 01       	movw	r30, r18
 74e:	20 81       	ld	r18, Z
 750:	62 2f       	mov	r22, r18
 752:	29 81       	ldd	r18, Y+1	; 0x01
 754:	42 2f       	mov	r20, r18
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	21 e0       	ldi	r18, 0x01	; 1
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <PORTD_set_pin_dir+0x44>
 75e:	22 0f       	add	r18, r18
 760:	33 1f       	adc	r19, r19
 762:	4a 95       	dec	r20
 764:	e2 f7       	brpl	.-8      	; 0x75e <PORTD_set_pin_dir+0x40>
 766:	20 95       	com	r18
 768:	26 23       	and	r18, r22
 76a:	fc 01       	movw	r30, r24
 76c:	20 83       	st	Z, r18
		break;
 76e:	25 c0       	rjmp	.+74     	; 0x7ba <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 770:	8c e0       	ldi	r24, 0x0C	; 12
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	2c e0       	ldi	r18, 0x0C	; 12
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	f9 01       	movw	r30, r18
 77a:	20 81       	ld	r18, Z
 77c:	62 2f       	mov	r22, r18
 77e:	29 81       	ldd	r18, Y+1	; 0x01
 780:	42 2f       	mov	r20, r18
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <PORTD_set_pin_dir+0x70>
 78a:	22 0f       	add	r18, r18
 78c:	33 1f       	adc	r19, r19
 78e:	4a 95       	dec	r20
 790:	e2 f7       	brpl	.-8      	; 0x78a <PORTD_set_pin_dir+0x6c>
 792:	26 2b       	or	r18, r22
 794:	fc 01       	movw	r30, r24
 796:	20 83       	st	Z, r18
		break;
 798:	10 c0       	rjmp	.+32     	; 0x7ba <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 79a:	89 81       	ldd	r24, Y+1	; 0x01
 79c:	88 2f       	mov	r24, r24
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	80 59       	subi	r24, 0x90	; 144
 7a2:	9b 4f       	sbci	r25, 0xFB	; 251
 7a4:	29 81       	ldd	r18, Y+1	; 0x01
 7a6:	22 2f       	mov	r18, r18
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	20 59       	subi	r18, 0x90	; 144
 7ac:	3b 4f       	sbci	r19, 0xFB	; 251
 7ae:	f9 01       	movw	r30, r18
 7b0:	20 81       	ld	r18, Z
 7b2:	28 60       	ori	r18, 0x08	; 8
 7b4:	fc 01       	movw	r30, r24
 7b6:	20 83       	st	Z, r18
		break;
 7b8:	00 00       	nop
	default:
		break;
	}
}
 7ba:	00 00       	nop
 7bc:	0f 90       	pop	r0
 7be:	0f 90       	pop	r0
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	08 95       	ret

000007c6 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 7c6:	cf 93       	push	r28
 7c8:	df 93       	push	r29
 7ca:	00 d0       	rcall	.+0      	; 0x7cc <PORTD_set_pin_level+0x6>
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	89 83       	std	Y+1, r24	; 0x01
 7d2:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 7d4:	8a 81       	ldd	r24, Y+2	; 0x02
 7d6:	88 23       	and	r24, r24
 7d8:	a9 f0       	breq	.+42     	; 0x804 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 7da:	8c e0       	ldi	r24, 0x0C	; 12
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	2c e0       	ldi	r18, 0x0C	; 12
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	f9 01       	movw	r30, r18
 7e4:	21 81       	ldd	r18, Z+1	; 0x01
 7e6:	62 2f       	mov	r22, r18
 7e8:	29 81       	ldd	r18, Y+1	; 0x01
 7ea:	42 2f       	mov	r20, r18
 7ec:	50 e0       	ldi	r21, 0x00	; 0
 7ee:	21 e0       	ldi	r18, 0x01	; 1
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <PORTD_set_pin_level+0x32>
 7f4:	22 0f       	add	r18, r18
 7f6:	33 1f       	adc	r19, r19
 7f8:	4a 95       	dec	r20
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <PORTD_set_pin_level+0x2e>
 7fc:	26 2b       	or	r18, r22
 7fe:	fc 01       	movw	r30, r24
 800:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 802:	15 c0       	rjmp	.+42     	; 0x82e <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 804:	8c e0       	ldi	r24, 0x0C	; 12
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	2c e0       	ldi	r18, 0x0C	; 12
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	f9 01       	movw	r30, r18
 80e:	21 81       	ldd	r18, Z+1	; 0x01
 810:	62 2f       	mov	r22, r18
 812:	29 81       	ldd	r18, Y+1	; 0x01
 814:	42 2f       	mov	r20, r18
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	21 e0       	ldi	r18, 0x01	; 1
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <PORTD_set_pin_level+0x5c>
 81e:	22 0f       	add	r18, r18
 820:	33 1f       	adc	r19, r19
 822:	4a 95       	dec	r20
 824:	e2 f7       	brpl	.-8      	; 0x81e <PORTD_set_pin_level+0x58>
 826:	20 95       	com	r18
 828:	26 23       	and	r18, r22
 82a:	fc 01       	movw	r30, r24
 82c:	21 83       	std	Z+1, r18	; 0x01
	}
}
 82e:	00 00       	nop
 830:	0f 90       	pop	r0
 832:	0f 90       	pop	r0
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	1f 92       	push	r1
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
 844:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
 846:	69 81       	ldd	r22, Y+1	; 0x01
 848:	83 e0       	ldi	r24, 0x03	; 3
 84a:	0e 94 01 03 	call	0x602	; 0x602 <PORTA_set_pin_dir>
}
 84e:	00 00       	nop
 850:	0f 90       	pop	r0
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	1f 92       	push	r1
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
 862:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 864:	69 81       	ldd	r22, Y+1	; 0x01
 866:	83 e0       	ldi	r24, 0x03	; 3
 868:	0e 94 55 03 	call	0x6aa	; 0x6aa <PORTA_set_pin_level>
}
 86c:	00 00       	nop
 86e:	0f 90       	pop	r0
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	08 95       	ret

00000876 <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
 876:	cf 93       	push	r28
 878:	df 93       	push	r29
 87a:	1f 92       	push	r1
 87c:	cd b7       	in	r28, 0x3d	; 61
 87e:	de b7       	in	r29, 0x3e	; 62
 880:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
 882:	69 81       	ldd	r22, Y+1	; 0x01
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	0e 94 8f 03 	call	0x71e	; 0x71e <PORTD_set_pin_dir>
}
 88a:	00 00       	nop
 88c:	0f 90       	pop	r0
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	08 95       	ret

00000894 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	1f 92       	push	r1
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 8a0:	69 81       	ldd	r22, Y+1	; 0x01
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <PORTD_set_pin_level>
}
 8a8:	00 00       	nop
 8aa:	0f 90       	pop	r0
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	08 95       	ret

000008b2 <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	1f 92       	push	r1
 8b8:	cd b7       	in	r28, 0x3d	; 61
 8ba:	de b7       	in	r29, 0x3e	; 62
 8bc:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
 8be:	69 81       	ldd	r22, Y+1	; 0x01
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	0e 94 8f 03 	call	0x71e	; 0x71e <PORTD_set_pin_dir>
}
 8c6:	00 00       	nop
 8c8:	0f 90       	pop	r0
 8ca:	df 91       	pop	r29
 8cc:	cf 91       	pop	r28
 8ce:	08 95       	ret

000008d0 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	1f 92       	push	r1
 8d6:	cd b7       	in	r28, 0x3d	; 61
 8d8:	de b7       	in	r29, 0x3e	; 62
 8da:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 8dc:	69 81       	ldd	r22, Y+1	; 0x01
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <PORTD_set_pin_level>
}
 8e4:	00 00       	nop
 8e6:	0f 90       	pop	r0
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	08 95       	ret

000008ee <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	1f 92       	push	r1
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
 8f8:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
 8fa:	69 81       	ldd	r22, Y+1	; 0x01
 8fc:	82 e0       	ldi	r24, 0x02	; 2
 8fe:	0e 94 8f 03 	call	0x71e	; 0x71e <PORTD_set_pin_dir>
}
 902:	00 00       	nop
 904:	0f 90       	pop	r0
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	08 95       	ret

0000090c <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	1f 92       	push	r1
 912:	cd b7       	in	r28, 0x3d	; 61
 914:	de b7       	in	r29, 0x3e	; 62
 916:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 918:	69 81       	ldd	r22, Y+1	; 0x01
 91a:	82 e0       	ldi	r24, 0x02	; 2
 91c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <PORTD_set_pin_level>
}
 920:	00 00       	nop
 922:	0f 90       	pop	r0
 924:	df 91       	pop	r29
 926:	cf 91       	pop	r28
 928:	08 95       	ret

0000092a <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	cd b7       	in	r28, 0x3d	; 61
 930:	de b7       	in	r29, 0x3e	; 62
 932:	26 97       	sbiw	r28, 0x06	; 6
 934:	cd bf       	out	0x3d, r28	; 61
 936:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 938:	19 82       	std	Y+1, r1	; 0x01
 93a:	12 c0       	rjmp	.+36     	; 0x960 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 93c:	89 81       	ldd	r24, Y+1	; 0x01
 93e:	88 2f       	mov	r24, r24
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	80 5f       	subi	r24, 0xF0	; 240
 944:	9b 4f       	sbci	r25, 0xFB	; 251
 946:	29 81       	ldd	r18, Y+1	; 0x01
 948:	22 2f       	mov	r18, r18
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	20 5f       	subi	r18, 0xF0	; 240
 94e:	3b 4f       	sbci	r19, 0xFB	; 251
 950:	f9 01       	movw	r30, r18
 952:	20 81       	ld	r18, Z
 954:	28 60       	ori	r18, 0x08	; 8
 956:	fc 01       	movw	r30, r24
 958:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 95a:	89 81       	ldd	r24, Y+1	; 0x01
 95c:	8f 5f       	subi	r24, 0xFF	; 255
 95e:	89 83       	std	Y+1, r24	; 0x01
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	88 30       	cpi	r24, 0x08	; 8
 964:	58 f3       	brcs	.-42     	; 0x93c <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 966:	1a 82       	std	Y+2, r1	; 0x02
 968:	12 c0       	rjmp	.+36     	; 0x98e <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 96a:	8a 81       	ldd	r24, Y+2	; 0x02
 96c:	88 2f       	mov	r24, r24
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	80 5d       	subi	r24, 0xD0	; 208
 972:	9b 4f       	sbci	r25, 0xFB	; 251
 974:	2a 81       	ldd	r18, Y+2	; 0x02
 976:	22 2f       	mov	r18, r18
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	20 5d       	subi	r18, 0xD0	; 208
 97c:	3b 4f       	sbci	r19, 0xFB	; 251
 97e:	f9 01       	movw	r30, r18
 980:	20 81       	ld	r18, Z
 982:	28 60       	ori	r18, 0x08	; 8
 984:	fc 01       	movw	r30, r24
 986:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 988:	8a 81       	ldd	r24, Y+2	; 0x02
 98a:	8f 5f       	subi	r24, 0xFF	; 255
 98c:	8a 83       	std	Y+2, r24	; 0x02
 98e:	8a 81       	ldd	r24, Y+2	; 0x02
 990:	88 30       	cpi	r24, 0x08	; 8
 992:	58 f3       	brcs	.-42     	; 0x96a <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 994:	1b 82       	std	Y+3, r1	; 0x03
 996:	12 c0       	rjmp	.+36     	; 0x9bc <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 998:	8b 81       	ldd	r24, Y+3	; 0x03
 99a:	88 2f       	mov	r24, r24
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	80 5b       	subi	r24, 0xB0	; 176
 9a0:	9b 4f       	sbci	r25, 0xFB	; 251
 9a2:	2b 81       	ldd	r18, Y+3	; 0x03
 9a4:	22 2f       	mov	r18, r18
 9a6:	30 e0       	ldi	r19, 0x00	; 0
 9a8:	20 5b       	subi	r18, 0xB0	; 176
 9aa:	3b 4f       	sbci	r19, 0xFB	; 251
 9ac:	f9 01       	movw	r30, r18
 9ae:	20 81       	ld	r18, Z
 9b0:	28 60       	ori	r18, 0x08	; 8
 9b2:	fc 01       	movw	r30, r24
 9b4:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 9b6:	8b 81       	ldd	r24, Y+3	; 0x03
 9b8:	8f 5f       	subi	r24, 0xFF	; 255
 9ba:	8b 83       	std	Y+3, r24	; 0x03
 9bc:	8b 81       	ldd	r24, Y+3	; 0x03
 9be:	88 30       	cpi	r24, 0x08	; 8
 9c0:	58 f3       	brcs	.-42     	; 0x998 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 9c2:	1c 82       	std	Y+4, r1	; 0x04
 9c4:	12 c0       	rjmp	.+36     	; 0x9ea <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 9c6:	8c 81       	ldd	r24, Y+4	; 0x04
 9c8:	88 2f       	mov	r24, r24
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	80 59       	subi	r24, 0x90	; 144
 9ce:	9b 4f       	sbci	r25, 0xFB	; 251
 9d0:	2c 81       	ldd	r18, Y+4	; 0x04
 9d2:	22 2f       	mov	r18, r18
 9d4:	30 e0       	ldi	r19, 0x00	; 0
 9d6:	20 59       	subi	r18, 0x90	; 144
 9d8:	3b 4f       	sbci	r19, 0xFB	; 251
 9da:	f9 01       	movw	r30, r18
 9dc:	20 81       	ld	r18, Z
 9de:	28 60       	ori	r18, 0x08	; 8
 9e0:	fc 01       	movw	r30, r24
 9e2:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 9e4:	8c 81       	ldd	r24, Y+4	; 0x04
 9e6:	8f 5f       	subi	r24, 0xFF	; 255
 9e8:	8c 83       	std	Y+4, r24	; 0x04
 9ea:	8c 81       	ldd	r24, Y+4	; 0x04
 9ec:	88 30       	cpi	r24, 0x08	; 8
 9ee:	58 f3       	brcs	.-42     	; 0x9c6 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 9f0:	1d 82       	std	Y+5, r1	; 0x05
 9f2:	12 c0       	rjmp	.+36     	; 0xa18 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 9f4:	8d 81       	ldd	r24, Y+5	; 0x05
 9f6:	88 2f       	mov	r24, r24
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	80 57       	subi	r24, 0x70	; 112
 9fc:	9b 4f       	sbci	r25, 0xFB	; 251
 9fe:	2d 81       	ldd	r18, Y+5	; 0x05
 a00:	22 2f       	mov	r18, r18
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	20 57       	subi	r18, 0x70	; 112
 a06:	3b 4f       	sbci	r19, 0xFB	; 251
 a08:	f9 01       	movw	r30, r18
 a0a:	20 81       	ld	r18, Z
 a0c:	28 60       	ori	r18, 0x08	; 8
 a0e:	fc 01       	movw	r30, r24
 a10:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 a12:	8d 81       	ldd	r24, Y+5	; 0x05
 a14:	8f 5f       	subi	r24, 0xFF	; 255
 a16:	8d 83       	std	Y+5, r24	; 0x05
 a18:	8d 81       	ldd	r24, Y+5	; 0x05
 a1a:	88 30       	cpi	r24, 0x08	; 8
 a1c:	58 f3       	brcs	.-42     	; 0x9f4 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 a1e:	1e 82       	std	Y+6, r1	; 0x06
 a20:	12 c0       	rjmp	.+36     	; 0xa46 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 a22:	8e 81       	ldd	r24, Y+6	; 0x06
 a24:	88 2f       	mov	r24, r24
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	80 55       	subi	r24, 0x50	; 80
 a2a:	9b 4f       	sbci	r25, 0xFB	; 251
 a2c:	2e 81       	ldd	r18, Y+6	; 0x06
 a2e:	22 2f       	mov	r18, r18
 a30:	30 e0       	ldi	r19, 0x00	; 0
 a32:	20 55       	subi	r18, 0x50	; 80
 a34:	3b 4f       	sbci	r19, 0xFB	; 251
 a36:	f9 01       	movw	r30, r18
 a38:	20 81       	ld	r18, Z
 a3a:	28 60       	ori	r18, 0x08	; 8
 a3c:	fc 01       	movw	r30, r24
 a3e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 a40:	8e 81       	ldd	r24, Y+6	; 0x06
 a42:	8f 5f       	subi	r24, 0xFF	; 255
 a44:	8e 83       	std	Y+6, r24	; 0x06
 a46:	8e 81       	ldd	r24, Y+6	; 0x06
 a48:	88 30       	cpi	r24, 0x08	; 8
 a4a:	58 f3       	brcs	.-42     	; 0xa22 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 a4c:	00 00       	nop
 a4e:	26 96       	adiw	r28, 0x06	; 6
 a50:	cd bf       	out	0x3d, r28	; 61
 a52:	de bf       	out	0x3e, r29	; 62
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	08 95       	ret

00000a5a <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 a5a:	cf 93       	push	r28
 a5c:	df 93       	push	r29
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 a62:	0e 94 95 04 	call	0x92a	; 0x92a <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
 a66:	80 e0       	ldi	r24, 0x00	; 0
 a68:	0e 94 2c 04 	call	0x858	; 0x858 <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	0e 94 1d 04 	call	0x83a	; 0x83a <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	0e 94 4a 04 	call	0x894	; 0x894 <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	0e 94 3b 04 	call	0x876	; 0x876 <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	0e 94 68 04 	call	0x8d0	; 0x8d0 <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	0e 94 59 04 	call	0x8b2	; 0x8b2 <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
 a8a:	80 e0       	ldi	r24, 0x00	; 0
 a8c:	0e 94 86 04 	call	0x90c	; 0x90c <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	0e 94 77 04 	call	0x8ee	; 0x8ee <B0_MCU_set_dir>

	CLKCTRL_init();
 a96:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <CLKCTRL_init>

	CPUINT_init();
 a9a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <CPUINT_init>

	SLPCTRL_init();
 a9e:	0e 94 57 05 	call	0xaae	; 0xaae <SLPCTRL_init>

	BOD_init();
 aa2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <BOD_init>
}
 aa6:	00 00       	nop
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	08 95       	ret

00000aae <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 ab6:	80 e0       	ldi	r24, 0x00	; 0
}
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	08 95       	ret

00000abe <__cmpsf2>:
 abe:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_cmp>
 ac2:	08 f4       	brcc	.+2      	; 0xac6 <__cmpsf2+0x8>
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	08 95       	ret

00000ac8 <__fixunssfsi>:
 ac8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <__fp_splitA>
 acc:	88 f0       	brcs	.+34     	; 0xaf0 <__fixunssfsi+0x28>
 ace:	9f 57       	subi	r25, 0x7F	; 127
 ad0:	98 f0       	brcs	.+38     	; 0xaf8 <__fixunssfsi+0x30>
 ad2:	b9 2f       	mov	r27, r25
 ad4:	99 27       	eor	r25, r25
 ad6:	b7 51       	subi	r27, 0x17	; 23
 ad8:	b0 f0       	brcs	.+44     	; 0xb06 <__fixunssfsi+0x3e>
 ada:	e1 f0       	breq	.+56     	; 0xb14 <__fixunssfsi+0x4c>
 adc:	66 0f       	add	r22, r22
 ade:	77 1f       	adc	r23, r23
 ae0:	88 1f       	adc	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	1a f0       	brmi	.+6      	; 0xaec <__fixunssfsi+0x24>
 ae6:	ba 95       	dec	r27
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__fixunssfsi+0x14>
 aea:	14 c0       	rjmp	.+40     	; 0xb14 <__fixunssfsi+0x4c>
 aec:	b1 30       	cpi	r27, 0x01	; 1
 aee:	91 f0       	breq	.+36     	; 0xb14 <__fixunssfsi+0x4c>
 af0:	0e 94 16 06 	call	0xc2c	; 0xc2c <__fp_zero>
 af4:	b1 e0       	ldi	r27, 0x01	; 1
 af6:	08 95       	ret
 af8:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__fp_zero>
 afc:	67 2f       	mov	r22, r23
 afe:	78 2f       	mov	r23, r24
 b00:	88 27       	eor	r24, r24
 b02:	b8 5f       	subi	r27, 0xF8	; 248
 b04:	39 f0       	breq	.+14     	; 0xb14 <__fixunssfsi+0x4c>
 b06:	b9 3f       	cpi	r27, 0xF9	; 249
 b08:	cc f3       	brlt	.-14     	; 0xafc <__fixunssfsi+0x34>
 b0a:	86 95       	lsr	r24
 b0c:	77 95       	ror	r23
 b0e:	67 95       	ror	r22
 b10:	b3 95       	inc	r27
 b12:	d9 f7       	brne	.-10     	; 0xb0a <__fixunssfsi+0x42>
 b14:	3e f4       	brtc	.+14     	; 0xb24 <__fixunssfsi+0x5c>
 b16:	90 95       	com	r25
 b18:	80 95       	com	r24
 b1a:	70 95       	com	r23
 b1c:	61 95       	neg	r22
 b1e:	7f 4f       	sbci	r23, 0xFF	; 255
 b20:	8f 4f       	sbci	r24, 0xFF	; 255
 b22:	9f 4f       	sbci	r25, 0xFF	; 255
 b24:	08 95       	ret

00000b26 <__floatunsisf>:
 b26:	e8 94       	clt
 b28:	09 c0       	rjmp	.+18     	; 0xb3c <__floatsisf+0x12>

00000b2a <__floatsisf>:
 b2a:	97 fb       	bst	r25, 7
 b2c:	3e f4       	brtc	.+14     	; 0xb3c <__floatsisf+0x12>
 b2e:	90 95       	com	r25
 b30:	80 95       	com	r24
 b32:	70 95       	com	r23
 b34:	61 95       	neg	r22
 b36:	7f 4f       	sbci	r23, 0xFF	; 255
 b38:	8f 4f       	sbci	r24, 0xFF	; 255
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	99 23       	and	r25, r25
 b3e:	a9 f0       	breq	.+42     	; 0xb6a <__floatsisf+0x40>
 b40:	f9 2f       	mov	r31, r25
 b42:	96 e9       	ldi	r25, 0x96	; 150
 b44:	bb 27       	eor	r27, r27
 b46:	93 95       	inc	r25
 b48:	f6 95       	lsr	r31
 b4a:	87 95       	ror	r24
 b4c:	77 95       	ror	r23
 b4e:	67 95       	ror	r22
 b50:	b7 95       	ror	r27
 b52:	f1 11       	cpse	r31, r1
 b54:	f8 cf       	rjmp	.-16     	; 0xb46 <__floatsisf+0x1c>
 b56:	fa f4       	brpl	.+62     	; 0xb96 <__floatsisf+0x6c>
 b58:	bb 0f       	add	r27, r27
 b5a:	11 f4       	brne	.+4      	; 0xb60 <__floatsisf+0x36>
 b5c:	60 ff       	sbrs	r22, 0
 b5e:	1b c0       	rjmp	.+54     	; 0xb96 <__floatsisf+0x6c>
 b60:	6f 5f       	subi	r22, 0xFF	; 255
 b62:	7f 4f       	sbci	r23, 0xFF	; 255
 b64:	8f 4f       	sbci	r24, 0xFF	; 255
 b66:	9f 4f       	sbci	r25, 0xFF	; 255
 b68:	16 c0       	rjmp	.+44     	; 0xb96 <__floatsisf+0x6c>
 b6a:	88 23       	and	r24, r24
 b6c:	11 f0       	breq	.+4      	; 0xb72 <__floatsisf+0x48>
 b6e:	96 e9       	ldi	r25, 0x96	; 150
 b70:	11 c0       	rjmp	.+34     	; 0xb94 <__floatsisf+0x6a>
 b72:	77 23       	and	r23, r23
 b74:	21 f0       	breq	.+8      	; 0xb7e <__floatsisf+0x54>
 b76:	9e e8       	ldi	r25, 0x8E	; 142
 b78:	87 2f       	mov	r24, r23
 b7a:	76 2f       	mov	r23, r22
 b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__floatsisf+0x5e>
 b7e:	66 23       	and	r22, r22
 b80:	71 f0       	breq	.+28     	; 0xb9e <__floatsisf+0x74>
 b82:	96 e8       	ldi	r25, 0x86	; 134
 b84:	86 2f       	mov	r24, r22
 b86:	70 e0       	ldi	r23, 0x00	; 0
 b88:	60 e0       	ldi	r22, 0x00	; 0
 b8a:	2a f0       	brmi	.+10     	; 0xb96 <__floatsisf+0x6c>
 b8c:	9a 95       	dec	r25
 b8e:	66 0f       	add	r22, r22
 b90:	77 1f       	adc	r23, r23
 b92:	88 1f       	adc	r24, r24
 b94:	da f7       	brpl	.-10     	; 0xb8c <__floatsisf+0x62>
 b96:	88 0f       	add	r24, r24
 b98:	96 95       	lsr	r25
 b9a:	87 95       	ror	r24
 b9c:	97 f9       	bld	r25, 7
 b9e:	08 95       	ret

00000ba0 <__fp_cmp>:
 ba0:	99 0f       	add	r25, r25
 ba2:	00 08       	sbc	r0, r0
 ba4:	55 0f       	add	r21, r21
 ba6:	aa 0b       	sbc	r26, r26
 ba8:	e0 e8       	ldi	r30, 0x80	; 128
 baa:	fe ef       	ldi	r31, 0xFE	; 254
 bac:	16 16       	cp	r1, r22
 bae:	17 06       	cpc	r1, r23
 bb0:	e8 07       	cpc	r30, r24
 bb2:	f9 07       	cpc	r31, r25
 bb4:	c0 f0       	brcs	.+48     	; 0xbe6 <__fp_cmp+0x46>
 bb6:	12 16       	cp	r1, r18
 bb8:	13 06       	cpc	r1, r19
 bba:	e4 07       	cpc	r30, r20
 bbc:	f5 07       	cpc	r31, r21
 bbe:	98 f0       	brcs	.+38     	; 0xbe6 <__fp_cmp+0x46>
 bc0:	62 1b       	sub	r22, r18
 bc2:	73 0b       	sbc	r23, r19
 bc4:	84 0b       	sbc	r24, r20
 bc6:	95 0b       	sbc	r25, r21
 bc8:	39 f4       	brne	.+14     	; 0xbd8 <__fp_cmp+0x38>
 bca:	0a 26       	eor	r0, r26
 bcc:	61 f0       	breq	.+24     	; 0xbe6 <__fp_cmp+0x46>
 bce:	23 2b       	or	r18, r19
 bd0:	24 2b       	or	r18, r20
 bd2:	25 2b       	or	r18, r21
 bd4:	21 f4       	brne	.+8      	; 0xbde <__fp_cmp+0x3e>
 bd6:	08 95       	ret
 bd8:	0a 26       	eor	r0, r26
 bda:	09 f4       	brne	.+2      	; 0xbde <__fp_cmp+0x3e>
 bdc:	a1 40       	sbci	r26, 0x01	; 1
 bde:	a6 95       	lsr	r26
 be0:	8f ef       	ldi	r24, 0xFF	; 255
 be2:	81 1d       	adc	r24, r1
 be4:	81 1d       	adc	r24, r1
 be6:	08 95       	ret

00000be8 <__fp_split3>:
 be8:	57 fd       	sbrc	r21, 7
 bea:	90 58       	subi	r25, 0x80	; 128
 bec:	44 0f       	add	r20, r20
 bee:	55 1f       	adc	r21, r21
 bf0:	59 f0       	breq	.+22     	; 0xc08 <__fp_splitA+0x10>
 bf2:	5f 3f       	cpi	r21, 0xFF	; 255
 bf4:	71 f0       	breq	.+28     	; 0xc12 <__fp_splitA+0x1a>
 bf6:	47 95       	ror	r20

00000bf8 <__fp_splitA>:
 bf8:	88 0f       	add	r24, r24
 bfa:	97 fb       	bst	r25, 7
 bfc:	99 1f       	adc	r25, r25
 bfe:	61 f0       	breq	.+24     	; 0xc18 <__fp_splitA+0x20>
 c00:	9f 3f       	cpi	r25, 0xFF	; 255
 c02:	79 f0       	breq	.+30     	; 0xc22 <__fp_splitA+0x2a>
 c04:	87 95       	ror	r24
 c06:	08 95       	ret
 c08:	12 16       	cp	r1, r18
 c0a:	13 06       	cpc	r1, r19
 c0c:	14 06       	cpc	r1, r20
 c0e:	55 1f       	adc	r21, r21
 c10:	f2 cf       	rjmp	.-28     	; 0xbf6 <__fp_split3+0xe>
 c12:	46 95       	lsr	r20
 c14:	f1 df       	rcall	.-30     	; 0xbf8 <__fp_splitA>
 c16:	08 c0       	rjmp	.+16     	; 0xc28 <__fp_splitA+0x30>
 c18:	16 16       	cp	r1, r22
 c1a:	17 06       	cpc	r1, r23
 c1c:	18 06       	cpc	r1, r24
 c1e:	99 1f       	adc	r25, r25
 c20:	f1 cf       	rjmp	.-30     	; 0xc04 <__fp_splitA+0xc>
 c22:	86 95       	lsr	r24
 c24:	71 05       	cpc	r23, r1
 c26:	61 05       	cpc	r22, r1
 c28:	08 94       	sec
 c2a:	08 95       	ret

00000c2c <__fp_zero>:
 c2c:	e8 94       	clt

00000c2e <__fp_szero>:
 c2e:	bb 27       	eor	r27, r27
 c30:	66 27       	eor	r22, r22
 c32:	77 27       	eor	r23, r23
 c34:	cb 01       	movw	r24, r22
 c36:	97 f9       	bld	r25, 7
 c38:	08 95       	ret

00000c3a <__gesf2>:
 c3a:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_cmp>
 c3e:	08 f4       	brcc	.+2      	; 0xc42 <__gesf2+0x8>
 c40:	8f ef       	ldi	r24, 0xFF	; 255
 c42:	08 95       	ret

00000c44 <__mulsf3>:
 c44:	0e 94 35 06 	call	0xc6a	; 0xc6a <__mulsf3x>
 c48:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__fp_round>
 c4c:	0e 94 98 06 	call	0xd30	; 0xd30 <__fp_pscA>
 c50:	38 f0       	brcs	.+14     	; 0xc60 <__mulsf3+0x1c>
 c52:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_pscB>
 c56:	20 f0       	brcs	.+8      	; 0xc60 <__mulsf3+0x1c>
 c58:	95 23       	and	r25, r21
 c5a:	11 f0       	breq	.+4      	; 0xc60 <__mulsf3+0x1c>
 c5c:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__fp_inf>
 c60:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_nan>
 c64:	11 24       	eor	r1, r1
 c66:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_szero>

00000c6a <__mulsf3x>:
 c6a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__fp_split3>
 c6e:	70 f3       	brcs	.-36     	; 0xc4c <__mulsf3+0x8>

00000c70 <__mulsf3_pse>:
 c70:	95 9f       	mul	r25, r21
 c72:	c1 f3       	breq	.-16     	; 0xc64 <__mulsf3+0x20>
 c74:	95 0f       	add	r25, r21
 c76:	50 e0       	ldi	r21, 0x00	; 0
 c78:	55 1f       	adc	r21, r21
 c7a:	62 9f       	mul	r22, r18
 c7c:	f0 01       	movw	r30, r0
 c7e:	72 9f       	mul	r23, r18
 c80:	bb 27       	eor	r27, r27
 c82:	f0 0d       	add	r31, r0
 c84:	b1 1d       	adc	r27, r1
 c86:	63 9f       	mul	r22, r19
 c88:	aa 27       	eor	r26, r26
 c8a:	f0 0d       	add	r31, r0
 c8c:	b1 1d       	adc	r27, r1
 c8e:	aa 1f       	adc	r26, r26
 c90:	64 9f       	mul	r22, r20
 c92:	66 27       	eor	r22, r22
 c94:	b0 0d       	add	r27, r0
 c96:	a1 1d       	adc	r26, r1
 c98:	66 1f       	adc	r22, r22
 c9a:	82 9f       	mul	r24, r18
 c9c:	22 27       	eor	r18, r18
 c9e:	b0 0d       	add	r27, r0
 ca0:	a1 1d       	adc	r26, r1
 ca2:	62 1f       	adc	r22, r18
 ca4:	73 9f       	mul	r23, r19
 ca6:	b0 0d       	add	r27, r0
 ca8:	a1 1d       	adc	r26, r1
 caa:	62 1f       	adc	r22, r18
 cac:	83 9f       	mul	r24, r19
 cae:	a0 0d       	add	r26, r0
 cb0:	61 1d       	adc	r22, r1
 cb2:	22 1f       	adc	r18, r18
 cb4:	74 9f       	mul	r23, r20
 cb6:	33 27       	eor	r19, r19
 cb8:	a0 0d       	add	r26, r0
 cba:	61 1d       	adc	r22, r1
 cbc:	23 1f       	adc	r18, r19
 cbe:	84 9f       	mul	r24, r20
 cc0:	60 0d       	add	r22, r0
 cc2:	21 1d       	adc	r18, r1
 cc4:	82 2f       	mov	r24, r18
 cc6:	76 2f       	mov	r23, r22
 cc8:	6a 2f       	mov	r22, r26
 cca:	11 24       	eor	r1, r1
 ccc:	9f 57       	subi	r25, 0x7F	; 127
 cce:	50 40       	sbci	r21, 0x00	; 0
 cd0:	9a f0       	brmi	.+38     	; 0xcf8 <__mulsf3_pse+0x88>
 cd2:	f1 f0       	breq	.+60     	; 0xd10 <__mulsf3_pse+0xa0>
 cd4:	88 23       	and	r24, r24
 cd6:	4a f0       	brmi	.+18     	; 0xcea <__mulsf3_pse+0x7a>
 cd8:	ee 0f       	add	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	bb 1f       	adc	r27, r27
 cde:	66 1f       	adc	r22, r22
 ce0:	77 1f       	adc	r23, r23
 ce2:	88 1f       	adc	r24, r24
 ce4:	91 50       	subi	r25, 0x01	; 1
 ce6:	50 40       	sbci	r21, 0x00	; 0
 ce8:	a9 f7       	brne	.-22     	; 0xcd4 <__mulsf3_pse+0x64>
 cea:	9e 3f       	cpi	r25, 0xFE	; 254
 cec:	51 05       	cpc	r21, r1
 cee:	80 f0       	brcs	.+32     	; 0xd10 <__mulsf3_pse+0xa0>
 cf0:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__fp_inf>
 cf4:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__fp_szero>
 cf8:	5f 3f       	cpi	r21, 0xFF	; 255
 cfa:	e4 f3       	brlt	.-8      	; 0xcf4 <__mulsf3_pse+0x84>
 cfc:	98 3e       	cpi	r25, 0xE8	; 232
 cfe:	d4 f3       	brlt	.-12     	; 0xcf4 <__mulsf3_pse+0x84>
 d00:	86 95       	lsr	r24
 d02:	77 95       	ror	r23
 d04:	67 95       	ror	r22
 d06:	b7 95       	ror	r27
 d08:	f7 95       	ror	r31
 d0a:	e7 95       	ror	r30
 d0c:	9f 5f       	subi	r25, 0xFF	; 255
 d0e:	c1 f7       	brne	.-16     	; 0xd00 <__mulsf3_pse+0x90>
 d10:	fe 2b       	or	r31, r30
 d12:	88 0f       	add	r24, r24
 d14:	91 1d       	adc	r25, r1
 d16:	96 95       	lsr	r25
 d18:	87 95       	ror	r24
 d1a:	97 f9       	bld	r25, 7
 d1c:	08 95       	ret

00000d1e <__fp_inf>:
 d1e:	97 f9       	bld	r25, 7
 d20:	9f 67       	ori	r25, 0x7F	; 127
 d22:	80 e8       	ldi	r24, 0x80	; 128
 d24:	70 e0       	ldi	r23, 0x00	; 0
 d26:	60 e0       	ldi	r22, 0x00	; 0
 d28:	08 95       	ret

00000d2a <__fp_nan>:
 d2a:	9f ef       	ldi	r25, 0xFF	; 255
 d2c:	80 ec       	ldi	r24, 0xC0	; 192
 d2e:	08 95       	ret

00000d30 <__fp_pscA>:
 d30:	00 24       	eor	r0, r0
 d32:	0a 94       	dec	r0
 d34:	16 16       	cp	r1, r22
 d36:	17 06       	cpc	r1, r23
 d38:	18 06       	cpc	r1, r24
 d3a:	09 06       	cpc	r0, r25
 d3c:	08 95       	ret

00000d3e <__fp_pscB>:
 d3e:	00 24       	eor	r0, r0
 d40:	0a 94       	dec	r0
 d42:	12 16       	cp	r1, r18
 d44:	13 06       	cpc	r1, r19
 d46:	14 06       	cpc	r1, r20
 d48:	05 06       	cpc	r0, r21
 d4a:	08 95       	ret

00000d4c <__fp_round>:
 d4c:	09 2e       	mov	r0, r25
 d4e:	03 94       	inc	r0
 d50:	00 0c       	add	r0, r0
 d52:	11 f4       	brne	.+4      	; 0xd58 <__fp_round+0xc>
 d54:	88 23       	and	r24, r24
 d56:	52 f0       	brmi	.+20     	; 0xd6c <__fp_round+0x20>
 d58:	bb 0f       	add	r27, r27
 d5a:	40 f4       	brcc	.+16     	; 0xd6c <__fp_round+0x20>
 d5c:	bf 2b       	or	r27, r31
 d5e:	11 f4       	brne	.+4      	; 0xd64 <__fp_round+0x18>
 d60:	60 ff       	sbrs	r22, 0
 d62:	04 c0       	rjmp	.+8      	; 0xd6c <__fp_round+0x20>
 d64:	6f 5f       	subi	r22, 0xFF	; 255
 d66:	7f 4f       	sbci	r23, 0xFF	; 255
 d68:	8f 4f       	sbci	r24, 0xFF	; 255
 d6a:	9f 4f       	sbci	r25, 0xFF	; 255
 d6c:	08 95       	ret

00000d6e <_exit>:
 d6e:	f8 94       	cli

00000d70 <__stop_program>:
 d70:	ff cf       	rjmp	.-2      	; 0xd70 <__stop_program>
