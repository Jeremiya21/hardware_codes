
TCA_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c26  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002719  00000000  00000000  00004022  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000918  00000000  00000000  0000673b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00007054  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000015ee  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000154  00000000  00000000  000087b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000890a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  a0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <system_init>
  ac:	08 95       	ret

000000ae <LedOn>:
 *  Author: user
 */ 
#include "LedOn.h"
void LedOn(uint8_t red,uint8_t green, uint8_t blue)
{
	TCA0.SINGLE.CMP0=red;
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	e0 e0       	ldi	r30, 0x00	; 0
  b2:	fa e0       	ldi	r31, 0x0A	; 10
  b4:	80 a7       	std	Z+40, r24	; 0x28
  b6:	91 a7       	std	Z+41, r25	; 0x29
	TCA0.SINGLE.CMP1=green;
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	62 a7       	std	Z+42, r22	; 0x2a
  bc:	73 a7       	std	Z+43, r23	; 0x2b
	TCA0.SINGLE.CMP2=blue;
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	44 a7       	std	Z+44, r20	; 0x2c
  c2:	55 a7       	std	Z+45, r21	; 0x2d
  c4:	08 95       	ret

000000c6 <main>:
#include "LedOn.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  c6:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		LedOn(100,100,100);	
  ca:	44 e6       	ldi	r20, 0x64	; 100
  cc:	64 e6       	ldi	r22, 0x64	; 100
  ce:	84 e6       	ldi	r24, 0x64	; 100
  d0:	0e 94 57 00 	call	0xae	; 0xae <LedOn>
  d4:	fa cf       	rjmp	.-12     	; 0xca <main+0x4>

000000d6 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret

000000da <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret

000000de <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	08 95       	ret

000000e2 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 c0       	rjmp	.+16     	; 0xf6 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e0 5f       	subi	r30, 0xF0	; 240
  ec:	fb 4f       	sbci	r31, 0xFB	; 251
  ee:	90 81       	ld	r25, Z
  f0:	98 60       	ori	r25, 0x08	; 8
  f2:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	88 30       	cpi	r24, 0x08	; 8
  f8:	b0 f3       	brcs	.-20     	; 0xe6 <mcu_init+0x4>
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 c0       	rjmp	.+16     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e0 5d       	subi	r30, 0xD0	; 208
 104:	fb 4f       	sbci	r31, 0xFB	; 251
 106:	90 81       	ld	r25, Z
 108:	98 60       	ori	r25, 0x08	; 8
 10a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	b0 f3       	brcs	.-20     	; 0xfe <mcu_init+0x1c>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 c0       	rjmp	.+16     	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 116:	e8 2f       	mov	r30, r24
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e0 5b       	subi	r30, 0xB0	; 176
 11c:	fb 4f       	sbci	r31, 0xFB	; 251
 11e:	90 81       	ld	r25, Z
 120:	98 60       	ori	r25, 0x08	; 8
 122:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	b0 f3       	brcs	.-20     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 c0       	rjmp	.+16     	; 0x13e <__EEPROM_REGION_LENGTH__+0x3e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 12e:	e8 2f       	mov	r30, r24
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	e0 59       	subi	r30, 0x90	; 144
 134:	fb 4f       	sbci	r31, 0xFB	; 251
 136:	90 81       	ld	r25, Z
 138:	98 60       	ori	r25, 0x08	; 8
 13a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	88 30       	cpi	r24, 0x08	; 8
 140:	b0 f3       	brcs	.-20     	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 c0       	rjmp	.+16     	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 146:	e8 2f       	mov	r30, r24
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e0 57       	subi	r30, 0x70	; 112
 14c:	fb 4f       	sbci	r31, 0xFB	; 251
 14e:	90 81       	ld	r25, Z
 150:	98 60       	ori	r25, 0x08	; 8
 152:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	b0 f3       	brcs	.-20     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 c0       	rjmp	.+16     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 15e:	e8 2f       	mov	r30, r24
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e0 55       	subi	r30, 0x50	; 80
 164:	fb 4f       	sbci	r31, 0xFB	; 251
 166:	90 81       	ld	r25, Z
 168:	98 60       	ori	r25, 0x08	; 8
 16a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	88 30       	cpi	r24, 0x08	; 8
 170:	b0 f3       	brcs	.-20     	; 0x15e <__EEPROM_REGION_LENGTH__+0x5e>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 172:	08 95       	ret

00000174 <TIMER_0_initialization>:
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 174:	8d b1       	in	r24, 0x0d	; 13
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 17a:	8c b1       	in	r24, 0x0c	; 12
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	8c b9       	out	0x0c, r24	; 12

	PD0_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 180:	e0 ee       	ldi	r30, 0xE0	; 224
 182:	f5 e0       	ldi	r31, 0x05	; 5
 184:	84 81       	ldd	r24, Z+4	; 0x04
 186:	83 60       	ori	r24, 0x03	; 3
 188:	84 83       	std	Z+4, r24	; 0x04
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 18a:	8d b1       	in	r24, 0x0d	; 13
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 190:	8c b1       	in	r24, 0x0c	; 12
 192:	82 60       	ori	r24, 0x02	; 2
 194:	8c b9       	out	0x0c, r24	; 12

	PD1_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 196:	84 81       	ldd	r24, Z+4	; 0x04
 198:	83 60       	ori	r24, 0x03	; 3
 19a:	84 83       	std	Z+4, r24	; 0x04
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 19c:	8d b1       	in	r24, 0x0d	; 13
 19e:	8b 7f       	andi	r24, 0xFB	; 251
 1a0:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 1a2:	8c b1       	in	r24, 0x0c	; 12
 1a4:	84 60       	ori	r24, 0x04	; 4
 1a6:	8c b9       	out	0x0c, r24	; 12

	PD2_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 1a8:	84 81       	ldd	r24, Z+4	; 0x04
 1aa:	83 60       	ori	r24, 0x03	; 3
 1ac:	84 83       	std	Z+4, r24	; 0x04

	TIMER_0_init();
 1ae:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <TIMER_0_init>
 1b2:	08 95       	ret

000001b4 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1b4:	0e 94 71 00 	call	0xe2	; 0xe2 <mcu_init>

	CLKCTRL_init();
 1b8:	0e 94 6d 00 	call	0xda	; 0xda <CLKCTRL_init>

	TIMER_0_initialization();
 1bc:	0e 94 ba 00 	call	0x174	; 0x174 <TIMER_0_initialization>

	CPUINT_init();
 1c0:	0e 94 6f 00 	call	0xde	; 0xde <CPUINT_init>

	SLPCTRL_init();
 1c4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <SLPCTRL_init>

	BOD_init();
 1c8:	0e 94 6b 00 	call	0xd6	; 0xd6 <BOD_init>
 1cc:	08 95       	ret

000001ce <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret

000001d2 <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	 TCA0.SINGLE.CMP0 = 0x0; /* Compare Register 0: 0x0 */
 1d2:	e0 e0       	ldi	r30, 0x00	; 0
 1d4:	fa e0       	ldi	r31, 0x0A	; 10
 1d6:	10 a6       	std	Z+40, r1	; 0x28
 1d8:	11 a6       	std	Z+41, r1	; 0x29

	 TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */
 1da:	12 a6       	std	Z+42, r1	; 0x2a
 1dc:	13 a6       	std	Z+43, r1	; 0x2b

	 TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */
 1de:	14 a6       	std	Z+44, r1	; 0x2c
 1e0:	15 a6       	std	Z+45, r1	; 0x2d

	 TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */
 1e2:	10 a2       	std	Z+32, r1	; 0x20
 1e4:	11 a2       	std	Z+33, r1	; 0x21

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 1e6:	83 e7       	ldi	r24, 0x73	; 115
 1e8:	81 83       	std	Z+1, r24	; 0x01
	                    | 1 << TCA_SINGLE_CMP0EN_bp         /* Compare 0 Enable: enabled */
	                    | 1 << TCA_SINGLE_CMP1EN_bp         /* Compare 1 Enable: enabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Compare 2 Enable: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */

	TCA0.SINGLE.CTRLC = 1 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: enabled */
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	82 83       	std	Z+2, r24	; 0x02
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 0xff; /* Period: 0xff */
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	86 a3       	std	Z+38, r24	; 0x26
 1f4:	97 a3       	std	Z+39, r25	; 0x27

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
