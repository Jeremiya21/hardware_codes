
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000007c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e8c  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000025f9  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000be2  00000000  00000000  00005e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  00006a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001339  00000000  00000000  00006e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000791  00000000  00000000  00008195  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00008926  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 2b 01 	call	0x256	; 0x256 <main>
  a0:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 83 03 	call	0x706	; 0x706 <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <PORTA_set_pin_level+0x6>
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	88 23       	and	r24, r24
  ce:	a9 f0       	breq	.+42     	; 0xfa <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	68 2f       	mov	r22, r24
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	48 2f       	mov	r20, r24
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <PORTA_set_pin_level+0x32>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	4a 95       	dec	r20
  f0:	e2 f7       	brpl	.-8      	; 0xea <PORTA_set_pin_level+0x2e>
  f2:	86 2b       	or	r24, r22
  f4:	f9 01       	movw	r30, r18
  f6:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
  f8:	15 c0       	rjmp	.+42     	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	68 2f       	mov	r22, r24
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	48 2f       	mov	r20, r24
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	4a 95       	dec	r20
 11a:	e2 f7       	brpl	.-8      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 11c:	80 95       	com	r24
 11e:	86 23       	and	r24, r22
 120:	f9 01       	movw	r30, r18
 122:	81 83       	std	Z+1, r24	; 0x01
	}
}
 124:	00 00       	nop
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <PORTD_set_pin_level+0x6>
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 13e:	8a 81       	ldd	r24, Y+2	; 0x02
 140:	88 23       	and	r24, r24
 142:	a9 f0       	breq	.+42     	; 0x16e <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 144:	8c e0       	ldi	r24, 0x0C	; 12
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2c e0       	ldi	r18, 0x0C	; 12
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	21 81       	ldd	r18, Z+1	; 0x01
 150:	62 2f       	mov	r22, r18
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	42 2f       	mov	r20, r18
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	02 c0       	rjmp	.+4      	; 0x162 <PORTD_set_pin_level+0x32>
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	4a 95       	dec	r20
 164:	e2 f7       	brpl	.-8      	; 0x15e <PORTD_set_pin_level+0x2e>
 166:	26 2b       	or	r18, r22
 168:	fc 01       	movw	r30, r24
 16a:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 16c:	15 c0       	rjmp	.+42     	; 0x198 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 16e:	8c e0       	ldi	r24, 0x0C	; 12
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	2c e0       	ldi	r18, 0x0C	; 12
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	21 81       	ldd	r18, Z+1	; 0x01
 17a:	62 2f       	mov	r22, r18
 17c:	29 81       	ldd	r18, Y+1	; 0x01
 17e:	42 2f       	mov	r20, r18
 180:	50 e0       	ldi	r21, 0x00	; 0
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <PORTD_set_pin_level+0x5c>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	4a 95       	dec	r20
 18e:	e2 f7       	brpl	.-8      	; 0x188 <PORTD_set_pin_level+0x58>
 190:	20 95       	com	r18
 192:	26 23       	and	r18, r22
 194:	fc 01       	movw	r30, r24
 196:	21 83       	std	Z+1, r18	; 0x01
	}
}
 198:	00 00       	nop
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	1f 92       	push	r1
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 1b0:	69 81       	ldd	r22, Y+1	; 0x01
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 5e 00 	call	0xbc	; 0xbc <PORTA_set_pin_level>
}
 1b8:	00 00       	nop
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	1f 92       	push	r1
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 1ce:	69 81       	ldd	r22, Y+1	; 0x01
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 1d6:	00 00       	nop
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	1f 92       	push	r1
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 1ec:	69 81       	ldd	r22, Y+1	; 0x01
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 1f4:	00 00       	nop
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	08 95       	ret

000001fe <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	1f 92       	push	r1
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 20a:	69 81       	ldd	r22, Y+1	; 0x01
 20c:	82 e0       	ldi	r24, 0x02	; 2
 20e:	0e 94 98 00 	call	0x130	; 0x130 <PORTD_set_pin_level>
}
 212:	00 00       	nop
 214:	0f 90       	pop	r0
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <LedOnFunction>:
 *  Author: SUNNY
 */ 
#include <stdbool.h>
#include <atmel_start.h>
void LedOnFunction(bool R,bool G,bool B,bool W)
{
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	00 d0       	rcall	.+0      	; 0x222 <LedOnFunction+0x6>
 222:	00 d0       	rcall	.+0      	; 0x224 <LedOnFunction+0x8>
 224:	cd b7       	in	r28, 0x3d	; 61
 226:	de b7       	in	r29, 0x3e	; 62
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	6a 83       	std	Y+2, r22	; 0x02
 22c:	4b 83       	std	Y+3, r20	; 0x03
 22e:	2c 83       	std	Y+4, r18	; 0x04
	
		R0_MCU_set_level(R);
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <R0_MCU_set_level>
		G0_MCU_set_level(G);
 236:	8a 81       	ldd	r24, Y+2	; 0x02
 238:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <G0_MCU_set_level>
		B0_MCU_set_level(B);
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <B0_MCU_set_level>
		W0_MCU_set_level(W);
 242:	8c 81       	ldd	r24, Y+4	; 0x04
 244:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <W0_MCU_set_level>
 248:	00 00       	nop
 24a:	24 96       	adiw	r28, 0x04	; 4
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	de bf       	out	0x3e, r29	; 62
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <main>:
#include <atmel_start.h>
#include <stdbool.h>
#include "LedOnFunction.h"

int main(void)
{
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	00 d0       	rcall	.+0      	; 0x25c <main+0x6>
 25c:	00 d0       	rcall	.+0      	; 0x25e <main+0x8>
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 262:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	
	bool R,G,B,W;
	R=true;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	89 83       	std	Y+1, r24	; 0x01
	G=false;
 26a:	1a 82       	std	Y+2, r1	; 0x02
	B=false;
 26c:	1b 82       	std	Y+3, r1	; 0x03
	W=false;
 26e:	1c 82       	std	Y+4, r1	; 0x04
	while (1) 
	{
		LedOnFunction(R,G,B,W);
 270:	2c 81       	ldd	r18, Y+4	; 0x04
 272:	4b 81       	ldd	r20, Y+3	; 0x03
 274:	6a 81       	ldd	r22, Y+2	; 0x02
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	0e 94 0e 01 	call	0x21c	; 0x21c <LedOnFunction>
	}
 27c:	f9 cf       	rjmp	.-14     	; 0x270 <main+0x1a>

0000027e <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 286:	80 e0       	ldi	r24, 0x00	; 0
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 296:	80 e0       	ldi	r24, 0x00	; 0
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <PORTA_set_pin_dir+0x6>
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	88 2f       	mov	r24, r24
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	e1 f0       	breq	.+56     	; 0x300 <PORTA_set_pin_dir+0x52>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	91 05       	cpc	r25, r1
 2cc:	71 f1       	breq	.+92     	; 0x32a <PORTA_set_pin_dir+0x7c>
 2ce:	89 2b       	or	r24, r25
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 2d2:	3b c0       	rjmp	.+118    	; 0x34a <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	fc 01       	movw	r30, r24
 2de:	80 81       	ld	r24, Z
 2e0:	68 2f       	mov	r22, r24
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	48 2f       	mov	r20, r24
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <PORTA_set_pin_dir+0x44>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	4a 95       	dec	r20
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <PORTA_set_pin_dir+0x40>
 2f6:	80 95       	com	r24
 2f8:	86 23       	and	r24, r22
 2fa:	f9 01       	movw	r30, r18
 2fc:	80 83       	st	Z, r24
		break;
 2fe:	25 c0       	rjmp	.+74     	; 0x34a <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	80 81       	ld	r24, Z
 30c:	68 2f       	mov	r22, r24
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	48 2f       	mov	r20, r24
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	02 c0       	rjmp	.+4      	; 0x31e <PORTA_set_pin_dir+0x70>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	4a 95       	dec	r20
 320:	e2 f7       	brpl	.-8      	; 0x31a <PORTA_set_pin_dir+0x6c>
 322:	86 2b       	or	r24, r22
 324:	f9 01       	movw	r30, r18
 326:	80 83       	st	Z, r24
		break;
 328:	10 c0       	rjmp	.+32     	; 0x34a <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	80 5f       	subi	r24, 0xF0	; 240
 332:	9b 4f       	sbci	r25, 0xFB	; 251
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	22 2f       	mov	r18, r18
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	20 5f       	subi	r18, 0xF0	; 240
 33c:	3b 4f       	sbci	r19, 0xFB	; 251
 33e:	f9 01       	movw	r30, r18
 340:	20 81       	ld	r18, Z
 342:	28 60       	ori	r18, 0x08	; 8
 344:	fc 01       	movw	r30, r24
 346:	20 83       	st	Z, r18
		break;
 348:	00 00       	nop
	default:
		break;
	}
}
 34a:	00 00       	nop
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	00 d0       	rcall	.+0      	; 0x35c <PORTA_set_pin_level+0x6>
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	89 83       	std	Y+1, r24	; 0x01
 362:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	88 23       	and	r24, r24
 368:	a9 f0       	breq	.+42     	; 0x394 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	fc 01       	movw	r30, r24
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	68 2f       	mov	r22, r24
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	48 2f       	mov	r20, r24
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <PORTA_set_pin_level+0x32>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	4a 95       	dec	r20
 38a:	e2 f7       	brpl	.-8      	; 0x384 <PORTA_set_pin_level+0x2e>
 38c:	86 2b       	or	r24, r22
 38e:	f9 01       	movw	r30, r18
 390:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 392:	15 c0       	rjmp	.+42     	; 0x3be <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	fc 01       	movw	r30, r24
 39e:	81 81       	ldd	r24, Z+1	; 0x01
 3a0:	68 2f       	mov	r22, r24
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	48 2f       	mov	r20, r24
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <PORTA_set_pin_level+0x5c>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	4a 95       	dec	r20
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <PORTA_set_pin_level+0x58>
 3b6:	80 95       	com	r24
 3b8:	86 23       	and	r24, r22
 3ba:	f9 01       	movw	r30, r18
 3bc:	81 83       	std	Z+1, r24	; 0x01
	}
}
 3be:	00 00       	nop
 3c0:	0f 90       	pop	r0
 3c2:	0f 90       	pop	r0
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <PORTD_set_pin_dir+0x6>
 3d0:	cd b7       	in	r28, 0x3d	; 61
 3d2:	de b7       	in	r29, 0x3e	; 62
 3d4:	89 83       	std	Y+1, r24	; 0x01
 3d6:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 3d8:	8a 81       	ldd	r24, Y+2	; 0x02
 3da:	88 2f       	mov	r24, r24
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	91 05       	cpc	r25, r1
 3e2:	e1 f0       	breq	.+56     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3e4:	82 30       	cpi	r24, 0x02	; 2
 3e6:	91 05       	cpc	r25, r1
 3e8:	71 f1       	breq	.+92     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3ea:	89 2b       	or	r24, r25
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 3ee:	3b c0       	rjmp	.+118    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
 3f0:	8c e0       	ldi	r24, 0x0C	; 12
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	2c e0       	ldi	r18, 0x0C	; 12
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	62 2f       	mov	r22, r18
 3fe:	29 81       	ldd	r18, Y+1	; 0x01
 400:	42 2f       	mov	r20, r18
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	4a 95       	dec	r20
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	20 95       	com	r18
 414:	26 23       	and	r18, r22
 416:	fc 01       	movw	r30, r24
 418:	20 83       	st	Z, r18
		break;
 41a:	25 c0       	rjmp	.+74     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 41c:	8c e0       	ldi	r24, 0x0C	; 12
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	2c e0       	ldi	r18, 0x0C	; 12
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	f9 01       	movw	r30, r18
 426:	20 81       	ld	r18, Z
 428:	62 2f       	mov	r22, r18
 42a:	29 81       	ldd	r18, Y+1	; 0x01
 42c:	42 2f       	mov	r20, r18
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 436:	22 0f       	add	r18, r18
 438:	33 1f       	adc	r19, r19
 43a:	4a 95       	dec	r20
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	26 2b       	or	r18, r22
 440:	fc 01       	movw	r30, r24
 442:	20 83       	st	Z, r18
		break;
 444:	10 c0       	rjmp	.+32     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 446:	89 81       	ldd	r24, Y+1	; 0x01
 448:	88 2f       	mov	r24, r24
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	80 59       	subi	r24, 0x90	; 144
 44e:	9b 4f       	sbci	r25, 0xFB	; 251
 450:	29 81       	ldd	r18, Y+1	; 0x01
 452:	22 2f       	mov	r18, r18
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	20 59       	subi	r18, 0x90	; 144
 458:	3b 4f       	sbci	r19, 0xFB	; 251
 45a:	f9 01       	movw	r30, r18
 45c:	20 81       	ld	r18, Z
 45e:	28 60       	ori	r18, 0x08	; 8
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
		break;
 464:	00 00       	nop
	default:
		break;
	}
}
 466:	00 00       	nop
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	00 d0       	rcall	.+0      	; 0x478 <PORTD_set_pin_level+0x6>
 478:	cd b7       	in	r28, 0x3d	; 61
 47a:	de b7       	in	r29, 0x3e	; 62
 47c:	89 83       	std	Y+1, r24	; 0x01
 47e:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	88 23       	and	r24, r24
 484:	a9 f0       	breq	.+42     	; 0x4b0 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	2c e0       	ldi	r18, 0x0C	; 12
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	f9 01       	movw	r30, r18
 490:	21 81       	ldd	r18, Z+1	; 0x01
 492:	62 2f       	mov	r22, r18
 494:	29 81       	ldd	r18, Y+1	; 0x01
 496:	42 2f       	mov	r20, r18
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <PORTD_set_pin_level+0x32>
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	4a 95       	dec	r20
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <PORTD_set_pin_level+0x2e>
 4a8:	26 2b       	or	r18, r22
 4aa:	fc 01       	movw	r30, r24
 4ac:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 4ae:	15 c0       	rjmp	.+42     	; 0x4da <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 4b0:	8c e0       	ldi	r24, 0x0C	; 12
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	2c e0       	ldi	r18, 0x0C	; 12
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	f9 01       	movw	r30, r18
 4ba:	21 81       	ldd	r18, Z+1	; 0x01
 4bc:	62 2f       	mov	r22, r18
 4be:	29 81       	ldd	r18, Y+1	; 0x01
 4c0:	42 2f       	mov	r20, r18
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	21 e0       	ldi	r18, 0x01	; 1
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <PORTD_set_pin_level+0x5c>
 4ca:	22 0f       	add	r18, r18
 4cc:	33 1f       	adc	r19, r19
 4ce:	4a 95       	dec	r20
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <PORTD_set_pin_level+0x58>
 4d2:	20 95       	com	r18
 4d4:	26 23       	and	r18, r22
 4d6:	fc 01       	movw	r30, r24
 4d8:	21 83       	std	Z+1, r18	; 0x01
	}
}
 4da:	00 00       	nop
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	1f 92       	push	r1
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
 4f2:	69 81       	ldd	r22, Y+1	; 0x01
 4f4:	83 e0       	ldi	r24, 0x03	; 3
 4f6:	0e 94 57 01 	call	0x2ae	; 0x2ae <PORTA_set_pin_dir>
}
 4fa:	00 00       	nop
 4fc:	0f 90       	pop	r0
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	1f 92       	push	r1
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
 50e:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 510:	69 81       	ldd	r22, Y+1	; 0x01
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	0e 94 ab 01 	call	0x356	; 0x356 <PORTA_set_pin_level>
}
 518:	00 00       	nop
 51a:	0f 90       	pop	r0
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	1f 92       	push	r1
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
 52e:	69 81       	ldd	r22, Y+1	; 0x01
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	0e 94 e5 01 	call	0x3ca	; 0x3ca <PORTD_set_pin_dir>
}
 536:	00 00       	nop
 538:	0f 90       	pop	r0
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	1f 92       	push	r1
 546:	cd b7       	in	r28, 0x3d	; 61
 548:	de b7       	in	r29, 0x3e	; 62
 54a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 54c:	69 81       	ldd	r22, Y+1	; 0x01
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 39 02 	call	0x472	; 0x472 <PORTD_set_pin_level>
}
 554:	00 00       	nop
 556:	0f 90       	pop	r0
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	1f 92       	push	r1
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
 56a:	69 81       	ldd	r22, Y+1	; 0x01
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <PORTD_set_pin_dir>
}
 572:	00 00       	nop
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	1f 92       	push	r1
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 588:	69 81       	ldd	r22, Y+1	; 0x01
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 39 02 	call	0x472	; 0x472 <PORTD_set_pin_level>
}
 590:	00 00       	nop
 592:	0f 90       	pop	r0
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	1f 92       	push	r1
 5a0:	cd b7       	in	r28, 0x3d	; 61
 5a2:	de b7       	in	r29, 0x3e	; 62
 5a4:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
 5a6:	69 81       	ldd	r22, Y+1	; 0x01
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <PORTD_set_pin_dir>
}
 5ae:	00 00       	nop
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	1f 92       	push	r1
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 5c4:	69 81       	ldd	r22, Y+1	; 0x01
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	0e 94 39 02 	call	0x472	; 0x472 <PORTD_set_pin_level>
}
 5cc:	00 00       	nop
 5ce:	0f 90       	pop	r0
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	26 97       	sbiw	r28, 0x06	; 6
 5e0:	cd bf       	out	0x3d, r28	; 61
 5e2:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 5e4:	19 82       	std	Y+1, r1	; 0x01
 5e6:	12 c0       	rjmp	.+36     	; 0x60c <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 5e8:	89 81       	ldd	r24, Y+1	; 0x01
 5ea:	88 2f       	mov	r24, r24
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	80 5f       	subi	r24, 0xF0	; 240
 5f0:	9b 4f       	sbci	r25, 0xFB	; 251
 5f2:	29 81       	ldd	r18, Y+1	; 0x01
 5f4:	22 2f       	mov	r18, r18
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	20 5f       	subi	r18, 0xF0	; 240
 5fa:	3b 4f       	sbci	r19, 0xFB	; 251
 5fc:	f9 01       	movw	r30, r18
 5fe:	20 81       	ld	r18, Z
 600:	28 60       	ori	r18, 0x08	; 8
 602:	fc 01       	movw	r30, r24
 604:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	89 83       	std	Y+1, r24	; 0x01
 60c:	89 81       	ldd	r24, Y+1	; 0x01
 60e:	88 30       	cpi	r24, 0x08	; 8
 610:	58 f3       	brcs	.-42     	; 0x5e8 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 612:	1a 82       	std	Y+2, r1	; 0x02
 614:	12 c0       	rjmp	.+36     	; 0x63a <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	88 2f       	mov	r24, r24
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	80 5d       	subi	r24, 0xD0	; 208
 61e:	9b 4f       	sbci	r25, 0xFB	; 251
 620:	2a 81       	ldd	r18, Y+2	; 0x02
 622:	22 2f       	mov	r18, r18
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	20 5d       	subi	r18, 0xD0	; 208
 628:	3b 4f       	sbci	r19, 0xFB	; 251
 62a:	f9 01       	movw	r30, r18
 62c:	20 81       	ld	r18, Z
 62e:	28 60       	ori	r18, 0x08	; 8
 630:	fc 01       	movw	r30, r24
 632:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 634:	8a 81       	ldd	r24, Y+2	; 0x02
 636:	8f 5f       	subi	r24, 0xFF	; 255
 638:	8a 83       	std	Y+2, r24	; 0x02
 63a:	8a 81       	ldd	r24, Y+2	; 0x02
 63c:	88 30       	cpi	r24, 0x08	; 8
 63e:	58 f3       	brcs	.-42     	; 0x616 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 640:	1b 82       	std	Y+3, r1	; 0x03
 642:	12 c0       	rjmp	.+36     	; 0x668 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	88 2f       	mov	r24, r24
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	80 5b       	subi	r24, 0xB0	; 176
 64c:	9b 4f       	sbci	r25, 0xFB	; 251
 64e:	2b 81       	ldd	r18, Y+3	; 0x03
 650:	22 2f       	mov	r18, r18
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	20 5b       	subi	r18, 0xB0	; 176
 656:	3b 4f       	sbci	r19, 0xFB	; 251
 658:	f9 01       	movw	r30, r18
 65a:	20 81       	ld	r18, Z
 65c:	28 60       	ori	r18, 0x08	; 8
 65e:	fc 01       	movw	r30, r24
 660:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	8b 83       	std	Y+3, r24	; 0x03
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	88 30       	cpi	r24, 0x08	; 8
 66c:	58 f3       	brcs	.-42     	; 0x644 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 66e:	1c 82       	std	Y+4, r1	; 0x04
 670:	12 c0       	rjmp	.+36     	; 0x696 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 672:	8c 81       	ldd	r24, Y+4	; 0x04
 674:	88 2f       	mov	r24, r24
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	80 59       	subi	r24, 0x90	; 144
 67a:	9b 4f       	sbci	r25, 0xFB	; 251
 67c:	2c 81       	ldd	r18, Y+4	; 0x04
 67e:	22 2f       	mov	r18, r18
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	20 59       	subi	r18, 0x90	; 144
 684:	3b 4f       	sbci	r19, 0xFB	; 251
 686:	f9 01       	movw	r30, r18
 688:	20 81       	ld	r18, Z
 68a:	28 60       	ori	r18, 0x08	; 8
 68c:	fc 01       	movw	r30, r24
 68e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 690:	8c 81       	ldd	r24, Y+4	; 0x04
 692:	8f 5f       	subi	r24, 0xFF	; 255
 694:	8c 83       	std	Y+4, r24	; 0x04
 696:	8c 81       	ldd	r24, Y+4	; 0x04
 698:	88 30       	cpi	r24, 0x08	; 8
 69a:	58 f3       	brcs	.-42     	; 0x672 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 69c:	1d 82       	std	Y+5, r1	; 0x05
 69e:	12 c0       	rjmp	.+36     	; 0x6c4 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 6a0:	8d 81       	ldd	r24, Y+5	; 0x05
 6a2:	88 2f       	mov	r24, r24
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	80 57       	subi	r24, 0x70	; 112
 6a8:	9b 4f       	sbci	r25, 0xFB	; 251
 6aa:	2d 81       	ldd	r18, Y+5	; 0x05
 6ac:	22 2f       	mov	r18, r18
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	20 57       	subi	r18, 0x70	; 112
 6b2:	3b 4f       	sbci	r19, 0xFB	; 251
 6b4:	f9 01       	movw	r30, r18
 6b6:	20 81       	ld	r18, Z
 6b8:	28 60       	ori	r18, 0x08	; 8
 6ba:	fc 01       	movw	r30, r24
 6bc:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 6be:	8d 81       	ldd	r24, Y+5	; 0x05
 6c0:	8f 5f       	subi	r24, 0xFF	; 255
 6c2:	8d 83       	std	Y+5, r24	; 0x05
 6c4:	8d 81       	ldd	r24, Y+5	; 0x05
 6c6:	88 30       	cpi	r24, 0x08	; 8
 6c8:	58 f3       	brcs	.-42     	; 0x6a0 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 6ca:	1e 82       	std	Y+6, r1	; 0x06
 6cc:	12 c0       	rjmp	.+36     	; 0x6f2 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 6ce:	8e 81       	ldd	r24, Y+6	; 0x06
 6d0:	88 2f       	mov	r24, r24
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	80 55       	subi	r24, 0x50	; 80
 6d6:	9b 4f       	sbci	r25, 0xFB	; 251
 6d8:	2e 81       	ldd	r18, Y+6	; 0x06
 6da:	22 2f       	mov	r18, r18
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	20 55       	subi	r18, 0x50	; 80
 6e0:	3b 4f       	sbci	r19, 0xFB	; 251
 6e2:	f9 01       	movw	r30, r18
 6e4:	20 81       	ld	r18, Z
 6e6:	28 60       	ori	r18, 0x08	; 8
 6e8:	fc 01       	movw	r30, r24
 6ea:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 6ec:	8e 81       	ldd	r24, Y+6	; 0x06
 6ee:	8f 5f       	subi	r24, 0xFF	; 255
 6f0:	8e 83       	std	Y+6, r24	; 0x06
 6f2:	8e 81       	ldd	r24, Y+6	; 0x06
 6f4:	88 30       	cpi	r24, 0x08	; 8
 6f6:	58 f3       	brcs	.-42     	; 0x6ce <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 6f8:	00 00       	nop
 6fa:	26 96       	adiw	r28, 0x06	; 6
 6fc:	cd bf       	out	0x3d, r28	; 61
 6fe:	de bf       	out	0x3e, r29	; 62
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	08 95       	ret

00000706 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 70e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	0e 94 82 02 	call	0x504	; 0x504 <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	0e 94 a0 02 	call	0x540	; 0x540 <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	0e 94 91 02 	call	0x522	; 0x522 <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	0e 94 be 02 	call	0x57c	; 0x57c <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	0e 94 af 02 	call	0x55e	; 0x55e <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	0e 94 cd 02 	call	0x59a	; 0x59a <B0_MCU_set_dir>

	CLKCTRL_init();
 742:	0e 94 47 01 	call	0x28e	; 0x28e <CLKCTRL_init>

	CPUINT_init();
 746:	0e 94 4f 01 	call	0x29e	; 0x29e <CPUINT_init>

	SLPCTRL_init();
 74a:	0e 94 ad 03 	call	0x75a	; 0x75a <SLPCTRL_init>

	BOD_init();
 74e:	0e 94 3f 01 	call	0x27e	; 0x27e <BOD_init>
}
 752:	00 00       	nop
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	08 95       	ret

0000075a <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 762:	80 e0       	ldi	r24, 0x00	; 0
}
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	08 95       	ret

0000076a <_exit>:
 76a:	f8 94       	cli

0000076c <__stop_program>:
 76c:	ff cf       	rjmp	.-2      	; 0x76c <__stop_program>
