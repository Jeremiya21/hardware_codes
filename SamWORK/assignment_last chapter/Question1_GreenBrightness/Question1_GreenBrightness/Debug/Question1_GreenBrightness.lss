
Question1_GreenBrightness.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  000002b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036b6  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027d7  00000000  00000000  00003ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b13  00000000  00000000  0000629d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00006db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001782  00000000  00000000  00006f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000021f  00000000  00000000  000086a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000088c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 5d 00 	call	0xba	; 0xba <main>
  a0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 cc 00 	call	0x198	; 0x198 <system_init>
  ac:	08 95       	ret

000000ae <LedBrightness>:
 */ 
#include "LedBrightness.h"

void  LedBrightness(uint8_t duty_cycle)
{
	TCB0.CCMPL=255;
  ae:	e0 e8       	ldi	r30, 0x80	; 128
  b0:	fa e0       	ldi	r31, 0x0A	; 10
  b2:	9f ef       	ldi	r25, 0xFF	; 255
  b4:	94 87       	std	Z+12, r25	; 0x0c
	TCB0.CCMPH=duty_cycle;
  b6:	85 87       	std	Z+13, r24	; 0x0d
  b8:	08 95       	ret

000000ba <main>:
#include "LedBrightness.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  ba:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) 
	{
		LedBrightness(50);
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	0e 94 57 00 	call	0xae	; 0xae <LedBrightness>
  c4:	fc cf       	rjmp	.-8      	; 0xbe <main+0x4>

000000c6 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	08 95       	ret

000000ca <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	68 ed       	ldi	r22, 0xD8	; 216
  ce:	81 e6       	ldi	r24, 0x61	; 97
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <protected_write_io>
  d6:	40 e8       	ldi	r20, 0x80	; 128
  d8:	68 ed       	ldi	r22, 0xD8	; 216
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <protected_write_io>
	                 | 1 << CLKCTRL_CLKOUT_bp /* System clock out: enabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret

000000e6 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret

000000ea <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 c0       	rjmp	.+16     	; 0xfe <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  ee:	e8 2f       	mov	r30, r24
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	e0 5f       	subi	r30, 0xF0	; 240
  f4:	fb 4f       	sbci	r31, 0xFB	; 251
  f6:	90 81       	ld	r25, Z
  f8:	98 60       	ori	r25, 0x08	; 8
  fa:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	88 30       	cpi	r24, 0x08	; 8
 100:	b0 f3       	brcs	.-20     	; 0xee <mcu_init+0x4>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	08 c0       	rjmp	.+16     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	e0 5d       	subi	r30, 0xD0	; 208
 10c:	fb 4f       	sbci	r31, 0xFB	; 251
 10e:	90 81       	ld	r25, Z
 110:	98 60       	ori	r25, 0x08	; 8
 112:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 114:	8f 5f       	subi	r24, 0xFF	; 255
 116:	88 30       	cpi	r24, 0x08	; 8
 118:	b0 f3       	brcs	.-20     	; 0x106 <__EEPROM_REGION_LENGTH__+0x6>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	08 c0       	rjmp	.+16     	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 11e:	e8 2f       	mov	r30, r24
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	e0 5b       	subi	r30, 0xB0	; 176
 124:	fb 4f       	sbci	r31, 0xFB	; 251
 126:	90 81       	ld	r25, Z
 128:	98 60       	ori	r25, 0x08	; 8
 12a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 12c:	8f 5f       	subi	r24, 0xFF	; 255
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	b0 f3       	brcs	.-20     	; 0x11e <__EEPROM_REGION_LENGTH__+0x1e>
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	08 c0       	rjmp	.+16     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	e0 59       	subi	r30, 0x90	; 144
 13c:	fb 4f       	sbci	r31, 0xFB	; 251
 13e:	90 81       	ld	r25, Z
 140:	98 60       	ori	r25, 0x08	; 8
 142:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	88 30       	cpi	r24, 0x08	; 8
 148:	b0 f3       	brcs	.-20     	; 0x136 <__EEPROM_REGION_LENGTH__+0x36>
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	08 c0       	rjmp	.+16     	; 0x15e <__EEPROM_REGION_LENGTH__+0x5e>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 14e:	e8 2f       	mov	r30, r24
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	e0 57       	subi	r30, 0x70	; 112
 154:	fb 4f       	sbci	r31, 0xFB	; 251
 156:	90 81       	ld	r25, Z
 158:	98 60       	ori	r25, 0x08	; 8
 15a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	88 30       	cpi	r24, 0x08	; 8
 160:	b0 f3       	brcs	.-20     	; 0x14e <__EEPROM_REGION_LENGTH__+0x4e>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 c0       	rjmp	.+16     	; 0x176 <__EEPROM_REGION_LENGTH__+0x76>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 166:	e8 2f       	mov	r30, r24
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	e0 55       	subi	r30, 0x50	; 80
 16c:	fb 4f       	sbci	r31, 0xFB	; 251
 16e:	90 81       	ld	r25, Z
 170:	98 60       	ori	r25, 0x08	; 8
 172:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	b0 f3       	brcs	.-20     	; 0x166 <__EEPROM_REGION_LENGTH__+0x66>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 17a:	08 95       	ret

0000017c <TIMER_TCB_GREEN_initialization>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
 17c:	85 b3       	in	r24, 0x15	; 21
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 182:	84 b3       	in	r24, 0x14	; 20
 184:	80 61       	ori	r24, 0x10	; 16
 186:	84 bb       	out	0x14, r24	; 20

	G3_MCU_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCBROUTEA |= PORTMUX_TCB0_bm;
 188:	e0 ee       	ldi	r30, 0xE0	; 224
 18a:	f5 e0       	ldi	r31, 0x05	; 5
 18c:	85 81       	ldd	r24, Z+5	; 0x05
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	85 83       	std	Z+5, r24	; 0x05

	TIMER_TCB_GREEN_init();
 192:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <TIMER_TCB_GREEN_init>
 196:	08 95       	ret

00000198 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 198:	0e 94 75 00 	call	0xea	; 0xea <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 19c:	81 b1       	in	r24, 0x01	; 1
 19e:	8f 7b       	andi	r24, 0xBF	; 191
 1a0:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 1a2:	80 b1       	in	r24, 0x00	; 0
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	80 b9       	out	0x00, r24	; 0
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	87 7f       	andi	r24, 0xF7	; 247
 1ac:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 1ae:	84 b3       	in	r24, 0x14	; 20
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	84 bb       	out	0x14, r24	; 20
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 1ba:	84 b3       	in	r24, 0x14	; 20
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	B3_MCU_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 1c0:	0e 94 65 00 	call	0xca	; 0xca <CLKCTRL_init>

	TIMER_TCB_GREEN_initialization();
 1c4:	0e 94 be 00 	call	0x17c	; 0x17c <TIMER_TCB_GREEN_initialization>

	CPUINT_init();
 1c8:	0e 94 73 00 	call	0xe6	; 0xe6 <CPUINT_init>

	SLPCTRL_init();
 1cc:	0e 94 ef 00 	call	0x1de	; 0x1de <SLPCTRL_init>

	BOD_init();
 1d0:	0e 94 63 00 	call	0xc6	; 0xc6 <BOD_init>
 1d4:	08 95       	ret

000001d6 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1d6:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1d8:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1da:	40 83       	st	Z, r20
	ret                             // Return to caller
 1dc:	08 95       	ret

000001de <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	08 95       	ret

000001e2 <TIMER_TCB_GREEN_init>:

	// TCB0.CCMP = 0x0; /* Compare or Capture: 0x0 */

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 1e2:	87 e1       	ldi	r24, 0x17	; 23
 1e4:	80 93 81 0a 	sts	0x0A81, r24	; 0x800a81 <__TEXT_REGION_LENGTH__+0x7f4a81>
	//		 | 0 << TCB_ENABLE_bp /* Enable: disabled */
	//		 | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	//		 | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
}
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
