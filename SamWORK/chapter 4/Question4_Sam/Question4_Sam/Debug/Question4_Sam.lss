
Question4_Sam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000436  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002c10  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000258d  00000000  00000000  0000324c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e5  00000000  00000000  000057d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000061c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000133b  00000000  00000000  00006460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000424  00000000  00000000  0000779b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00007bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a0:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <main>:

#include "ret_LogicLevel.h"
int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  c6:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */

	
	bool a;
	a=ret_LogicLevel();
  ca:	0e 94 99 00 	call	0x132	; 0x132 <ret_LogicLevel>
  ce:	89 83       	std	Y+1, r24	; 0x01
	
	return 0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
	
}
  d4:	0f 90       	pop	r0
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <PORTA_get_pin_level>:
 * \brief Get level on pin
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
	return VPORTA.IN & (1 << pin);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	fc 01       	movw	r30, r24
  ee:	82 81       	ldd	r24, Z+2	; 0x02
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	48 2f       	mov	r20, r24
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <__EEPROM_REGION_LENGTH__+0x4>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	4a 95       	dec	r20
 106:	e2 f7       	brpl	.-8      	; 0x100 <__EEPROM_REGION_LENGTH__>
 108:	82 23       	and	r24, r18
 10a:	93 23       	and	r25, r19
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	89 2b       	or	r24, r25
 110:	09 f4       	brne	.+2      	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	82 2f       	mov	r24, r18
}
 116:	0f 90       	pop	r0
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <PA1_get_level>:
 * \brief Get level on PA1
 *
 * Reads the level on a pin
 */
static inline bool PA1_get_level()
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	return PORTA_get_pin_level(1);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <PORTA_get_pin_level>
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <ret_LogicLevel>:
 */ 
#include <atmel_start.h>
#include "ret_LogicLevel.h"

bool ret_LogicLevel()
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	1f 92       	push	r1
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
	bool a=PA1_get_level();
 13c:	0e 94 8f 00 	call	0x11e	; 0x11e <PA1_get_level>
 140:	89 83       	std	Y+1, r24	; 0x01
	return a;
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	0f 90       	pop	r0
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 154:	80 e0       	ldi	r24, 0x00	; 0
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 164:	80 e0       	ldi	r24, 0x00	; 0
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 174:	80 e0       	ldi	r24, 0x00	; 0
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <PORTA_set_pin_pull_mode+0x6>
 182:	00 d0       	rcall	.+0      	; 0x184 <PORTA_set_pin_pull_mode+0x8>
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	8b 83       	std	Y+3, r24	; 0x03
 18a:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	80 5f       	subi	r24, 0xF0	; 240
 194:	9b 4f       	sbci	r25, 0xFB	; 251
 196:	89 83       	std	Y+1, r24	; 0x01
 198:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
 19a:	8c 81       	ldd	r24, Y+4	; 0x04
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	59 f4       	brne	.+22     	; 0x1b6 <PORTA_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	9a 81       	ldd	r25, Y+2	; 0x02
 1a4:	fc 01       	movw	r30, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	28 2f       	mov	r18, r24
 1aa:	28 60       	ori	r18, 0x08	; 8
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <PORTA_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	88 23       	and	r24, r24
 1ba:	51 f4       	brne	.+20     	; 0x1d0 <PORTA_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	fc 01       	movw	r30, r24
 1c2:	80 81       	ld	r24, Z
 1c4:	28 2f       	mov	r18, r24
 1c6:	27 7f       	andi	r18, 0xF7	; 247
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
	}
}
 1d0:	00 00       	nop
 1d2:	24 96       	adiw	r28, 0x04	; 4
 1d4:	cd bf       	out	0x3d, r28	; 61
 1d6:	de bf       	out	0x3e, r29	; 62
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <PORTA_set_pin_dir+0x6>
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 1ec:	8a 81       	ldd	r24, Y+2	; 0x02
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	91 05       	cpc	r25, r1
 1f6:	e1 f0       	breq	.+56     	; 0x230 <PORTA_set_pin_dir+0x52>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	91 05       	cpc	r25, r1
 1fc:	71 f1       	breq	.+92     	; 0x25a <PORTA_set_pin_dir+0x7c>
 1fe:	89 2b       	or	r24, r25
 200:	09 f0       	breq	.+2      	; 0x204 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 202:	3b c0       	rjmp	.+118    	; 0x27a <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	fc 01       	movw	r30, r24
 20e:	80 81       	ld	r24, Z
 210:	68 2f       	mov	r22, r24
 212:	89 81       	ldd	r24, Y+1	; 0x01
 214:	48 2f       	mov	r20, r24
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <PORTA_set_pin_dir+0x44>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	4a 95       	dec	r20
 224:	e2 f7       	brpl	.-8      	; 0x21e <PORTA_set_pin_dir+0x40>
 226:	80 95       	com	r24
 228:	86 23       	and	r24, r22
 22a:	f9 01       	movw	r30, r18
 22c:	80 83       	st	Z, r24
		break;
 22e:	25 c0       	rjmp	.+74     	; 0x27a <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	80 81       	ld	r24, Z
 23c:	68 2f       	mov	r22, r24
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	48 2f       	mov	r20, r24
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <PORTA_set_pin_dir+0x70>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	4a 95       	dec	r20
 250:	e2 f7       	brpl	.-8      	; 0x24a <PORTA_set_pin_dir+0x6c>
 252:	86 2b       	or	r24, r22
 254:	f9 01       	movw	r30, r18
 256:	80 83       	st	Z, r24
		break;
 258:	10 c0       	rjmp	.+32     	; 0x27a <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	88 2f       	mov	r24, r24
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	80 5f       	subi	r24, 0xF0	; 240
 262:	9b 4f       	sbci	r25, 0xFB	; 251
 264:	29 81       	ldd	r18, Y+1	; 0x01
 266:	22 2f       	mov	r18, r18
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	20 5f       	subi	r18, 0xF0	; 240
 26c:	3b 4f       	sbci	r19, 0xFB	; 251
 26e:	f9 01       	movw	r30, r18
 270:	20 81       	ld	r18, Z
 272:	28 60       	ori	r18, 0x08	; 8
 274:	fc 01       	movw	r30, r24
 276:	20 83       	st	Z, r18
		break;
 278:	00 00       	nop
	default:
		break;
	}
}
 27a:	00 00       	nop
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <PA1_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PA1_set_pull_mode(const enum port_pull_mode pull_mode)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	1f 92       	push	r1
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(1, pull_mode);
 292:	69 81       	ldd	r22, Y+1	; 0x01
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 be 00 	call	0x17c	; 0x17c <PORTA_set_pin_pull_mode>
}
 29a:	00 00       	nop
 29c:	0f 90       	pop	r0
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <PA1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PA1_set_dir(const enum port_dir dir)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	1f 92       	push	r1
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(1, dir);
 2b0:	69 81       	ldd	r22, Y+1	; 0x01
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 ef 00 	call	0x1de	; 0x1de <PORTA_set_pin_dir>
}
 2b8:	00 00       	nop
 2ba:	0f 90       	pop	r0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	08 95       	ret

000002c2 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	26 97       	sbiw	r28, 0x06	; 6
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 2d0:	19 82       	std	Y+1, r1	; 0x01
 2d2:	12 c0       	rjmp	.+36     	; 0x2f8 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	88 2f       	mov	r24, r24
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	80 5f       	subi	r24, 0xF0	; 240
 2dc:	9b 4f       	sbci	r25, 0xFB	; 251
 2de:	29 81       	ldd	r18, Y+1	; 0x01
 2e0:	22 2f       	mov	r18, r18
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	20 5f       	subi	r18, 0xF0	; 240
 2e6:	3b 4f       	sbci	r19, 0xFB	; 251
 2e8:	f9 01       	movw	r30, r18
 2ea:	20 81       	ld	r18, Z
 2ec:	28 60       	ori	r18, 0x08	; 8
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	89 83       	std	Y+1, r24	; 0x01
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	88 30       	cpi	r24, 0x08	; 8
 2fc:	58 f3       	brcs	.-42     	; 0x2d4 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2fe:	1a 82       	std	Y+2, r1	; 0x02
 300:	12 c0       	rjmp	.+36     	; 0x326 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	88 2f       	mov	r24, r24
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	80 5d       	subi	r24, 0xD0	; 208
 30a:	9b 4f       	sbci	r25, 0xFB	; 251
 30c:	2a 81       	ldd	r18, Y+2	; 0x02
 30e:	22 2f       	mov	r18, r18
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	20 5d       	subi	r18, 0xD0	; 208
 314:	3b 4f       	sbci	r19, 0xFB	; 251
 316:	f9 01       	movw	r30, r18
 318:	20 81       	ld	r18, Z
 31a:	28 60       	ori	r18, 0x08	; 8
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	8a 83       	std	Y+2, r24	; 0x02
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	88 30       	cpi	r24, 0x08	; 8
 32a:	58 f3       	brcs	.-42     	; 0x302 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 32c:	1b 82       	std	Y+3, r1	; 0x03
 32e:	12 c0       	rjmp	.+36     	; 0x354 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	88 2f       	mov	r24, r24
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	80 5b       	subi	r24, 0xB0	; 176
 338:	9b 4f       	sbci	r25, 0xFB	; 251
 33a:	2b 81       	ldd	r18, Y+3	; 0x03
 33c:	22 2f       	mov	r18, r18
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	20 5b       	subi	r18, 0xB0	; 176
 342:	3b 4f       	sbci	r19, 0xFB	; 251
 344:	f9 01       	movw	r30, r18
 346:	20 81       	ld	r18, Z
 348:	28 60       	ori	r18, 0x08	; 8
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 34e:	8b 81       	ldd	r24, Y+3	; 0x03
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	8b 83       	std	Y+3, r24	; 0x03
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	88 30       	cpi	r24, 0x08	; 8
 358:	58 f3       	brcs	.-42     	; 0x330 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 35a:	1c 82       	std	Y+4, r1	; 0x04
 35c:	12 c0       	rjmp	.+36     	; 0x382 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 35e:	8c 81       	ldd	r24, Y+4	; 0x04
 360:	88 2f       	mov	r24, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	80 59       	subi	r24, 0x90	; 144
 366:	9b 4f       	sbci	r25, 0xFB	; 251
 368:	2c 81       	ldd	r18, Y+4	; 0x04
 36a:	22 2f       	mov	r18, r18
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	20 59       	subi	r18, 0x90	; 144
 370:	3b 4f       	sbci	r19, 0xFB	; 251
 372:	f9 01       	movw	r30, r18
 374:	20 81       	ld	r18, Z
 376:	28 60       	ori	r18, 0x08	; 8
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 37c:	8c 81       	ldd	r24, Y+4	; 0x04
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	8c 83       	std	Y+4, r24	; 0x04
 382:	8c 81       	ldd	r24, Y+4	; 0x04
 384:	88 30       	cpi	r24, 0x08	; 8
 386:	58 f3       	brcs	.-42     	; 0x35e <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 388:	1d 82       	std	Y+5, r1	; 0x05
 38a:	12 c0       	rjmp	.+36     	; 0x3b0 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 38c:	8d 81       	ldd	r24, Y+5	; 0x05
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	80 57       	subi	r24, 0x70	; 112
 394:	9b 4f       	sbci	r25, 0xFB	; 251
 396:	2d 81       	ldd	r18, Y+5	; 0x05
 398:	22 2f       	mov	r18, r18
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	20 57       	subi	r18, 0x70	; 112
 39e:	3b 4f       	sbci	r19, 0xFB	; 251
 3a0:	f9 01       	movw	r30, r18
 3a2:	20 81       	ld	r18, Z
 3a4:	28 60       	ori	r18, 0x08	; 8
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3aa:	8d 81       	ldd	r24, Y+5	; 0x05
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	8d 83       	std	Y+5, r24	; 0x05
 3b0:	8d 81       	ldd	r24, Y+5	; 0x05
 3b2:	88 30       	cpi	r24, 0x08	; 8
 3b4:	58 f3       	brcs	.-42     	; 0x38c <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3b6:	1e 82       	std	Y+6, r1	; 0x06
 3b8:	12 c0       	rjmp	.+36     	; 0x3de <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 3ba:	8e 81       	ldd	r24, Y+6	; 0x06
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	80 55       	subi	r24, 0x50	; 80
 3c2:	9b 4f       	sbci	r25, 0xFB	; 251
 3c4:	2e 81       	ldd	r18, Y+6	; 0x06
 3c6:	22 2f       	mov	r18, r18
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	20 55       	subi	r18, 0x50	; 80
 3cc:	3b 4f       	sbci	r19, 0xFB	; 251
 3ce:	f9 01       	movw	r30, r18
 3d0:	20 81       	ld	r18, Z
 3d2:	28 60       	ori	r18, 0x08	; 8
 3d4:	fc 01       	movw	r30, r24
 3d6:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3d8:	8e 81       	ldd	r24, Y+6	; 0x06
 3da:	8f 5f       	subi	r24, 0xFF	; 255
 3dc:	8e 83       	std	Y+6, r24	; 0x06
 3de:	8e 81       	ldd	r24, Y+6	; 0x06
 3e0:	88 30       	cpi	r24, 0x08	; 8
 3e2:	58 f3       	brcs	.-42     	; 0x3ba <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 3e4:	00 00       	nop
 3e6:	26 96       	adiw	r28, 0x06	; 6
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 3fa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <mcu_init>

	/* PORT setting on PA1 */

	// Set pin direction to input
	PA1_set_dir(PORT_DIR_IN);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 52 01 	call	0x2a4	; 0x2a4 <PA1_set_dir>

	PA1_set_pull_mode(
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 43 01 	call	0x286	; 0x286 <PA1_set_pull_mode>
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_UP);

	CLKCTRL_init();
 40a:	0e 94 ae 00 	call	0x15c	; 0x15c <CLKCTRL_init>

	CPUINT_init();
 40e:	0e 94 b6 00 	call	0x16c	; 0x16c <CPUINT_init>

	SLPCTRL_init();
 412:	0e 94 11 02 	call	0x422	; 0x422 <SLPCTRL_init>

	BOD_init();
 416:	0e 94 a6 00 	call	0x14c	; 0x14c <BOD_init>
}
 41a:	00 00       	nop
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 422:	cf 93       	push	r28
 424:	df 93       	push	r29
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 42a:	80 e0       	ldi	r24, 0x00	; 0
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
