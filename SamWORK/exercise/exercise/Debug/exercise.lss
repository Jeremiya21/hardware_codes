
exercise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00001168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000035fa  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002a2f  00000000  00000000  000049d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000129a  00000000  00000000  00007401  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004bc  00000000  00000000  0000869c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001465  00000000  00000000  00008b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000083d  00000000  00000000  00009fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  0000a7fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
      a0:	0c 94 88 08 	jmp	0x1110	; 0x1110 <_exit>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
      b0:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <system_init>
}
      b4:	00 00       	nop
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	08 95       	ret

000000bc <functionCall>:
#include <stdbool.h>
#include <stdint.h>
#include "colorSelect.h"

void functionCall(uint32_t *delay_R,uint32_t *delay_B,uint32_t *delay_G)
{
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	26 97       	sbiw	r28, 0x06	; 6
      c6:	cd bf       	out	0x3d, r28	; 61
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	89 83       	std	Y+1, r24	; 0x01
      cc:	9a 83       	std	Y+2, r25	; 0x02
      ce:	6b 83       	std	Y+3, r22	; 0x03
      d0:	7c 83       	std	Y+4, r23	; 0x04
      d2:	4d 83       	std	Y+5, r20	; 0x05
      d4:	5e 83       	std	Y+6, r21	; 0x06
	while(true)
	{
	ToggleRed(delay_R);
      d6:	89 81       	ldd	r24, Y+1	; 0x01
      d8:	9a 81       	ldd	r25, Y+2	; 0x02
      da:	0e 94 b4 05 	call	0xb68	; 0xb68 <ToggleRed>
	ToggleGreen(delay_G);
      de:	8d 81       	ldd	r24, Y+5	; 0x05
      e0:	9e 81       	ldd	r25, Y+6	; 0x06
      e2:	0e 94 80 04 	call	0x900	; 0x900 <ToggleGreen>
	ToggleBlue(delay_B);
      e6:	8b 81       	ldd	r24, Y+3	; 0x03
      e8:	9c 81       	ldd	r25, Y+4	; 0x04
      ea:	0e 94 4c 03 	call	0x698	; 0x698 <ToggleBlue>
	}
      ee:	f3 cf       	rjmp	.-26     	; 0xd6 <functionCall+0x1a>

000000f0 <main>:
#include <stdbool.h>
#include <stdint.h>
#include "functionCall.h"

int main(void)
{
      f0:	cf 93       	push	r28
      f2:	df 93       	push	r29
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	2c 97       	sbiw	r28, 0x0c	; 12
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      fe:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	
	uint32_t delay_R,delay_G,delay_B;
	delay_B=100;
     102:	84 e6       	ldi	r24, 0x64	; 100
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	89 87       	std	Y+9, r24	; 0x09
     10c:	9a 87       	std	Y+10, r25	; 0x0a
     10e:	ab 87       	std	Y+11, r26	; 0x0b
     110:	bc 87       	std	Y+12, r27	; 0x0c
	delay_G=150;
     112:	86 e9       	ldi	r24, 0x96	; 150
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	8d 83       	std	Y+5, r24	; 0x05
     11c:	9e 83       	std	Y+6, r25	; 0x06
     11e:	af 83       	std	Y+7, r26	; 0x07
     120:	b8 87       	std	Y+8, r27	; 0x08
	delay_R=200;
     122:	88 ec       	ldi	r24, 0xC8	; 200
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	ab 83       	std	Y+3, r26	; 0x03
     130:	bc 83       	std	Y+4, r27	; 0x04
	
	/* Replace with your application code */
	functionCall(&delay_R,&delay_G,&delay_B);
     132:	9e 01       	movw	r18, r28
     134:	27 5f       	subi	r18, 0xF7	; 247
     136:	3f 4f       	sbci	r19, 0xFF	; 255
     138:	ce 01       	movw	r24, r28
     13a:	05 96       	adiw	r24, 0x05	; 5
     13c:	a9 01       	movw	r20, r18
     13e:	bc 01       	movw	r22, r24
     140:	ce 01       	movw	r24, r28
     142:	01 96       	adiw	r24, 0x01	; 1
     144:	0e 94 5e 00 	call	0xbc	; 0xbc <functionCall>
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
}
     14c:	2c 96       	adiw	r28, 0x0c	; 12
     14e:	cd bf       	out	0x3d, r28	; 61
     150:	de bf       	out	0x3e, r29	; 62
     152:	df 91       	pop	r29
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     160:	80 e0       	ldi	r24, 0x00	; 0
}
     162:	df 91       	pop	r29
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     170:	80 e0       	ldi	r24, 0x00	; 0
}
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     180:	80 e0       	ldi	r24, 0x00	; 0
}
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	08 95       	ret

00000188 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	00 d0       	rcall	.+0      	; 0x18e <PORTA_set_pin_dir+0x6>
     18e:	cd b7       	in	r28, 0x3d	; 61
     190:	de b7       	in	r29, 0x3e	; 62
     192:	89 83       	std	Y+1, r24	; 0x01
     194:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	81 30       	cpi	r24, 0x01	; 1
     19e:	91 05       	cpc	r25, r1
     1a0:	e1 f0       	breq	.+56     	; 0x1da <PORTA_set_pin_dir+0x52>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	91 05       	cpc	r25, r1
     1a6:	71 f1       	breq	.+92     	; 0x204 <PORTA_set_pin_dir+0x7c>
     1a8:	89 2b       	or	r24, r25
     1aa:	09 f0       	breq	.+2      	; 0x1ae <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     1ac:	3b c0       	rjmp	.+118    	; 0x224 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	fc 01       	movw	r30, r24
     1b8:	80 81       	ld	r24, Z
     1ba:	68 2f       	mov	r22, r24
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	48 2f       	mov	r20, r24
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <PORTA_set_pin_dir+0x44>
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	4a 95       	dec	r20
     1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <PORTA_set_pin_dir+0x40>
     1d0:	80 95       	com	r24
     1d2:	86 23       	and	r24, r22
     1d4:	f9 01       	movw	r30, r18
     1d6:	80 83       	st	Z, r24
		break;
     1d8:	25 c0       	rjmp	.+74     	; 0x224 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	fc 01       	movw	r30, r24
     1e4:	80 81       	ld	r24, Z
     1e6:	68 2f       	mov	r22, r24
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	48 2f       	mov	r20, r24
     1ec:	50 e0       	ldi	r21, 0x00	; 0
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <PORTA_set_pin_dir+0x70>
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	4a 95       	dec	r20
     1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <PORTA_set_pin_dir+0x6c>
     1fc:	86 2b       	or	r24, r22
     1fe:	f9 01       	movw	r30, r18
     200:	80 83       	st	Z, r24
		break;
     202:	10 c0       	rjmp	.+32     	; 0x224 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	80 5f       	subi	r24, 0xF0	; 240
     20c:	9b 4f       	sbci	r25, 0xFB	; 251
     20e:	29 81       	ldd	r18, Y+1	; 0x01
     210:	22 2f       	mov	r18, r18
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	20 5f       	subi	r18, 0xF0	; 240
     216:	3b 4f       	sbci	r19, 0xFB	; 251
     218:	f9 01       	movw	r30, r18
     21a:	20 81       	ld	r18, Z
     21c:	28 60       	ori	r18, 0x08	; 8
     21e:	fc 01       	movw	r30, r24
     220:	20 83       	st	Z, r18
		break;
     222:	00 00       	nop
	default:
		break;
	}
}
     224:	00 00       	nop
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	00 d0       	rcall	.+0      	; 0x236 <PORTA_set_pin_level+0x6>
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	89 83       	std	Y+1, r24	; 0x01
     23c:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	88 23       	and	r24, r24
     242:	a9 f0       	breq	.+42     	; 0x26e <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	fc 01       	movw	r30, r24
     24e:	81 81       	ldd	r24, Z+1	; 0x01
     250:	68 2f       	mov	r22, r24
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	48 2f       	mov	r20, r24
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	02 c0       	rjmp	.+4      	; 0x262 <PORTA_set_pin_level+0x32>
     25e:	88 0f       	add	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	4a 95       	dec	r20
     264:	e2 f7       	brpl	.-8      	; 0x25e <PORTA_set_pin_level+0x2e>
     266:	86 2b       	or	r24, r22
     268:	f9 01       	movw	r30, r18
     26a:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
     26c:	15 c0       	rjmp	.+42     	; 0x298 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	81 81       	ldd	r24, Z+1	; 0x01
     27a:	68 2f       	mov	r22, r24
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	48 2f       	mov	r20, r24
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <PORTA_set_pin_level+0x5c>
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	4a 95       	dec	r20
     28e:	e2 f7       	brpl	.-8      	; 0x288 <PORTA_set_pin_level+0x58>
     290:	80 95       	com	r24
     292:	86 23       	and	r24, r22
     294:	f9 01       	movw	r30, r18
     296:	81 83       	std	Z+1, r24	; 0x01
	}
}
     298:	00 00       	nop
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	00 d0       	rcall	.+0      	; 0x2aa <PORTD_set_pin_dir+0x6>
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	89 83       	std	Y+1, r24	; 0x01
     2b0:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	81 30       	cpi	r24, 0x01	; 1
     2ba:	91 05       	cpc	r25, r1
     2bc:	e1 f0       	breq	.+56     	; 0x2f6 <PORTD_set_pin_dir+0x52>
     2be:	82 30       	cpi	r24, 0x02	; 2
     2c0:	91 05       	cpc	r25, r1
     2c2:	71 f1       	breq	.+92     	; 0x320 <PORTD_set_pin_dir+0x7c>
     2c4:	89 2b       	or	r24, r25
     2c6:	09 f0       	breq	.+2      	; 0x2ca <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     2c8:	3b c0       	rjmp	.+118    	; 0x340 <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
     2ca:	8c e0       	ldi	r24, 0x0C	; 12
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	2c e0       	ldi	r18, 0x0C	; 12
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	f9 01       	movw	r30, r18
     2d4:	20 81       	ld	r18, Z
     2d6:	62 2f       	mov	r22, r18
     2d8:	29 81       	ldd	r18, Y+1	; 0x01
     2da:	42 2f       	mov	r20, r18
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	21 e0       	ldi	r18, 0x01	; 1
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <PORTD_set_pin_dir+0x44>
     2e4:	22 0f       	add	r18, r18
     2e6:	33 1f       	adc	r19, r19
     2e8:	4a 95       	dec	r20
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <PORTD_set_pin_dir+0x40>
     2ec:	20 95       	com	r18
     2ee:	26 23       	and	r18, r22
     2f0:	fc 01       	movw	r30, r24
     2f2:	20 83       	st	Z, r18
		break;
     2f4:	25 c0       	rjmp	.+74     	; 0x340 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     2f6:	8c e0       	ldi	r24, 0x0C	; 12
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	2c e0       	ldi	r18, 0x0C	; 12
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	f9 01       	movw	r30, r18
     300:	20 81       	ld	r18, Z
     302:	62 2f       	mov	r22, r18
     304:	29 81       	ldd	r18, Y+1	; 0x01
     306:	42 2f       	mov	r20, r18
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	21 e0       	ldi	r18, 0x01	; 1
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	02 c0       	rjmp	.+4      	; 0x314 <PORTD_set_pin_dir+0x70>
     310:	22 0f       	add	r18, r18
     312:	33 1f       	adc	r19, r19
     314:	4a 95       	dec	r20
     316:	e2 f7       	brpl	.-8      	; 0x310 <PORTD_set_pin_dir+0x6c>
     318:	26 2b       	or	r18, r22
     31a:	fc 01       	movw	r30, r24
     31c:	20 83       	st	Z, r18
		break;
     31e:	10 c0       	rjmp	.+32     	; 0x340 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	88 2f       	mov	r24, r24
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	80 59       	subi	r24, 0x90	; 144
     328:	9b 4f       	sbci	r25, 0xFB	; 251
     32a:	29 81       	ldd	r18, Y+1	; 0x01
     32c:	22 2f       	mov	r18, r18
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	20 59       	subi	r18, 0x90	; 144
     332:	3b 4f       	sbci	r19, 0xFB	; 251
     334:	f9 01       	movw	r30, r18
     336:	20 81       	ld	r18, Z
     338:	28 60       	ori	r18, 0x08	; 8
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
		break;
     33e:	00 00       	nop
	default:
		break;
	}
}
     340:	00 00       	nop
     342:	0f 90       	pop	r0
     344:	0f 90       	pop	r0
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <PORTD_set_pin_level+0x6>
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	89 83       	std	Y+1, r24	; 0x01
     358:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     35a:	8a 81       	ldd	r24, Y+2	; 0x02
     35c:	88 23       	and	r24, r24
     35e:	a9 f0       	breq	.+42     	; 0x38a <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
     360:	8c e0       	ldi	r24, 0x0C	; 12
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	2c e0       	ldi	r18, 0x0C	; 12
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	f9 01       	movw	r30, r18
     36a:	21 81       	ldd	r18, Z+1	; 0x01
     36c:	62 2f       	mov	r22, r18
     36e:	29 81       	ldd	r18, Y+1	; 0x01
     370:	42 2f       	mov	r20, r18
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	21 e0       	ldi	r18, 0x01	; 1
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	02 c0       	rjmp	.+4      	; 0x37e <PORTD_set_pin_level+0x32>
     37a:	22 0f       	add	r18, r18
     37c:	33 1f       	adc	r19, r19
     37e:	4a 95       	dec	r20
     380:	e2 f7       	brpl	.-8      	; 0x37a <PORTD_set_pin_level+0x2e>
     382:	26 2b       	or	r18, r22
     384:	fc 01       	movw	r30, r24
     386:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
     388:	15 c0       	rjmp	.+42     	; 0x3b4 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     38a:	8c e0       	ldi	r24, 0x0C	; 12
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	2c e0       	ldi	r18, 0x0C	; 12
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	f9 01       	movw	r30, r18
     394:	21 81       	ldd	r18, Z+1	; 0x01
     396:	62 2f       	mov	r22, r18
     398:	29 81       	ldd	r18, Y+1	; 0x01
     39a:	42 2f       	mov	r20, r18
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <PORTD_set_pin_level+0x5c>
     3a4:	22 0f       	add	r18, r18
     3a6:	33 1f       	adc	r19, r19
     3a8:	4a 95       	dec	r20
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <PORTD_set_pin_level+0x58>
     3ac:	20 95       	com	r18
     3ae:	26 23       	and	r18, r22
     3b0:	fc 01       	movw	r30, r24
     3b2:	21 83       	std	Z+1, r18	; 0x01
	}
}
     3b4:	00 00       	nop
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	1f 92       	push	r1
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
     3cc:	69 81       	ldd	r22, Y+1	; 0x01
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	0e 94 c4 00 	call	0x188	; 0x188 <PORTA_set_pin_dir>
}
     3d4:	00 00       	nop
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	1f 92       	push	r1
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
     3ea:	69 81       	ldd	r22, Y+1	; 0x01
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	0e 94 18 01 	call	0x230	; 0x230 <PORTA_set_pin_level>
}
     3f2:	00 00       	nop
     3f4:	0f 90       	pop	r0
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	1f 92       	push	r1
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
     408:	69 81       	ldd	r22, Y+1	; 0x01
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <PORTD_set_pin_dir>
}
     410:	00 00       	nop
     412:	0f 90       	pop	r0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	1f 92       	push	r1
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     426:	69 81       	ldd	r22, Y+1	; 0x01
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 a6 01 	call	0x34c	; 0x34c <PORTD_set_pin_level>
}
     42e:	00 00       	nop
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
     444:	69 81       	ldd	r22, Y+1	; 0x01
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 52 01 	call	0x2a4	; 0x2a4 <PORTD_set_pin_dir>
}
     44c:	00 00       	nop
     44e:	0f 90       	pop	r0
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	1f 92       	push	r1
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     462:	69 81       	ldd	r22, Y+1	; 0x01
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 a6 01 	call	0x34c	; 0x34c <PORTD_set_pin_level>
}
     46a:	00 00       	nop
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	1f 92       	push	r1
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
     480:	69 81       	ldd	r22, Y+1	; 0x01
     482:	82 e0       	ldi	r24, 0x02	; 2
     484:	0e 94 52 01 	call	0x2a4	; 0x2a4 <PORTD_set_pin_dir>
}
     488:	00 00       	nop
     48a:	0f 90       	pop	r0
     48c:	df 91       	pop	r29
     48e:	cf 91       	pop	r28
     490:	08 95       	ret

00000492 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	1f 92       	push	r1
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     49e:	69 81       	ldd	r22, Y+1	; 0x01
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 a6 01 	call	0x34c	; 0x34c <PORTD_set_pin_level>
}
     4a6:	00 00       	nop
     4a8:	0f 90       	pop	r0
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	26 97       	sbiw	r28, 0x06	; 6
     4ba:	cd bf       	out	0x3d, r28	; 61
     4bc:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     4be:	19 82       	std	Y+1, r1	; 0x01
     4c0:	12 c0       	rjmp	.+36     	; 0x4e6 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	88 2f       	mov	r24, r24
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	80 5f       	subi	r24, 0xF0	; 240
     4ca:	9b 4f       	sbci	r25, 0xFB	; 251
     4cc:	29 81       	ldd	r18, Y+1	; 0x01
     4ce:	22 2f       	mov	r18, r18
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	20 5f       	subi	r18, 0xF0	; 240
     4d4:	3b 4f       	sbci	r19, 0xFB	; 251
     4d6:	f9 01       	movw	r30, r18
     4d8:	20 81       	ld	r18, Z
     4da:	28 60       	ori	r18, 0x08	; 8
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     4e0:	89 81       	ldd	r24, Y+1	; 0x01
     4e2:	8f 5f       	subi	r24, 0xFF	; 255
     4e4:	89 83       	std	Y+1, r24	; 0x01
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	88 30       	cpi	r24, 0x08	; 8
     4ea:	58 f3       	brcs	.-42     	; 0x4c2 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4ec:	1a 82       	std	Y+2, r1	; 0x02
     4ee:	12 c0       	rjmp	.+36     	; 0x514 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	88 2f       	mov	r24, r24
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	80 5d       	subi	r24, 0xD0	; 208
     4f8:	9b 4f       	sbci	r25, 0xFB	; 251
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	22 2f       	mov	r18, r18
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	20 5d       	subi	r18, 0xD0	; 208
     502:	3b 4f       	sbci	r19, 0xFB	; 251
     504:	f9 01       	movw	r30, r18
     506:	20 81       	ld	r18, Z
     508:	28 60       	ori	r18, 0x08	; 8
     50a:	fc 01       	movw	r30, r24
     50c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	8a 83       	std	Y+2, r24	; 0x02
     514:	8a 81       	ldd	r24, Y+2	; 0x02
     516:	88 30       	cpi	r24, 0x08	; 8
     518:	58 f3       	brcs	.-42     	; 0x4f0 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     51a:	1b 82       	std	Y+3, r1	; 0x03
     51c:	12 c0       	rjmp	.+36     	; 0x542 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	80 5b       	subi	r24, 0xB0	; 176
     526:	9b 4f       	sbci	r25, 0xFB	; 251
     528:	2b 81       	ldd	r18, Y+3	; 0x03
     52a:	22 2f       	mov	r18, r18
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	20 5b       	subi	r18, 0xB0	; 176
     530:	3b 4f       	sbci	r19, 0xFB	; 251
     532:	f9 01       	movw	r30, r18
     534:	20 81       	ld	r18, Z
     536:	28 60       	ori	r18, 0x08	; 8
     538:	fc 01       	movw	r30, r24
     53a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	8f 5f       	subi	r24, 0xFF	; 255
     540:	8b 83       	std	Y+3, r24	; 0x03
     542:	8b 81       	ldd	r24, Y+3	; 0x03
     544:	88 30       	cpi	r24, 0x08	; 8
     546:	58 f3       	brcs	.-42     	; 0x51e <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     548:	1c 82       	std	Y+4, r1	; 0x04
     54a:	12 c0       	rjmp	.+36     	; 0x570 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     54c:	8c 81       	ldd	r24, Y+4	; 0x04
     54e:	88 2f       	mov	r24, r24
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	80 59       	subi	r24, 0x90	; 144
     554:	9b 4f       	sbci	r25, 0xFB	; 251
     556:	2c 81       	ldd	r18, Y+4	; 0x04
     558:	22 2f       	mov	r18, r18
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	20 59       	subi	r18, 0x90	; 144
     55e:	3b 4f       	sbci	r19, 0xFB	; 251
     560:	f9 01       	movw	r30, r18
     562:	20 81       	ld	r18, Z
     564:	28 60       	ori	r18, 0x08	; 8
     566:	fc 01       	movw	r30, r24
     568:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     56a:	8c 81       	ldd	r24, Y+4	; 0x04
     56c:	8f 5f       	subi	r24, 0xFF	; 255
     56e:	8c 83       	std	Y+4, r24	; 0x04
     570:	8c 81       	ldd	r24, Y+4	; 0x04
     572:	88 30       	cpi	r24, 0x08	; 8
     574:	58 f3       	brcs	.-42     	; 0x54c <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     576:	1d 82       	std	Y+5, r1	; 0x05
     578:	12 c0       	rjmp	.+36     	; 0x59e <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     57a:	8d 81       	ldd	r24, Y+5	; 0x05
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	80 57       	subi	r24, 0x70	; 112
     582:	9b 4f       	sbci	r25, 0xFB	; 251
     584:	2d 81       	ldd	r18, Y+5	; 0x05
     586:	22 2f       	mov	r18, r18
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	20 57       	subi	r18, 0x70	; 112
     58c:	3b 4f       	sbci	r19, 0xFB	; 251
     58e:	f9 01       	movw	r30, r18
     590:	20 81       	ld	r18, Z
     592:	28 60       	ori	r18, 0x08	; 8
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     598:	8d 81       	ldd	r24, Y+5	; 0x05
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	8d 83       	std	Y+5, r24	; 0x05
     59e:	8d 81       	ldd	r24, Y+5	; 0x05
     5a0:	88 30       	cpi	r24, 0x08	; 8
     5a2:	58 f3       	brcs	.-42     	; 0x57a <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     5a4:	1e 82       	std	Y+6, r1	; 0x06
     5a6:	12 c0       	rjmp	.+36     	; 0x5cc <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     5a8:	8e 81       	ldd	r24, Y+6	; 0x06
     5aa:	88 2f       	mov	r24, r24
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	80 55       	subi	r24, 0x50	; 80
     5b0:	9b 4f       	sbci	r25, 0xFB	; 251
     5b2:	2e 81       	ldd	r18, Y+6	; 0x06
     5b4:	22 2f       	mov	r18, r18
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	20 55       	subi	r18, 0x50	; 80
     5ba:	3b 4f       	sbci	r19, 0xFB	; 251
     5bc:	f9 01       	movw	r30, r18
     5be:	20 81       	ld	r18, Z
     5c0:	28 60       	ori	r18, 0x08	; 8
     5c2:	fc 01       	movw	r30, r24
     5c4:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     5c6:	8e 81       	ldd	r24, Y+6	; 0x06
     5c8:	8f 5f       	subi	r24, 0xFF	; 255
     5ca:	8e 83       	std	Y+6, r24	; 0x06
     5cc:	8e 81       	ldd	r24, Y+6	; 0x06
     5ce:	88 30       	cpi	r24, 0x08	; 8
     5d0:	58 f3       	brcs	.-42     	; 0x5a8 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     5d2:	00 00       	nop
     5d4:	26 96       	adiw	r28, 0x06	; 6
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	08 95       	ret

000005e0 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
     5e8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 ef 01 	call	0x3de	; 0x3de <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0e 94 0d 02 	call	0x41a	; 0x41a <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0e 94 fe 01 	call	0x3fc	; 0x3fc <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 2b 02 	call	0x456	; 0x456 <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 1c 02 	call	0x438	; 0x438 <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	0e 94 49 02 	call	0x492	; 0x492 <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	0e 94 3a 02 	call	0x474	; 0x474 <B0_MCU_set_dir>

	CLKCTRL_init();
     61c:	0e 94 b4 00 	call	0x168	; 0x168 <CLKCTRL_init>

	CPUINT_init();
     620:	0e 94 bc 00 	call	0x178	; 0x178 <CPUINT_init>

	SLPCTRL_init();
     624:	0e 94 1a 03 	call	0x634	; 0x634 <SLPCTRL_init>

	BOD_init();
     628:	0e 94 ac 00 	call	0x158	; 0x158 <BOD_init>
}
     62c:	00 00       	nop
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
     63c:	80 e0       	ldi	r24, 0x00	; 0
}
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <PORTD_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	1f 92       	push	r1
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
     64e:	89 83       	std	Y+1, r24	; 0x01
	VPORTD.IN |= 1 << pin;
     650:	8c e0       	ldi	r24, 0x0C	; 12
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	2c e0       	ldi	r18, 0x0C	; 12
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	f9 01       	movw	r30, r18
     65a:	22 81       	ldd	r18, Z+2	; 0x02
     65c:	62 2f       	mov	r22, r18
     65e:	29 81       	ldd	r18, Y+1	; 0x01
     660:	42 2f       	mov	r20, r18
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	02 c0       	rjmp	.+4      	; 0x66e <PORTD_toggle_pin_level+0x2a>
     66a:	22 0f       	add	r18, r18
     66c:	33 1f       	adc	r19, r19
     66e:	4a 95       	dec	r20
     670:	e2 f7       	brpl	.-8      	; 0x66a <PORTD_toggle_pin_level+0x26>
     672:	26 2b       	or	r18, r22
     674:	fc 01       	movw	r30, r24
     676:	22 83       	std	Z+2, r18	; 0x02
}
     678:	00 00       	nop
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <B0_MCU_toggle_level>:
 * \brief Toggle output level on B0_MCU
 *
 * Toggle the pin level
 */
static inline void B0_MCU_toggle_level()
{
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(2);
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	0e 94 22 03 	call	0x644	; 0x644 <PORTD_toggle_pin_level>
}
     690:	00 00       	nop
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <ToggleBlue>:
#include <atmel_start.h>
#include <stdint.h>
#include <util/delay.h>

void ToggleBlue(uint32_t *delay_B)
{
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	a2 97       	sbiw	r28, 0x22	; 34
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	89 a3       	std	Y+33, r24	; 0x21
     6a8:	9a a3       	std	Y+34, r25	; 0x22
		B0_MCU_toggle_level();
     6aa:	0e 94 41 03 	call	0x682	; 0x682 <B0_MCU_toggle_level>
		_delay_us(*delay_B);
     6ae:	89 a1       	ldd	r24, Y+33	; 0x21
     6b0:	9a a1       	ldd	r25, Y+34	; 0x22
     6b2:	fc 01       	movw	r30, r24
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	a2 81       	ldd	r26, Z+2	; 0x02
     6ba:	b3 81       	ldd	r27, Z+3	; 0x03
     6bc:	bc 01       	movw	r22, r24
     6be:	cd 01       	movw	r24, r26
     6c0:	0e 94 64 07 	call	0xec8	; 0xec8 <__floatunsisf>
     6c4:	dc 01       	movw	r26, r24
     6c6:	cb 01       	movw	r24, r22
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	9a 83       	std	Y+2, r25	; 0x02
     6cc:	ab 83       	std	Y+3, r26	; 0x03
     6ce:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     6d0:	23 ee       	ldi	r18, 0xE3	; 227
     6d2:	38 e3       	ldi	r19, 0x38	; 56
     6d4:	4e e8       	ldi	r20, 0x8E	; 142
     6d6:	5f e3       	ldi	r21, 0x3F	; 63
     6d8:	69 81       	ldd	r22, Y+1	; 0x01
     6da:	7a 81       	ldd	r23, Y+2	; 0x02
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	9c 81       	ldd	r25, Y+4	; 0x04
     6e0:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	8d 83       	std	Y+5, r24	; 0x05
     6ea:	9e 83       	std	Y+6, r25	; 0x06
     6ec:	af 83       	std	Y+7, r26	; 0x07
     6ee:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     6f0:	24 e5       	ldi	r18, 0x54	; 84
     6f2:	35 e5       	ldi	r19, 0x55	; 85
     6f4:	45 e5       	ldi	r20, 0x55	; 85
     6f6:	5f e3       	ldi	r21, 0x3F	; 63
     6f8:	69 81       	ldd	r22, Y+1	; 0x01
     6fa:	7a 81       	ldd	r23, Y+2	; 0x02
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	9c 81       	ldd	r25, Y+4	; 0x04
     700:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	89 87       	std	Y+9, r24	; 0x09
     70a:	9a 87       	std	Y+10, r25	; 0x0a
     70c:	ab 87       	std	Y+11, r26	; 0x0b
     70e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e8       	ldi	r20, 0x80	; 128
     716:	5f e3       	ldi	r21, 0x3F	; 63
     718:	6d 81       	ldd	r22, Y+5	; 0x05
     71a:	7e 81       	ldd	r23, Y+6	; 0x06
     71c:	8f 81       	ldd	r24, Y+7	; 0x07
     71e:	98 85       	ldd	r25, Y+8	; 0x08
     720:	0e 94 be 06 	call	0xd7c	; 0xd7c <__cmpsf2>
     724:	88 23       	and	r24, r24
     726:	1c f4       	brge	.+6      	; 0x72e <ToggleBlue+0x96>
		__ticks = 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	8d 87       	std	Y+13, r24	; 0x0d
     72c:	b2 c0       	rjmp	.+356    	; 0x892 <ToggleBlue+0x1fa>
	else if (__tmp2 > 65535)
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	3f ef       	ldi	r19, 0xFF	; 255
     732:	4f e7       	ldi	r20, 0x7F	; 127
     734:	57 e4       	ldi	r21, 0x47	; 71
     736:	69 85       	ldd	r22, Y+9	; 0x09
     738:	7a 85       	ldd	r23, Y+10	; 0x0a
     73a:	8b 85       	ldd	r24, Y+11	; 0x0b
     73c:	9c 85       	ldd	r25, Y+12	; 0x0c
     73e:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     742:	18 16       	cp	r1, r24
     744:	0c f0       	brlt	.+2      	; 0x748 <ToggleBlue+0xb0>
     746:	7b c0       	rjmp	.+246    	; 0x83e <ToggleBlue+0x1a6>
	{
		_delay_ms(__us / 1000.0);
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	4a e7       	ldi	r20, 0x7A	; 122
     74e:	54 e4       	ldi	r21, 0x44	; 68
     750:	69 81       	ldd	r22, Y+1	; 0x01
     752:	7a 81       	ldd	r23, Y+2	; 0x02
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9c 81       	ldd	r25, Y+4	; 0x04
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__divsf3>
     75c:	dc 01       	movw	r26, r24
     75e:	cb 01       	movw	r24, r22
     760:	8e 87       	std	Y+14, r24	; 0x0e
     762:	9f 87       	std	Y+15, r25	; 0x0f
     764:	a8 8b       	std	Y+16, r26	; 0x10
     766:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     768:	24 e5       	ldi	r18, 0x54	; 84
     76a:	35 e5       	ldi	r19, 0x55	; 85
     76c:	40 e5       	ldi	r20, 0x50	; 80
     76e:	54 e4       	ldi	r21, 0x44	; 68
     770:	6e 85       	ldd	r22, Y+14	; 0x0e
     772:	7f 85       	ldd	r23, Y+15	; 0x0f
     774:	88 89       	ldd	r24, Y+16	; 0x10
     776:	99 89       	ldd	r25, Y+17	; 0x11
     778:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     77c:	dc 01       	movw	r26, r24
     77e:	cb 01       	movw	r24, r22
     780:	8a 8b       	std	Y+18, r24	; 0x12
     782:	9b 8b       	std	Y+19, r25	; 0x13
     784:	ac 8b       	std	Y+20, r26	; 0x14
     786:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e8       	ldi	r20, 0x80	; 128
     78e:	5f e3       	ldi	r21, 0x3F	; 63
     790:	6a 89       	ldd	r22, Y+18	; 0x12
     792:	7b 89       	ldd	r23, Y+19	; 0x13
     794:	8c 89       	ldd	r24, Y+20	; 0x14
     796:	9d 89       	ldd	r25, Y+21	; 0x15
     798:	0e 94 be 06 	call	0xd7c	; 0xd7c <__cmpsf2>
     79c:	88 23       	and	r24, r24
     79e:	2c f4       	brge	.+10     	; 0x7aa <ToggleBlue+0x112>
		__ticks = 1;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	8e 8b       	std	Y+22, r24	; 0x16
     7a6:	9f 8b       	std	Y+23, r25	; 0x17
     7a8:	3f c0       	rjmp	.+126    	; 0x828 <ToggleBlue+0x190>
	else if (__tmp > 65535)
     7aa:	20 e0       	ldi	r18, 0x00	; 0
     7ac:	3f ef       	ldi	r19, 0xFF	; 255
     7ae:	4f e7       	ldi	r20, 0x7F	; 127
     7b0:	57 e4       	ldi	r21, 0x47	; 71
     7b2:	6a 89       	ldd	r22, Y+18	; 0x12
     7b4:	7b 89       	ldd	r23, Y+19	; 0x13
     7b6:	8c 89       	ldd	r24, Y+20	; 0x14
     7b8:	9d 89       	ldd	r25, Y+21	; 0x15
     7ba:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     7be:	18 16       	cp	r1, r24
     7c0:	4c f5       	brge	.+82     	; 0x814 <ToggleBlue+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e2       	ldi	r20, 0x20	; 32
     7c8:	51 e4       	ldi	r21, 0x41	; 65
     7ca:	6e 85       	ldd	r22, Y+14	; 0x0e
     7cc:	7f 85       	ldd	r23, Y+15	; 0x0f
     7ce:	88 89       	ldd	r24, Y+16	; 0x10
     7d0:	99 89       	ldd	r25, Y+17	; 0x11
     7d2:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     7d6:	dc 01       	movw	r26, r24
     7d8:	cb 01       	movw	r24, r22
     7da:	bc 01       	movw	r22, r24
     7dc:	cd 01       	movw	r24, r26
     7de:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     7e2:	dc 01       	movw	r26, r24
     7e4:	cb 01       	movw	r24, r22
     7e6:	8e 8b       	std	Y+22, r24	; 0x16
     7e8:	9f 8b       	std	Y+23, r25	; 0x17
     7ea:	0f c0       	rjmp	.+30     	; 0x80a <ToggleBlue+0x172>
     7ec:	83 e5       	ldi	r24, 0x53	; 83
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	88 8f       	std	Y+24, r24	; 0x18
     7f2:	99 8f       	std	Y+25, r25	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7f4:	88 8d       	ldd	r24, Y+24	; 0x18
     7f6:	99 8d       	ldd	r25, Y+25	; 0x19
     7f8:	01 97       	sbiw	r24, 0x01	; 1
     7fa:	f1 f7       	brne	.-4      	; 0x7f8 <ToggleBlue+0x160>
     7fc:	88 8f       	std	Y+24, r24	; 0x18
     7fe:	99 8f       	std	Y+25, r25	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     800:	8e 89       	ldd	r24, Y+22	; 0x16
     802:	9f 89       	ldd	r25, Y+23	; 0x17
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	8e 8b       	std	Y+22, r24	; 0x16
     808:	9f 8b       	std	Y+23, r25	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     80a:	8e 89       	ldd	r24, Y+22	; 0x16
     80c:	9f 89       	ldd	r25, Y+23	; 0x17
     80e:	89 2b       	or	r24, r25
     810:	69 f7       	brne	.-38     	; 0x7ec <ToggleBlue+0x154>
     812:	3f c0       	rjmp	.+126    	; 0x892 <ToggleBlue+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     814:	6a 89       	ldd	r22, Y+18	; 0x12
     816:	7b 89       	ldd	r23, Y+19	; 0x13
     818:	8c 89       	ldd	r24, Y+20	; 0x14
     81a:	9d 89       	ldd	r25, Y+21	; 0x15
     81c:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     820:	dc 01       	movw	r26, r24
     822:	cb 01       	movw	r24, r22
     824:	8e 8b       	std	Y+22, r24	; 0x16
     826:	9f 8b       	std	Y+23, r25	; 0x17
     828:	8e 89       	ldd	r24, Y+22	; 0x16
     82a:	9f 89       	ldd	r25, Y+23	; 0x17
     82c:	8a 8f       	std	Y+26, r24	; 0x1a
     82e:	9b 8f       	std	Y+27, r25	; 0x1b
     830:	8a 8d       	ldd	r24, Y+26	; 0x1a
     832:	9b 8d       	ldd	r25, Y+27	; 0x1b
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	f1 f7       	brne	.-4      	; 0x834 <ToggleBlue+0x19c>
     838:	8a 8f       	std	Y+26, r24	; 0x1a
     83a:	9b 8f       	std	Y+27, r25	; 0x1b
     83c:	2a c0       	rjmp	.+84     	; 0x892 <ToggleBlue+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	4f e7       	ldi	r20, 0x7F	; 127
     844:	53 e4       	ldi	r21, 0x43	; 67
     846:	6d 81       	ldd	r22, Y+5	; 0x05
     848:	7e 81       	ldd	r23, Y+6	; 0x06
     84a:	8f 81       	ldd	r24, Y+7	; 0x07
     84c:	98 85       	ldd	r25, Y+8	; 0x08
     84e:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     852:	18 16       	cp	r1, r24
     854:	ac f4       	brge	.+42     	; 0x880 <ToggleBlue+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     856:	69 85       	ldd	r22, Y+9	; 0x09
     858:	7a 85       	ldd	r23, Y+10	; 0x0a
     85a:	8b 85       	ldd	r24, Y+11	; 0x0b
     85c:	9c 85       	ldd	r25, Y+12	; 0x0c
     85e:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	8c 8f       	std	Y+28, r24	; 0x1c
     868:	9d 8f       	std	Y+29, r25	; 0x1d
     86a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     86c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     86e:	8e 8f       	std	Y+30, r24	; 0x1e
     870:	9f 8f       	std	Y+31, r25	; 0x1f
     872:	8e 8d       	ldd	r24, Y+30	; 0x1e
     874:	9f 8d       	ldd	r25, Y+31	; 0x1f
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <ToggleBlue+0x1de>
     87a:	8e 8f       	std	Y+30, r24	; 0x1e
     87c:	9f 8f       	std	Y+31, r25	; 0x1f
     87e:	0f c0       	rjmp	.+30     	; 0x89e <ToggleBlue+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     880:	6d 81       	ldd	r22, Y+5	; 0x05
     882:	7e 81       	ldd	r23, Y+6	; 0x06
     884:	8f 81       	ldd	r24, Y+7	; 0x07
     886:	98 85       	ldd	r25, Y+8	; 0x08
     888:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	8d 87       	std	Y+13, r24	; 0x0d
     892:	8d 85       	ldd	r24, Y+13	; 0x0d
     894:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     896:	88 a1       	ldd	r24, Y+32	; 0x20
     898:	8a 95       	dec	r24
     89a:	f1 f7       	brne	.-4      	; 0x898 <ToggleBlue+0x200>
     89c:	88 a3       	std	Y+32, r24	; 0x20
     89e:	00 00       	nop
     8a0:	a2 96       	adiw	r28, 0x22	; 34
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <PORTD_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	1f 92       	push	r1
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	89 83       	std	Y+1, r24	; 0x01
	VPORTD.IN |= 1 << pin;
     8b8:	8c e0       	ldi	r24, 0x0C	; 12
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	2c e0       	ldi	r18, 0x0C	; 12
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	f9 01       	movw	r30, r18
     8c2:	22 81       	ldd	r18, Z+2	; 0x02
     8c4:	62 2f       	mov	r22, r18
     8c6:	29 81       	ldd	r18, Y+1	; 0x01
     8c8:	42 2f       	mov	r20, r18
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <PORTD_toggle_pin_level+0x2a>
     8d2:	22 0f       	add	r18, r18
     8d4:	33 1f       	adc	r19, r19
     8d6:	4a 95       	dec	r20
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <PORTD_toggle_pin_level+0x26>
     8da:	26 2b       	or	r18, r22
     8dc:	fc 01       	movw	r30, r24
     8de:	22 83       	std	Z+2, r18	; 0x02
}
     8e0:	00 00       	nop
     8e2:	0f 90       	pop	r0
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <G0_MCU_toggle_level>:
 * \brief Toggle output level on G0_MCU
 *
 * Toggle the pin level
 */
static inline void G0_MCU_toggle_level()
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(1);
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	0e 94 56 04 	call	0x8ac	; 0x8ac <PORTD_toggle_pin_level>
}
     8f8:	00 00       	nop
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <ToggleGreen>:
#include <atmel_start.h>
#include <stdint.h>
#include <util/delay.h>

void ToggleGreen(uint32_t *delay_G)
{
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	a2 97       	sbiw	r28, 0x22	; 34
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	89 a3       	std	Y+33, r24	; 0x21
     910:	9a a3       	std	Y+34, r25	; 0x22
	
		G0_MCU_toggle_level();
     912:	0e 94 75 04 	call	0x8ea	; 0x8ea <G0_MCU_toggle_level>
		_delay_us(*delay_G);
     916:	89 a1       	ldd	r24, Y+33	; 0x21
     918:	9a a1       	ldd	r25, Y+34	; 0x22
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	a2 81       	ldd	r26, Z+2	; 0x02
     922:	b3 81       	ldd	r27, Z+3	; 0x03
     924:	bc 01       	movw	r22, r24
     926:	cd 01       	movw	r24, r26
     928:	0e 94 64 07 	call	0xec8	; 0xec8 <__floatunsisf>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	9a 83       	std	Y+2, r25	; 0x02
     934:	ab 83       	std	Y+3, r26	; 0x03
     936:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     938:	23 ee       	ldi	r18, 0xE3	; 227
     93a:	38 e3       	ldi	r19, 0x38	; 56
     93c:	4e e8       	ldi	r20, 0x8E	; 142
     93e:	5f e3       	ldi	r21, 0x3F	; 63
     940:	69 81       	ldd	r22, Y+1	; 0x01
     942:	7a 81       	ldd	r23, Y+2	; 0x02
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	9c 81       	ldd	r25, Y+4	; 0x04
     948:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     94c:	dc 01       	movw	r26, r24
     94e:	cb 01       	movw	r24, r22
     950:	8d 83       	std	Y+5, r24	; 0x05
     952:	9e 83       	std	Y+6, r25	; 0x06
     954:	af 83       	std	Y+7, r26	; 0x07
     956:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     958:	24 e5       	ldi	r18, 0x54	; 84
     95a:	35 e5       	ldi	r19, 0x55	; 85
     95c:	45 e5       	ldi	r20, 0x55	; 85
     95e:	5f e3       	ldi	r21, 0x3F	; 63
     960:	69 81       	ldd	r22, Y+1	; 0x01
     962:	7a 81       	ldd	r23, Y+2	; 0x02
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	9c 81       	ldd	r25, Y+4	; 0x04
     968:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     96c:	dc 01       	movw	r26, r24
     96e:	cb 01       	movw	r24, r22
     970:	89 87       	std	Y+9, r24	; 0x09
     972:	9a 87       	std	Y+10, r25	; 0x0a
     974:	ab 87       	std	Y+11, r26	; 0x0b
     976:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e8       	ldi	r20, 0x80	; 128
     97e:	5f e3       	ldi	r21, 0x3F	; 63
     980:	6d 81       	ldd	r22, Y+5	; 0x05
     982:	7e 81       	ldd	r23, Y+6	; 0x06
     984:	8f 81       	ldd	r24, Y+7	; 0x07
     986:	98 85       	ldd	r25, Y+8	; 0x08
     988:	0e 94 be 06 	call	0xd7c	; 0xd7c <__cmpsf2>
     98c:	88 23       	and	r24, r24
     98e:	1c f4       	brge	.+6      	; 0x996 <ToggleGreen+0x96>
		__ticks = 1;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	8d 87       	std	Y+13, r24	; 0x0d
     994:	b2 c0       	rjmp	.+356    	; 0xafa <ToggleGreen+0x1fa>
	else if (__tmp2 > 65535)
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	3f ef       	ldi	r19, 0xFF	; 255
     99a:	4f e7       	ldi	r20, 0x7F	; 127
     99c:	57 e4       	ldi	r21, 0x47	; 71
     99e:	69 85       	ldd	r22, Y+9	; 0x09
     9a0:	7a 85       	ldd	r23, Y+10	; 0x0a
     9a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     9a6:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     9aa:	18 16       	cp	r1, r24
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <ToggleGreen+0xb0>
     9ae:	7b c0       	rjmp	.+246    	; 0xaa6 <ToggleGreen+0x1a6>
	{
		_delay_ms(__us / 1000.0);
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	4a e7       	ldi	r20, 0x7A	; 122
     9b6:	54 e4       	ldi	r21, 0x44	; 68
     9b8:	69 81       	ldd	r22, Y+1	; 0x01
     9ba:	7a 81       	ldd	r23, Y+2	; 0x02
     9bc:	8b 81       	ldd	r24, Y+3	; 0x03
     9be:	9c 81       	ldd	r25, Y+4	; 0x04
     9c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__divsf3>
     9c4:	dc 01       	movw	r26, r24
     9c6:	cb 01       	movw	r24, r22
     9c8:	8e 87       	std	Y+14, r24	; 0x0e
     9ca:	9f 87       	std	Y+15, r25	; 0x0f
     9cc:	a8 8b       	std	Y+16, r26	; 0x10
     9ce:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9d0:	24 e5       	ldi	r18, 0x54	; 84
     9d2:	35 e5       	ldi	r19, 0x55	; 85
     9d4:	40 e5       	ldi	r20, 0x50	; 80
     9d6:	54 e4       	ldi	r21, 0x44	; 68
     9d8:	6e 85       	ldd	r22, Y+14	; 0x0e
     9da:	7f 85       	ldd	r23, Y+15	; 0x0f
     9dc:	88 89       	ldd	r24, Y+16	; 0x10
     9de:	99 89       	ldd	r25, Y+17	; 0x11
     9e0:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	8a 8b       	std	Y+18, r24	; 0x12
     9ea:	9b 8b       	std	Y+19, r25	; 0x13
     9ec:	ac 8b       	std	Y+20, r26	; 0x14
     9ee:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e8       	ldi	r20, 0x80	; 128
     9f6:	5f e3       	ldi	r21, 0x3F	; 63
     9f8:	6a 89       	ldd	r22, Y+18	; 0x12
     9fa:	7b 89       	ldd	r23, Y+19	; 0x13
     9fc:	8c 89       	ldd	r24, Y+20	; 0x14
     9fe:	9d 89       	ldd	r25, Y+21	; 0x15
     a00:	0e 94 be 06 	call	0xd7c	; 0xd7c <__cmpsf2>
     a04:	88 23       	and	r24, r24
     a06:	2c f4       	brge	.+10     	; 0xa12 <ToggleGreen+0x112>
		__ticks = 1;
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	8e 8b       	std	Y+22, r24	; 0x16
     a0e:	9f 8b       	std	Y+23, r25	; 0x17
     a10:	3f c0       	rjmp	.+126    	; 0xa90 <ToggleGreen+0x190>
	else if (__tmp > 65535)
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	3f ef       	ldi	r19, 0xFF	; 255
     a16:	4f e7       	ldi	r20, 0x7F	; 127
     a18:	57 e4       	ldi	r21, 0x47	; 71
     a1a:	6a 89       	ldd	r22, Y+18	; 0x12
     a1c:	7b 89       	ldd	r23, Y+19	; 0x13
     a1e:	8c 89       	ldd	r24, Y+20	; 0x14
     a20:	9d 89       	ldd	r25, Y+21	; 0x15
     a22:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     a26:	18 16       	cp	r1, r24
     a28:	4c f5       	brge	.+82     	; 0xa7c <ToggleGreen+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	40 e2       	ldi	r20, 0x20	; 32
     a30:	51 e4       	ldi	r21, 0x41	; 65
     a32:	6e 85       	ldd	r22, Y+14	; 0x0e
     a34:	7f 85       	ldd	r23, Y+15	; 0x0f
     a36:	88 89       	ldd	r24, Y+16	; 0x10
     a38:	99 89       	ldd	r25, Y+17	; 0x11
     a3a:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	8e 8b       	std	Y+22, r24	; 0x16
     a50:	9f 8b       	std	Y+23, r25	; 0x17
     a52:	0f c0       	rjmp	.+30     	; 0xa72 <ToggleGreen+0x172>
     a54:	83 e5       	ldi	r24, 0x53	; 83
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	88 8f       	std	Y+24, r24	; 0x18
     a5a:	99 8f       	std	Y+25, r25	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a5c:	88 8d       	ldd	r24, Y+24	; 0x18
     a5e:	99 8d       	ldd	r25, Y+25	; 0x19
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	f1 f7       	brne	.-4      	; 0xa60 <ToggleGreen+0x160>
     a64:	88 8f       	std	Y+24, r24	; 0x18
     a66:	99 8f       	std	Y+25, r25	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a68:	8e 89       	ldd	r24, Y+22	; 0x16
     a6a:	9f 89       	ldd	r25, Y+23	; 0x17
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	8e 8b       	std	Y+22, r24	; 0x16
     a70:	9f 8b       	std	Y+23, r25	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a72:	8e 89       	ldd	r24, Y+22	; 0x16
     a74:	9f 89       	ldd	r25, Y+23	; 0x17
     a76:	89 2b       	or	r24, r25
     a78:	69 f7       	brne	.-38     	; 0xa54 <ToggleGreen+0x154>
     a7a:	3f c0       	rjmp	.+126    	; 0xafa <ToggleGreen+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a7c:	6a 89       	ldd	r22, Y+18	; 0x12
     a7e:	7b 89       	ldd	r23, Y+19	; 0x13
     a80:	8c 89       	ldd	r24, Y+20	; 0x14
     a82:	9d 89       	ldd	r25, Y+21	; 0x15
     a84:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     a88:	dc 01       	movw	r26, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	8e 8b       	std	Y+22, r24	; 0x16
     a8e:	9f 8b       	std	Y+23, r25	; 0x17
     a90:	8e 89       	ldd	r24, Y+22	; 0x16
     a92:	9f 89       	ldd	r25, Y+23	; 0x17
     a94:	8a 8f       	std	Y+26, r24	; 0x1a
     a96:	9b 8f       	std	Y+27, r25	; 0x1b
     a98:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a9c:	01 97       	sbiw	r24, 0x01	; 1
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <ToggleGreen+0x19c>
     aa0:	8a 8f       	std	Y+26, r24	; 0x1a
     aa2:	9b 8f       	std	Y+27, r25	; 0x1b
     aa4:	2a c0       	rjmp	.+84     	; 0xafa <ToggleGreen+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	4f e7       	ldi	r20, 0x7F	; 127
     aac:	53 e4       	ldi	r21, 0x43	; 67
     aae:	6d 81       	ldd	r22, Y+5	; 0x05
     ab0:	7e 81       	ldd	r23, Y+6	; 0x06
     ab2:	8f 81       	ldd	r24, Y+7	; 0x07
     ab4:	98 85       	ldd	r25, Y+8	; 0x08
     ab6:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     aba:	18 16       	cp	r1, r24
     abc:	ac f4       	brge	.+42     	; 0xae8 <ToggleGreen+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     abe:	69 85       	ldd	r22, Y+9	; 0x09
     ac0:	7a 85       	ldd	r23, Y+10	; 0x0a
     ac2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ac4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ac6:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     aca:	dc 01       	movw	r26, r24
     acc:	cb 01       	movw	r24, r22
     ace:	8c 8f       	std	Y+28, r24	; 0x1c
     ad0:	9d 8f       	std	Y+29, r25	; 0x1d
     ad2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ad4:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ad6:	8e 8f       	std	Y+30, r24	; 0x1e
     ad8:	9f 8f       	std	Y+31, r25	; 0x1f
     ada:	8e 8d       	ldd	r24, Y+30	; 0x1e
     adc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <ToggleGreen+0x1de>
     ae2:	8e 8f       	std	Y+30, r24	; 0x1e
     ae4:	9f 8f       	std	Y+31, r25	; 0x1f

     ae6:	0f c0       	rjmp	.+30     	; 0xb06 <ToggleGreen+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ae8:	6d 81       	ldd	r22, Y+5	; 0x05
     aea:	7e 81       	ldd	r23, Y+6	; 0x06
     aec:	8f 81       	ldd	r24, Y+7	; 0x07
     aee:	98 85       	ldd	r25, Y+8	; 0x08
     af0:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	8d 87       	std	Y+13, r24	; 0x0d
     afa:	8d 85       	ldd	r24, Y+13	; 0x0d
     afc:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     afe:	88 a1       	ldd	r24, Y+32	; 0x20
     b00:	8a 95       	dec	r24
     b02:	f1 f7       	brne	.-4      	; 0xb00 <ToggleGreen+0x200>
     b04:	88 a3       	std	Y+32, r24	; 0x20
     b06:	00 00       	nop
     b08:	a2 96       	adiw	r28, 0x22	; 34
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <PORTD_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	1f 92       	push	r1
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	89 83       	std	Y+1, r24	; 0x01
	VPORTD.IN |= 1 << pin;
     b20:	8c e0       	ldi	r24, 0x0C	; 12
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	2c e0       	ldi	r18, 0x0C	; 12
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	f9 01       	movw	r30, r18
     b2a:	22 81       	ldd	r18, Z+2	; 0x02
     b2c:	62 2f       	mov	r22, r18
     b2e:	29 81       	ldd	r18, Y+1	; 0x01
     b30:	42 2f       	mov	r20, r18
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <PORTD_toggle_pin_level+0x2a>
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	4a 95       	dec	r20
     b40:	e2 f7       	brpl	.-8      	; 0xb3a <PORTD_toggle_pin_level+0x26>
     b42:	26 2b       	or	r18, r22
     b44:	fc 01       	movw	r30, r24
     b46:	22 83       	std	Z+2, r18	; 0x02
}
     b48:	00 00       	nop
     b4a:	0f 90       	pop	r0
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <R0_MCU_toggle_level>:
 * \brief Toggle output level on R0_MCU
 *
 * Toggle the pin level
 */
static inline void R0_MCU_toggle_level()
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(0);
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	0e 94 8a 05 	call	0xb14	; 0xb14 <PORTD_toggle_pin_level>
}
     b60:	00 00       	nop
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <ToggleRed>:
#include <atmel_start.h>
#include <stdint.h>
#include <util/delay.h>

void ToggleRed(uint32_t *delay_R)
{
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	a2 97       	sbiw	r28, 0x22	; 34
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	de bf       	out	0x3e, r29	; 62
     b76:	89 a3       	std	Y+33, r24	; 0x21
     b78:	9a a3       	std	Y+34, r25	; 0x22
	
		R0_MCU_toggle_level();
     b7a:	0e 94 a9 05 	call	0xb52	; 0xb52 <R0_MCU_toggle_level>
		_delay_us(*delay_R);
     b7e:	89 a1       	ldd	r24, Y+33	; 0x21
     b80:	9a a1       	ldd	r25, Y+34	; 0x22
     b82:	fc 01       	movw	r30, r24
     b84:	80 81       	ld	r24, Z
     b86:	91 81       	ldd	r25, Z+1	; 0x01
     b88:	a2 81       	ldd	r26, Z+2	; 0x02
     b8a:	b3 81       	ldd	r27, Z+3	; 0x03
     b8c:	bc 01       	movw	r22, r24
     b8e:	cd 01       	movw	r24, r26
     b90:	0e 94 64 07 	call	0xec8	; 0xec8 <__floatunsisf>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	89 83       	std	Y+1, r24	; 0x01
     b9a:	9a 83       	std	Y+2, r25	; 0x02
     b9c:	ab 83       	std	Y+3, r26	; 0x03
     b9e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     ba0:	23 ee       	ldi	r18, 0xE3	; 227
     ba2:	38 e3       	ldi	r19, 0x38	; 56
     ba4:	4e e8       	ldi	r20, 0x8E	; 142
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	69 81       	ldd	r22, Y+1	; 0x01
     baa:	7a 81       	ldd	r23, Y+2	; 0x02
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     bb4:	dc 01       	movw	r26, r24
     bb6:	cb 01       	movw	r24, r22
     bb8:	8d 83       	std	Y+5, r24	; 0x05
     bba:	9e 83       	std	Y+6, r25	; 0x06
     bbc:	af 83       	std	Y+7, r26	; 0x07
     bbe:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     bc0:	24 e5       	ldi	r18, 0x54	; 84
     bc2:	35 e5       	ldi	r19, 0x55	; 85
     bc4:	45 e5       	ldi	r20, 0x55	; 85
     bc6:	5f e3       	ldi	r21, 0x3F	; 63
     bc8:	69 81       	ldd	r22, Y+1	; 0x01
     bca:	7a 81       	ldd	r23, Y+2	; 0x02
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	89 87       	std	Y+9, r24	; 0x09
     bda:	9a 87       	std	Y+10, r25	; 0x0a
     bdc:	ab 87       	std	Y+11, r26	; 0x0b
     bde:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e8       	ldi	r20, 0x80	; 128
     be6:	5f e3       	ldi	r21, 0x3F	; 63
     be8:	6d 81       	ldd	r22, Y+5	; 0x05
     bea:	7e 81       	ldd	r23, Y+6	; 0x06
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	0e 94 be 06 	call	0xd7c	; 0xd7c <__cmpsf2>
     bf4:	88 23       	and	r24, r24
     bf6:	1c f4       	brge	.+6      	; 0xbfe <ToggleRed+0x96>
		__ticks = 1;
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	8d 87       	std	Y+13, r24	; 0x0d
     bfc:	b2 c0       	rjmp	.+356    	; 0xd62 <ToggleRed+0x1fa>
	else if (__tmp2 > 65535)
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	3f ef       	ldi	r19, 0xFF	; 255
     c02:	4f e7       	ldi	r20, 0x7F	; 127
     c04:	57 e4       	ldi	r21, 0x47	; 71
     c06:	69 85       	ldd	r22, Y+9	; 0x09
     c08:	7a 85       	ldd	r23, Y+10	; 0x0a
     c0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c0e:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     c12:	18 16       	cp	r1, r24
     c14:	0c f0       	brlt	.+2      	; 0xc18 <ToggleRed+0xb0>
     c16:	7b c0       	rjmp	.+246    	; 0xd0e <ToggleRed+0x1a6>
	{
		_delay_ms(__us / 1000.0);
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	4a e7       	ldi	r20, 0x7A	; 122
     c1e:	54 e4       	ldi	r21, 0x44	; 68
     c20:	69 81       	ldd	r22, Y+1	; 0x01
     c22:	7a 81       	ldd	r23, Y+2	; 0x02
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	0e 94 c3 06 	call	0xd86	; 0xd86 <__divsf3>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	8e 87       	std	Y+14, r24	; 0x0e
     c32:	9f 87       	std	Y+15, r25	; 0x0f
     c34:	a8 8b       	std	Y+16, r26	; 0x10
     c36:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c38:	24 e5       	ldi	r18, 0x54	; 84
     c3a:	35 e5       	ldi	r19, 0x55	; 85
     c3c:	40 e5       	ldi	r20, 0x50	; 80
     c3e:	54 e4       	ldi	r21, 0x44	; 68
     c40:	6e 85       	ldd	r22, Y+14	; 0x0e
     c42:	7f 85       	ldd	r23, Y+15	; 0x0f
     c44:	88 89       	ldd	r24, Y+16	; 0x10
     c46:	99 89       	ldd	r25, Y+17	; 0x11
     c48:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	8a 8b       	std	Y+18, r24	; 0x12
     c52:	9b 8b       	std	Y+19, r25	; 0x13
     c54:	ac 8b       	std	Y+20, r26	; 0x14
     c56:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e8       	ldi	r20, 0x80	; 128
     c5e:	5f e3       	ldi	r21, 0x3F	; 63
     c60:	6a 89       	ldd	r22, Y+18	; 0x12
     c62:	7b 89       	ldd	r23, Y+19	; 0x13
     c64:	8c 89       	ldd	r24, Y+20	; 0x14
     c66:	9d 89       	ldd	r25, Y+21	; 0x15
     c68:	0e 94 be 06 	call	0xd7c	; 0xd7c <__cmpsf2>
     c6c:	88 23       	and	r24, r24
     c6e:	2c f4       	brge	.+10     	; 0xc7a <ToggleRed+0x112>
		__ticks = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	8e 8b       	std	Y+22, r24	; 0x16
     c76:	9f 8b       	std	Y+23, r25	; 0x17
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <ToggleRed+0x190>
	else if (__tmp > 65535)
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	3f ef       	ldi	r19, 0xFF	; 255
     c7e:	4f e7       	ldi	r20, 0x7F	; 127
     c80:	57 e4       	ldi	r21, 0x47	; 71
     c82:	6a 89       	ldd	r22, Y+18	; 0x12
     c84:	7b 89       	ldd	r23, Y+19	; 0x13
     c86:	8c 89       	ldd	r24, Y+20	; 0x14
     c88:	9d 89       	ldd	r25, Y+21	; 0x15
     c8a:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     c8e:	18 16       	cp	r1, r24
     c90:	4c f5       	brge	.+82     	; 0xce4 <ToggleRed+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e2       	ldi	r20, 0x20	; 32
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	6e 85       	ldd	r22, Y+14	; 0x0e
     c9c:	7f 85       	ldd	r23, Y+15	; 0x0f
     c9e:	88 89       	ldd	r24, Y+16	; 0x10
     ca0:	99 89       	ldd	r25, Y+17	; 0x11
     ca2:	0e 94 1b 08 	call	0x1036	; 0x1036 <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	8e 8b       	std	Y+22, r24	; 0x16
     cb8:	9f 8b       	std	Y+23, r25	; 0x17
     cba:	0f c0       	rjmp	.+30     	; 0xcda <ToggleRed+0x172>
     cbc:	83 e5       	ldi	r24, 0x53	; 83
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	88 8f       	std	Y+24, r24	; 0x18
     cc2:	99 8f       	std	Y+25, r25	; 0x19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc4:	88 8d       	ldd	r24, Y+24	; 0x18
     cc6:	99 8d       	ldd	r25, Y+25	; 0x19
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <ToggleRed+0x160>
     ccc:	88 8f       	std	Y+24, r24	; 0x18
     cce:	99 8f       	std	Y+25, r25	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	8e 89       	ldd	r24, Y+22	; 0x16
     cd2:	9f 89       	ldd	r25, Y+23	; 0x17
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	8e 8b       	std	Y+22, r24	; 0x16
     cd8:	9f 8b       	std	Y+23, r25	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cda:	8e 89       	ldd	r24, Y+22	; 0x16
     cdc:	9f 89       	ldd	r25, Y+23	; 0x17
     cde:	89 2b       	or	r24, r25
     ce0:	69 f7       	brne	.-38     	; 0xcbc <ToggleRed+0x154>
     ce2:	3f c0       	rjmp	.+126    	; 0xd62 <ToggleRed+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce4:	6a 89       	ldd	r22, Y+18	; 0x12
     ce6:	7b 89       	ldd	r23, Y+19	; 0x13
     ce8:	8c 89       	ldd	r24, Y+20	; 0x14
     cea:	9d 89       	ldd	r25, Y+21	; 0x15
     cec:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	8e 8b       	std	Y+22, r24	; 0x16
     cf6:	9f 8b       	std	Y+23, r25	; 0x17
     cf8:	8e 89       	ldd	r24, Y+22	; 0x16
     cfa:	9f 89       	ldd	r25, Y+23	; 0x17
     cfc:	8a 8f       	std	Y+26, r24	; 0x1a
     cfe:	9b 8f       	std	Y+27, r25	; 0x1b
     d00:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d02:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <ToggleRed+0x19c>
     d08:	8a 8f       	std	Y+26, r24	; 0x1a
     d0a:	9b 8f       	std	Y+27, r25	; 0x1b
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <ToggleRed+0x1fa>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	53 e4       	ldi	r21, 0x43	; 67
     d16:	6d 81       	ldd	r22, Y+5	; 0x05
     d18:	7e 81       	ldd	r23, Y+6	; 0x06
     d1a:	8f 81       	ldd	r24, Y+7	; 0x07
     d1c:	98 85       	ldd	r25, Y+8	; 0x08
     d1e:	0e 94 16 08 	call	0x102c	; 0x102c <__gesf2>
     d22:	18 16       	cp	r1, r24
     d24:	ac f4       	brge	.+42     	; 0xd50 <ToggleRed+0x1e8>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     d26:	69 85       	ldd	r22, Y+9	; 0x09
     d28:	7a 85       	ldd	r23, Y+10	; 0x0a
     d2a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d2c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d2e:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	8c 8f       	std	Y+28, r24	; 0x1c
     d38:	9d 8f       	std	Y+29, r25	; 0x1d
     d3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d3e:	8e 8f       	std	Y+30, r24	; 0x1e
     d40:	9f 8f       	std	Y+31, r25	; 0x1f
     d42:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d44:	9f 8d       	ldd	r25, Y+31	; 0x1f
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <ToggleRed+0x1de>
     d4a:	8e 8f       	std	Y+30, r24	; 0x1e
     d4c:	9f 8f       	std	Y+31, r25	; 0x1f
	
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <ToggleRed+0x206>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     d50:	6d 81       	ldd	r22, Y+5	; 0x05
     d52:	7e 81       	ldd	r23, Y+6	; 0x06
     d54:	8f 81       	ldd	r24, Y+7	; 0x07
     d56:	98 85       	ldd	r25, Y+8	; 0x08
     d58:	0e 94 35 07 	call	0xe6a	; 0xe6a <__fixunssfsi>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	8d 87       	std	Y+13, r24	; 0x0d
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d66:	88 a1       	ldd	r24, Y+32	; 0x20
     d68:	8a 95       	dec	r24
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <ToggleRed+0x200>
     d6c:	88 a3       	std	Y+32, r24	; 0x20
     d6e:	00 00       	nop
     d70:	a2 96       	adiw	r28, 0x22	; 34
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <__cmpsf2>:
     d7c:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_cmp>
     d80:	08 f4       	brcc	.+2      	; 0xd84 <__cmpsf2+0x8>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	08 95       	ret

00000d86 <__divsf3>:
     d86:	0e 94 d7 06 	call	0xdae	; 0xdae <__divsf3x>
     d8a:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_round>
     d8e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_pscB>
     d92:	58 f0       	brcs	.+22     	; 0xdaa <__divsf3+0x24>
     d94:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_pscA>
     d98:	40 f0       	brcs	.+16     	; 0xdaa <__divsf3+0x24>
     d9a:	29 f4       	brne	.+10     	; 0xda6 <__divsf3+0x20>
     d9c:	5f 3f       	cpi	r21, 0xFF	; 255
     d9e:	29 f0       	breq	.+10     	; 0xdaa <__divsf3+0x24>
     da0:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_inf>
     da4:	51 11       	cpse	r21, r1
     da6:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_szero>
     daa:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_nan>

00000dae <__divsf3x>:
     dae:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_split3>
     db2:	68 f3       	brcs	.-38     	; 0xd8e <__divsf3+0x8>

00000db4 <__divsf3_pse>:
     db4:	99 23       	and	r25, r25
     db6:	b1 f3       	breq	.-20     	; 0xda4 <__divsf3+0x1e>
     db8:	55 23       	and	r21, r21
     dba:	91 f3       	breq	.-28     	; 0xda0 <__divsf3+0x1a>
     dbc:	95 1b       	sub	r25, r21
     dbe:	55 0b       	sbc	r21, r21
     dc0:	bb 27       	eor	r27, r27
     dc2:	aa 27       	eor	r26, r26
     dc4:	62 17       	cp	r22, r18
     dc6:	73 07       	cpc	r23, r19
     dc8:	84 07       	cpc	r24, r20
     dca:	38 f0       	brcs	.+14     	; 0xdda <__divsf3_pse+0x26>
     dcc:	9f 5f       	subi	r25, 0xFF	; 255
     dce:	5f 4f       	sbci	r21, 0xFF	; 255
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	44 1f       	adc	r20, r20
     dd6:	aa 1f       	adc	r26, r26
     dd8:	a9 f3       	breq	.-22     	; 0xdc4 <__divsf3_pse+0x10>
     dda:	35 d0       	rcall	.+106    	; 0xe46 <__divsf3_pse+0x92>
     ddc:	0e 2e       	mov	r0, r30
     dde:	3a f0       	brmi	.+14     	; 0xdee <__divsf3_pse+0x3a>
     de0:	e0 e8       	ldi	r30, 0x80	; 128
     de2:	32 d0       	rcall	.+100    	; 0xe48 <__divsf3_pse+0x94>
     de4:	91 50       	subi	r25, 0x01	; 1
     de6:	50 40       	sbci	r21, 0x00	; 0
     de8:	e6 95       	lsr	r30
     dea:	00 1c       	adc	r0, r0
     dec:	ca f7       	brpl	.-14     	; 0xde0 <__divsf3_pse+0x2c>
     dee:	2b d0       	rcall	.+86     	; 0xe46 <__divsf3_pse+0x92>
     df0:	fe 2f       	mov	r31, r30
     df2:	29 d0       	rcall	.+82     	; 0xe46 <__divsf3_pse+0x92>
     df4:	66 0f       	add	r22, r22
     df6:	77 1f       	adc	r23, r23
     df8:	88 1f       	adc	r24, r24
     dfa:	bb 1f       	adc	r27, r27
     dfc:	26 17       	cp	r18, r22
     dfe:	37 07       	cpc	r19, r23
     e00:	48 07       	cpc	r20, r24
     e02:	ab 07       	cpc	r26, r27
     e04:	b0 e8       	ldi	r27, 0x80	; 128
     e06:	09 f0       	breq	.+2      	; 0xe0a <__divsf3_pse+0x56>
     e08:	bb 0b       	sbc	r27, r27
     e0a:	80 2d       	mov	r24, r0
     e0c:	bf 01       	movw	r22, r30
     e0e:	ff 27       	eor	r31, r31
     e10:	93 58       	subi	r25, 0x83	; 131
     e12:	5f 4f       	sbci	r21, 0xFF	; 255
     e14:	3a f0       	brmi	.+14     	; 0xe24 <__divsf3_pse+0x70>
     e16:	9e 3f       	cpi	r25, 0xFE	; 254
     e18:	51 05       	cpc	r21, r1
     e1a:	78 f0       	brcs	.+30     	; 0xe3a <__divsf3_pse+0x86>
     e1c:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_inf>
     e20:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_szero>
     e24:	5f 3f       	cpi	r21, 0xFF	; 255
     e26:	e4 f3       	brlt	.-8      	; 0xe20 <__divsf3_pse+0x6c>
     e28:	98 3e       	cpi	r25, 0xE8	; 232
     e2a:	d4 f3       	brlt	.-12     	; 0xe20 <__divsf3_pse+0x6c>
     e2c:	86 95       	lsr	r24
     e2e:	77 95       	ror	r23
     e30:	67 95       	ror	r22
     e32:	b7 95       	ror	r27
     e34:	f7 95       	ror	r31
     e36:	9f 5f       	subi	r25, 0xFF	; 255
     e38:	c9 f7       	brne	.-14     	; 0xe2c <__divsf3_pse+0x78>
     e3a:	88 0f       	add	r24, r24
     e3c:	91 1d       	adc	r25, r1
     e3e:	96 95       	lsr	r25
     e40:	87 95       	ror	r24
     e42:	97 f9       	bld	r25, 7
     e44:	08 95       	ret
     e46:	e1 e0       	ldi	r30, 0x01	; 1
     e48:	66 0f       	add	r22, r22
     e4a:	77 1f       	adc	r23, r23
     e4c:	88 1f       	adc	r24, r24
     e4e:	bb 1f       	adc	r27, r27
     e50:	62 17       	cp	r22, r18
     e52:	73 07       	cpc	r23, r19
     e54:	84 07       	cpc	r24, r20
     e56:	ba 07       	cpc	r27, r26
     e58:	20 f0       	brcs	.+8      	; 0xe62 <__divsf3_pse+0xae>
     e5a:	62 1b       	sub	r22, r18
     e5c:	73 0b       	sbc	r23, r19
     e5e:	84 0b       	sbc	r24, r20
     e60:	ba 0b       	sbc	r27, r26
     e62:	ee 1f       	adc	r30, r30
     e64:	88 f7       	brcc	.-30     	; 0xe48 <__divsf3_pse+0x94>
     e66:	e0 95       	com	r30
     e68:	08 95       	ret

00000e6a <__fixunssfsi>:
     e6a:	0e 94 f5 07 	call	0xfea	; 0xfea <__fp_splitA>
     e6e:	88 f0       	brcs	.+34     	; 0xe92 <__fixunssfsi+0x28>
     e70:	9f 57       	subi	r25, 0x7F	; 127
     e72:	98 f0       	brcs	.+38     	; 0xe9a <__fixunssfsi+0x30>
     e74:	b9 2f       	mov	r27, r25
     e76:	99 27       	eor	r25, r25
     e78:	b7 51       	subi	r27, 0x17	; 23
     e7a:	b0 f0       	brcs	.+44     	; 0xea8 <__fixunssfsi+0x3e>
     e7c:	e1 f0       	breq	.+56     	; 0xeb6 <__fixunssfsi+0x4c>
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	1a f0       	brmi	.+6      	; 0xe8e <__fixunssfsi+0x24>
     e88:	ba 95       	dec	r27
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__fixunssfsi+0x14>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <__fixunssfsi+0x4c>
     e8e:	b1 30       	cpi	r27, 0x01	; 1
     e90:	91 f0       	breq	.+36     	; 0xeb6 <__fixunssfsi+0x4c>
     e92:	0e 94 0f 08 	call	0x101e	; 0x101e <__fp_zero>
     e96:	b1 e0       	ldi	r27, 0x01	; 1
     e98:	08 95       	ret
     e9a:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__fp_zero>
     e9e:	67 2f       	mov	r22, r23
     ea0:	78 2f       	mov	r23, r24
     ea2:	88 27       	eor	r24, r24
     ea4:	b8 5f       	subi	r27, 0xF8	; 248
     ea6:	39 f0       	breq	.+14     	; 0xeb6 <__fixunssfsi+0x4c>
     ea8:	b9 3f       	cpi	r27, 0xF9	; 249
     eaa:	cc f3       	brlt	.-14     	; 0xe9e <__fixunssfsi+0x34>
     eac:	86 95       	lsr	r24
     eae:	77 95       	ror	r23
     eb0:	67 95       	ror	r22
     eb2:	b3 95       	inc	r27
     eb4:	d9 f7       	brne	.-10     	; 0xeac <__fixunssfsi+0x42>
     eb6:	3e f4       	brtc	.+14     	; 0xec6 <__fixunssfsi+0x5c>
     eb8:	90 95       	com	r25
     eba:	80 95       	com	r24
     ebc:	70 95       	com	r23
     ebe:	61 95       	neg	r22
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	8f 4f       	sbci	r24, 0xFF	; 255
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	08 95       	ret

00000ec8 <__floatunsisf>:
     ec8:	e8 94       	clt
     eca:	09 c0       	rjmp	.+18     	; 0xede <__floatsisf+0x12>

00000ecc <__floatsisf>:
     ecc:	97 fb       	bst	r25, 7
     ece:	3e f4       	brtc	.+14     	; 0xede <__floatsisf+0x12>
     ed0:	90 95       	com	r25
     ed2:	80 95       	com	r24
     ed4:	70 95       	com	r23
     ed6:	61 95       	neg	r22
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	8f 4f       	sbci	r24, 0xFF	; 255
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	99 23       	and	r25, r25
     ee0:	a9 f0       	breq	.+42     	; 0xf0c <__floatsisf+0x40>
     ee2:	f9 2f       	mov	r31, r25
     ee4:	96 e9       	ldi	r25, 0x96	; 150
     ee6:	bb 27       	eor	r27, r27
     ee8:	93 95       	inc	r25
     eea:	f6 95       	lsr	r31
     eec:	87 95       	ror	r24
     eee:	77 95       	ror	r23
     ef0:	67 95       	ror	r22
     ef2:	b7 95       	ror	r27
     ef4:	f1 11       	cpse	r31, r1
     ef6:	f8 cf       	rjmp	.-16     	; 0xee8 <__floatsisf+0x1c>
     ef8:	fa f4       	brpl	.+62     	; 0xf38 <__floatsisf+0x6c>
     efa:	bb 0f       	add	r27, r27
     efc:	11 f4       	brne	.+4      	; 0xf02 <__floatsisf+0x36>
     efe:	60 ff       	sbrs	r22, 0
     f00:	1b c0       	rjmp	.+54     	; 0xf38 <__floatsisf+0x6c>
     f02:	6f 5f       	subi	r22, 0xFF	; 255
     f04:	7f 4f       	sbci	r23, 0xFF	; 255
     f06:	8f 4f       	sbci	r24, 0xFF	; 255
     f08:	9f 4f       	sbci	r25, 0xFF	; 255
     f0a:	16 c0       	rjmp	.+44     	; 0xf38 <__floatsisf+0x6c>
     f0c:	88 23       	and	r24, r24
     f0e:	11 f0       	breq	.+4      	; 0xf14 <__floatsisf+0x48>
     f10:	96 e9       	ldi	r25, 0x96	; 150
     f12:	11 c0       	rjmp	.+34     	; 0xf36 <__floatsisf+0x6a>
     f14:	77 23       	and	r23, r23
     f16:	21 f0       	breq	.+8      	; 0xf20 <__floatsisf+0x54>
     f18:	9e e8       	ldi	r25, 0x8E	; 142
     f1a:	87 2f       	mov	r24, r23
     f1c:	76 2f       	mov	r23, r22
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <__floatsisf+0x5e>
     f20:	66 23       	and	r22, r22
     f22:	71 f0       	breq	.+28     	; 0xf40 <__floatsisf+0x74>
     f24:	96 e8       	ldi	r25, 0x86	; 134
     f26:	86 2f       	mov	r24, r22
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	2a f0       	brmi	.+10     	; 0xf38 <__floatsisf+0x6c>
     f2e:	9a 95       	dec	r25
     f30:	66 0f       	add	r22, r22
     f32:	77 1f       	adc	r23, r23
     f34:	88 1f       	adc	r24, r24
     f36:	da f7       	brpl	.-10     	; 0xf2e <__floatsisf+0x62>
     f38:	88 0f       	add	r24, r24
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	97 f9       	bld	r25, 7
     f40:	08 95       	ret

00000f42 <__fp_cmp>:
     f42:	99 0f       	add	r25, r25
     f44:	00 08       	sbc	r0, r0
     f46:	55 0f       	add	r21, r21
     f48:	aa 0b       	sbc	r26, r26
     f4a:	e0 e8       	ldi	r30, 0x80	; 128
     f4c:	fe ef       	ldi	r31, 0xFE	; 254
     f4e:	16 16       	cp	r1, r22
     f50:	17 06       	cpc	r1, r23
     f52:	e8 07       	cpc	r30, r24
     f54:	f9 07       	cpc	r31, r25
     f56:	c0 f0       	brcs	.+48     	; 0xf88 <__fp_cmp+0x46>
     f58:	12 16       	cp	r1, r18
     f5a:	13 06       	cpc	r1, r19
     f5c:	e4 07       	cpc	r30, r20
     f5e:	f5 07       	cpc	r31, r21
     f60:	98 f0       	brcs	.+38     	; 0xf88 <__fp_cmp+0x46>
     f62:	62 1b       	sub	r22, r18
     f64:	73 0b       	sbc	r23, r19
     f66:	84 0b       	sbc	r24, r20
     f68:	95 0b       	sbc	r25, r21
     f6a:	39 f4       	brne	.+14     	; 0xf7a <__fp_cmp+0x38>
     f6c:	0a 26       	eor	r0, r26
     f6e:	61 f0       	breq	.+24     	; 0xf88 <__fp_cmp+0x46>
     f70:	23 2b       	or	r18, r19
     f72:	24 2b       	or	r18, r20
     f74:	25 2b       	or	r18, r21
     f76:	21 f4       	brne	.+8      	; 0xf80 <__fp_cmp+0x3e>
     f78:	08 95       	ret
     f7a:	0a 26       	eor	r0, r26
     f7c:	09 f4       	brne	.+2      	; 0xf80 <__fp_cmp+0x3e>
     f7e:	a1 40       	sbci	r26, 0x01	; 1
     f80:	a6 95       	lsr	r26
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	81 1d       	adc	r24, r1
     f86:	81 1d       	adc	r24, r1
     f88:	08 95       	ret

00000f8a <__fp_inf>:
     f8a:	97 f9       	bld	r25, 7
     f8c:	9f 67       	ori	r25, 0x7F	; 127
     f8e:	80 e8       	ldi	r24, 0x80	; 128
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	08 95       	ret

00000f96 <__fp_nan>:
     f96:	9f ef       	ldi	r25, 0xFF	; 255
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	08 95       	ret

00000f9c <__fp_pscA>:
     f9c:	00 24       	eor	r0, r0
     f9e:	0a 94       	dec	r0
     fa0:	16 16       	cp	r1, r22
     fa2:	17 06       	cpc	r1, r23
     fa4:	18 06       	cpc	r1, r24
     fa6:	09 06       	cpc	r0, r25
     fa8:	08 95       	ret

00000faa <__fp_pscB>:
     faa:	00 24       	eor	r0, r0
     fac:	0a 94       	dec	r0
     fae:	12 16       	cp	r1, r18
     fb0:	13 06       	cpc	r1, r19
     fb2:	14 06       	cpc	r1, r20
     fb4:	05 06       	cpc	r0, r21
     fb6:	08 95       	ret

00000fb8 <__fp_round>:
     fb8:	09 2e       	mov	r0, r25
     fba:	03 94       	inc	r0
     fbc:	00 0c       	add	r0, r0
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <__fp_round+0xc>
     fc0:	88 23       	and	r24, r24
     fc2:	52 f0       	brmi	.+20     	; 0xfd8 <__fp_round+0x20>
     fc4:	bb 0f       	add	r27, r27
     fc6:	40 f4       	brcc	.+16     	; 0xfd8 <__fp_round+0x20>
     fc8:	bf 2b       	or	r27, r31
     fca:	11 f4       	brne	.+4      	; 0xfd0 <__fp_round+0x18>
     fcc:	60 ff       	sbrs	r22, 0
     fce:	04 c0       	rjmp	.+8      	; 0xfd8 <__fp_round+0x20>
     fd0:	6f 5f       	subi	r22, 0xFF	; 255
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	08 95       	ret

00000fda <__fp_split3>:
     fda:	57 fd       	sbrc	r21, 7
     fdc:	90 58       	subi	r25, 0x80	; 128
     fde:	44 0f       	add	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	59 f0       	breq	.+22     	; 0xffa <__fp_splitA+0x10>
     fe4:	5f 3f       	cpi	r21, 0xFF	; 255
     fe6:	71 f0       	breq	.+28     	; 0x1004 <__fp_splitA+0x1a>
     fe8:	47 95       	ror	r20

00000fea <__fp_splitA>:
     fea:	88 0f       	add	r24, r24
     fec:	97 fb       	bst	r25, 7
     fee:	99 1f       	adc	r25, r25
     ff0:	61 f0       	breq	.+24     	; 0x100a <__fp_splitA+0x20>
     ff2:	9f 3f       	cpi	r25, 0xFF	; 255
     ff4:	79 f0       	breq	.+30     	; 0x1014 <__fp_splitA+0x2a>
     ff6:	87 95       	ror	r24
     ff8:	08 95       	ret
     ffa:	12 16       	cp	r1, r18
     ffc:	13 06       	cpc	r1, r19
     ffe:	14 06       	cpc	r1, r20
    1000:	55 1f       	adc	r21, r21
    1002:	f2 cf       	rjmp	.-28     	; 0xfe8 <__fp_split3+0xe>
    1004:	46 95       	lsr	r20
    1006:	f1 df       	rcall	.-30     	; 0xfea <__fp_splitA>
    1008:	08 c0       	rjmp	.+16     	; 0x101a <__fp_splitA+0x30>
    100a:	16 16       	cp	r1, r22
    100c:	17 06       	cpc	r1, r23
    100e:	18 06       	cpc	r1, r24
    1010:	99 1f       	adc	r25, r25
    1012:	f1 cf       	rjmp	.-30     	; 0xff6 <__fp_splitA+0xc>
    1014:	86 95       	lsr	r24
    1016:	71 05       	cpc	r23, r1
    1018:	61 05       	cpc	r22, r1
    101a:	08 94       	sec
    101c:	08 95       	ret

0000101e <__fp_zero>:
    101e:	e8 94       	clt

00001020 <__fp_szero>:
    1020:	bb 27       	eor	r27, r27
    1022:	66 27       	eor	r22, r22
    1024:	77 27       	eor	r23, r23
    1026:	cb 01       	movw	r24, r22
    1028:	97 f9       	bld	r25, 7
    102a:	08 95       	ret

0000102c <__gesf2>:
    102c:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_cmp>
    1030:	08 f4       	brcc	.+2      	; 0x1034 <__gesf2+0x8>
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	08 95       	ret

00001036 <__mulsf3>:
    1036:	0e 94 2e 08 	call	0x105c	; 0x105c <__mulsf3x>
    103a:	0c 94 dc 07 	jmp	0xfb8	; 0xfb8 <__fp_round>
    103e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_pscA>
    1042:	38 f0       	brcs	.+14     	; 0x1052 <__mulsf3+0x1c>
    1044:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_pscB>
    1048:	20 f0       	brcs	.+8      	; 0x1052 <__mulsf3+0x1c>
    104a:	95 23       	and	r25, r21
    104c:	11 f0       	breq	.+4      	; 0x1052 <__mulsf3+0x1c>
    104e:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_inf>
    1052:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_nan>
    1056:	11 24       	eor	r1, r1
    1058:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_szero>

0000105c <__mulsf3x>:
    105c:	0e 94 ed 07 	call	0xfda	; 0xfda <__fp_split3>
    1060:	70 f3       	brcs	.-36     	; 0x103e <__mulsf3+0x8>

00001062 <__mulsf3_pse>:
    1062:	95 9f       	mul	r25, r21
    1064:	c1 f3       	breq	.-16     	; 0x1056 <__mulsf3+0x20>
    1066:	95 0f       	add	r25, r21
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	55 1f       	adc	r21, r21
    106c:	62 9f       	mul	r22, r18
    106e:	f0 01       	movw	r30, r0
    1070:	72 9f       	mul	r23, r18
    1072:	bb 27       	eor	r27, r27
    1074:	f0 0d       	add	r31, r0
    1076:	b1 1d       	adc	r27, r1
    1078:	63 9f       	mul	r22, r19
    107a:	aa 27       	eor	r26, r26
    107c:	f0 0d       	add	r31, r0
    107e:	b1 1d       	adc	r27, r1
    1080:	aa 1f       	adc	r26, r26
    1082:	64 9f       	mul	r22, r20
    1084:	66 27       	eor	r22, r22
    1086:	b0 0d       	add	r27, r0
    1088:	a1 1d       	adc	r26, r1
    108a:	66 1f       	adc	r22, r22
    108c:	82 9f       	mul	r24, r18
    108e:	22 27       	eor	r18, r18
    1090:	b0 0d       	add	r27, r0
    1092:	a1 1d       	adc	r26, r1
    1094:	62 1f       	adc	r22, r18
    1096:	73 9f       	mul	r23, r19
    1098:	b0 0d       	add	r27, r0
    109a:	a1 1d       	adc	r26, r1
    109c:	62 1f       	adc	r22, r18
    109e:	83 9f       	mul	r24, r19
    10a0:	a0 0d       	add	r26, r0
    10a2:	61 1d       	adc	r22, r1
    10a4:	22 1f       	adc	r18, r18
    10a6:	74 9f       	mul	r23, r20
    10a8:	33 27       	eor	r19, r19
    10aa:	a0 0d       	add	r26, r0
    10ac:	61 1d       	adc	r22, r1
    10ae:	23 1f       	adc	r18, r19
    10b0:	84 9f       	mul	r24, r20
    10b2:	60 0d       	add	r22, r0
    10b4:	21 1d       	adc	r18, r1
    10b6:	82 2f       	mov	r24, r18
    10b8:	76 2f       	mov	r23, r22
    10ba:	6a 2f       	mov	r22, r26
    10bc:	11 24       	eor	r1, r1
    10be:	9f 57       	subi	r25, 0x7F	; 127
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	9a f0       	brmi	.+38     	; 0x10ea <__mulsf3_pse+0x88>
    10c4:	f1 f0       	breq	.+60     	; 0x1102 <__mulsf3_pse+0xa0>
    10c6:	88 23       	and	r24, r24
    10c8:	4a f0       	brmi	.+18     	; 0x10dc <__mulsf3_pse+0x7a>
    10ca:	ee 0f       	add	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	bb 1f       	adc	r27, r27
    10d0:	66 1f       	adc	r22, r22
    10d2:	77 1f       	adc	r23, r23
    10d4:	88 1f       	adc	r24, r24
    10d6:	91 50       	subi	r25, 0x01	; 1
    10d8:	50 40       	sbci	r21, 0x00	; 0
    10da:	a9 f7       	brne	.-22     	; 0x10c6 <__mulsf3_pse+0x64>
    10dc:	9e 3f       	cpi	r25, 0xFE	; 254
    10de:	51 05       	cpc	r21, r1
    10e0:	80 f0       	brcs	.+32     	; 0x1102 <__mulsf3_pse+0xa0>
    10e2:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__fp_inf>
    10e6:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_szero>
    10ea:	5f 3f       	cpi	r21, 0xFF	; 255
    10ec:	e4 f3       	brlt	.-8      	; 0x10e6 <__mulsf3_pse+0x84>
    10ee:	98 3e       	cpi	r25, 0xE8	; 232
    10f0:	d4 f3       	brlt	.-12     	; 0x10e6 <__mulsf3_pse+0x84>
    10f2:	86 95       	lsr	r24
    10f4:	77 95       	ror	r23
    10f6:	67 95       	ror	r22
    10f8:	b7 95       	ror	r27
    10fa:	f7 95       	ror	r31
    10fc:	e7 95       	ror	r30
    10fe:	9f 5f       	subi	r25, 0xFF	; 255
    1100:	c1 f7       	brne	.-16     	; 0x10f2 <__mulsf3_pse+0x90>
    1102:	fe 2b       	or	r31, r30
    1104:	88 0f       	add	r24, r24
    1106:	91 1d       	adc	r25, r1
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	97 f9       	bld	r25, 7
    110e:	08 95       	ret

00001110 <_exit>:
    1110:	f8 94       	cli

00001112 <__stop_program>:
    1112:	ff cf       	rjmp	.-2      	; 0x1112 <__stop_program>
