
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000059e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00802800  00802800  0000059e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000610  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003666  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000288b  00000000  00000000  00003e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e67  00000000  00000000  000066f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00007558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001793  00000000  00000000  000079c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076a  00000000  00000000  00009153  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000098bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_13>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62

0000009c <__do_clear_bss>:
  9c:	28 e2       	ldi	r18, 0x28	; 40
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b8 e2       	ldi	r27, 0x28	; 40
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a1 30       	cpi	r26, 0x01	; 1
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  b0:	0c 94 93 02 	jmp	0x526	; 0x526 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	system_init();
  c0:	0e 94 1f 02 	call	0x43e	; 0x43e <system_init>
}
  c4:	00 00       	nop
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

000000cc <LedBlink>:
 *  Author: samsunny
 */ 
#include <atmel_start.h>
#include "tcb.h"
void LedBlink(uint8_t duty_cycle)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	1f 92       	push	r1
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	89 83       	std	Y+1, r24	; 0x01
	TCB0.CCMPL=255;
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	9a e0       	ldi	r25, 0x0A	; 10
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	fc 01       	movw	r30, r24
  e0:	24 87       	std	Z+12, r18	; 0x0c
	TCB0.CCMPH=duty_cycle;
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	9a e0       	ldi	r25, 0x0A	; 10
  e6:	29 81       	ldd	r18, Y+1	; 0x01
  e8:	fc 01       	movw	r30, r24
  ea:	25 87       	std	Z+13, r18	; 0x0d
  ec:	00 00       	nop
  ee:	0f 90       	pop	r0
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
#include <atmel_start.h>
#include "LedBlink.h"
int main(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	
	atmel_start_init();
  fe:	0e 94 5c 00 	call	0xb8	; 0xb8 <atmel_start_init>

	/* Replace with your application code */
	while (1) 
	 {
		 
		 LedBlink(10);
 102:	8a e0       	ldi	r24, 0x0A	; 10
 104:	0e 94 66 00 	call	0xcc	; 0xcc <LedBlink>
		 
	 }
 108:	fc cf       	rjmp	.-8      	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>

0000010a <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 112:	80 e0       	ldi	r24, 0x00	; 0
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <ccp_write_io+0x6>
 120:	1f 92       	push	r1
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	4b 81       	ldd	r20, Y+3	; 0x03
 132:	68 ed       	ldi	r22, 0xD8	; 216
 134:	0e 94 35 02 	call	0x46a	; 0x46a <protected_write_io>
}
 138:	00 00       	nop
 13a:	23 96       	adiw	r28, 0x03	; 3
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	de bf       	out	0x3e, r29	; 62
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	81 e6       	ldi	r24, 0x61	; 97
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 8d 00 	call	0x11a	; 0x11a <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 158:	80 e0       	ldi	r24, 0x00	; 0
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 168:	80 e0       	ldi	r24, 0x00	; 0
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <PORTF_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	00 d0       	rcall	.+0      	; 0x176 <PORTF_set_pin_dir+0x6>
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	91 05       	cpc	r25, r1
 188:	e1 f0       	breq	.+56     	; 0x1c2 <PORTF_set_pin_dir+0x52>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	91 05       	cpc	r25, r1
 18e:	71 f1       	breq	.+92     	; 0x1ec <PORTF_set_pin_dir+0x7c>
 190:	89 2b       	or	r24, r25
 192:	09 f0       	breq	.+2      	; 0x196 <PORTF_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 194:	3b c0       	rjmp	.+118    	; 0x20c <PORTF_set_pin_dir+0x9c>
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
 196:	84 e1       	ldi	r24, 0x14	; 20
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	24 e1       	ldi	r18, 0x14	; 20
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	62 2f       	mov	r22, r18
 1a4:	29 81       	ldd	r18, Y+1	; 0x01
 1a6:	42 2f       	mov	r20, r18
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <PORTF_set_pin_dir+0x44>
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	4a 95       	dec	r20
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <PORTF_set_pin_dir+0x40>
 1b8:	20 95       	com	r18
 1ba:	26 23       	and	r18, r22
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
		break;
 1c0:	25 c0       	rjmp	.+74     	; 0x20c <PORTF_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 1c2:	84 e1       	ldi	r24, 0x14	; 20
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	24 e1       	ldi	r18, 0x14	; 20
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	62 2f       	mov	r22, r18
 1d0:	29 81       	ldd	r18, Y+1	; 0x01
 1d2:	42 2f       	mov	r20, r18
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <PORTF_set_pin_dir+0x70>
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	4a 95       	dec	r20
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <PORTF_set_pin_dir+0x6c>
 1e4:	26 2b       	or	r18, r22
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
		break;
 1ea:	10 c0       	rjmp	.+32     	; 0x20c <PORTF_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTF + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	88 2f       	mov	r24, r24
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	80 55       	subi	r24, 0x50	; 80
 1f4:	9b 4f       	sbci	r25, 0xFB	; 251
 1f6:	29 81       	ldd	r18, Y+1	; 0x01
 1f8:	22 2f       	mov	r18, r18
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	20 55       	subi	r18, 0x50	; 80
 1fe:	3b 4f       	sbci	r19, 0xFB	; 251
 200:	f9 01       	movw	r30, r18
 202:	20 81       	ld	r18, Z
 204:	28 60       	ori	r18, 0x08	; 8
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
		break;
 20a:	00 00       	nop
	default:
		break;
	}
}
 20c:	00 00       	nop
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <PORTF_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <PORTF_set_pin_level+0x6>
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 226:	8a 81       	ldd	r24, Y+2	; 0x02
 228:	88 23       	and	r24, r24
 22a:	a9 f0       	breq	.+42     	; 0x256 <PORTF_set_pin_level+0x3e>
		VPORTF.OUT |= (1 << pin);
 22c:	84 e1       	ldi	r24, 0x14	; 20
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	24 e1       	ldi	r18, 0x14	; 20
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	f9 01       	movw	r30, r18
 236:	21 81       	ldd	r18, Z+1	; 0x01
 238:	62 2f       	mov	r22, r18
 23a:	29 81       	ldd	r18, Y+1	; 0x01
 23c:	42 2f       	mov	r20, r18
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <PORTF_set_pin_level+0x32>
 246:	22 0f       	add	r18, r18
 248:	33 1f       	adc	r19, r19
 24a:	4a 95       	dec	r20
 24c:	e2 f7       	brpl	.-8      	; 0x246 <PORTF_set_pin_level+0x2e>
 24e:	26 2b       	or	r18, r22
 250:	fc 01       	movw	r30, r24
 252:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTF.OUT &= ~(1 << pin);
	}
}
 254:	15 c0       	rjmp	.+42     	; 0x280 <PORTF_set_pin_level+0x68>
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 256:	84 e1       	ldi	r24, 0x14	; 20
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	24 e1       	ldi	r18, 0x14	; 20
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	f9 01       	movw	r30, r18
 260:	21 81       	ldd	r18, Z+1	; 0x01
 262:	62 2f       	mov	r22, r18
 264:	29 81       	ldd	r18, Y+1	; 0x01
 266:	42 2f       	mov	r20, r18
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <PORTF_set_pin_level+0x5c>
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	4a 95       	dec	r20
 276:	e2 f7       	brpl	.-8      	; 0x270 <PORTF_set_pin_level+0x58>
 278:	20 95       	com	r18
 27a:	26 23       	and	r18, r22
 27c:	fc 01       	movw	r30, r24
 27e:	21 83       	std	Z+1, r18	; 0x01
	}
}
 280:	00 00       	nop
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <G3_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G3_MCU_set_dir(const enum port_dir dir)
{
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	1f 92       	push	r1
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_dir(4, dir);
 298:	69 81       	ldd	r22, Y+1	; 0x01
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	0e 94 b8 00 	call	0x170	; 0x170 <PORTF_set_pin_dir>
}
 2a0:	00 00       	nop
 2a2:	0f 90       	pop	r0
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <G3_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G3_MCU_set_level(const bool level)
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	1f 92       	push	r1
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	89 83       	std	Y+1, r24	; 0x01
	PORTF_set_pin_level(4, level);
 2b6:	69 81       	ldd	r22, Y+1	; 0x01
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	0e 94 0c 01 	call	0x218	; 0x218 <PORTF_set_pin_level>
}
 2be:	00 00       	nop
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	26 97       	sbiw	r28, 0x06	; 6
 2d2:	cd bf       	out	0x3d, r28	; 61
 2d4:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 2d6:	19 82       	std	Y+1, r1	; 0x01
 2d8:	12 c0       	rjmp	.+36     	; 0x2fe <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	80 5f       	subi	r24, 0xF0	; 240
 2e2:	9b 4f       	sbci	r25, 0xFB	; 251
 2e4:	29 81       	ldd	r18, Y+1	; 0x01
 2e6:	22 2f       	mov	r18, r18
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	20 5f       	subi	r18, 0xF0	; 240
 2ec:	3b 4f       	sbci	r19, 0xFB	; 251
 2ee:	f9 01       	movw	r30, r18
 2f0:	20 81       	ld	r18, Z
 2f2:	28 60       	ori	r18, 0x08	; 8
 2f4:	fc 01       	movw	r30, r24
 2f6:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 2f8:	89 81       	ldd	r24, Y+1	; 0x01
 2fa:	8f 5f       	subi	r24, 0xFF	; 255
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	88 30       	cpi	r24, 0x08	; 8
 302:	58 f3       	brcs	.-42     	; 0x2da <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 304:	1a 82       	std	Y+2, r1	; 0x02
 306:	12 c0       	rjmp	.+36     	; 0x32c <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	88 2f       	mov	r24, r24
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	80 5d       	subi	r24, 0xD0	; 208
 310:	9b 4f       	sbci	r25, 0xFB	; 251
 312:	2a 81       	ldd	r18, Y+2	; 0x02
 314:	22 2f       	mov	r18, r18
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	20 5d       	subi	r18, 0xD0	; 208
 31a:	3b 4f       	sbci	r19, 0xFB	; 251
 31c:	f9 01       	movw	r30, r18
 31e:	20 81       	ld	r18, Z
 320:	28 60       	ori	r18, 0x08	; 8
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	8a 83       	std	Y+2, r24	; 0x02
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	88 30       	cpi	r24, 0x08	; 8
 330:	58 f3       	brcs	.-42     	; 0x308 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 332:	1b 82       	std	Y+3, r1	; 0x03
 334:	12 c0       	rjmp	.+36     	; 0x35a <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 336:	8b 81       	ldd	r24, Y+3	; 0x03
 338:	88 2f       	mov	r24, r24
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	80 5b       	subi	r24, 0xB0	; 176
 33e:	9b 4f       	sbci	r25, 0xFB	; 251
 340:	2b 81       	ldd	r18, Y+3	; 0x03
 342:	22 2f       	mov	r18, r18
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	20 5b       	subi	r18, 0xB0	; 176
 348:	3b 4f       	sbci	r19, 0xFB	; 251
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	28 60       	ori	r18, 0x08	; 8
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	8b 83       	std	Y+3, r24	; 0x03
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	88 30       	cpi	r24, 0x08	; 8
 35e:	58 f3       	brcs	.-42     	; 0x336 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 360:	1c 82       	std	Y+4, r1	; 0x04
 362:	12 c0       	rjmp	.+36     	; 0x388 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 364:	8c 81       	ldd	r24, Y+4	; 0x04
 366:	88 2f       	mov	r24, r24
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	80 59       	subi	r24, 0x90	; 144
 36c:	9b 4f       	sbci	r25, 0xFB	; 251
 36e:	2c 81       	ldd	r18, Y+4	; 0x04
 370:	22 2f       	mov	r18, r18
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	20 59       	subi	r18, 0x90	; 144
 376:	3b 4f       	sbci	r19, 0xFB	; 251
 378:	f9 01       	movw	r30, r18
 37a:	20 81       	ld	r18, Z
 37c:	28 60       	ori	r18, 0x08	; 8
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 382:	8c 81       	ldd	r24, Y+4	; 0x04
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	8c 83       	std	Y+4, r24	; 0x04
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	88 30       	cpi	r24, 0x08	; 8
 38c:	58 f3       	brcs	.-42     	; 0x364 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 38e:	1d 82       	std	Y+5, r1	; 0x05
 390:	12 c0       	rjmp	.+36     	; 0x3b6 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 392:	8d 81       	ldd	r24, Y+5	; 0x05
 394:	88 2f       	mov	r24, r24
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	80 57       	subi	r24, 0x70	; 112
 39a:	9b 4f       	sbci	r25, 0xFB	; 251
 39c:	2d 81       	ldd	r18, Y+5	; 0x05
 39e:	22 2f       	mov	r18, r18
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	20 57       	subi	r18, 0x70	; 112
 3a4:	3b 4f       	sbci	r19, 0xFB	; 251
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	28 60       	ori	r18, 0x08	; 8
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3b0:	8d 81       	ldd	r24, Y+5	; 0x05
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
 3b4:	8d 83       	std	Y+5, r24	; 0x05
 3b6:	8d 81       	ldd	r24, Y+5	; 0x05
 3b8:	88 30       	cpi	r24, 0x08	; 8
 3ba:	58 f3       	brcs	.-42     	; 0x392 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3bc:	1e 82       	std	Y+6, r1	; 0x06
 3be:	12 c0       	rjmp	.+36     	; 0x3e4 <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 3c0:	8e 81       	ldd	r24, Y+6	; 0x06
 3c2:	88 2f       	mov	r24, r24
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	80 55       	subi	r24, 0x50	; 80
 3c8:	9b 4f       	sbci	r25, 0xFB	; 251
 3ca:	2e 81       	ldd	r18, Y+6	; 0x06
 3cc:	22 2f       	mov	r18, r18
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	20 55       	subi	r18, 0x50	; 80
 3d2:	3b 4f       	sbci	r19, 0xFB	; 251
 3d4:	f9 01       	movw	r30, r18
 3d6:	20 81       	ld	r18, Z
 3d8:	28 60       	ori	r18, 0x08	; 8
 3da:	fc 01       	movw	r30, r24
 3dc:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3de:	8e 81       	ldd	r24, Y+6	; 0x06
 3e0:	8f 5f       	subi	r24, 0xFF	; 255
 3e2:	8e 83       	std	Y+6, r24	; 0x06
 3e4:	8e 81       	ldd	r24, Y+6	; 0x06
 3e6:	88 30       	cpi	r24, 0x08	; 8
 3e8:	58 f3       	brcs	.-42     	; 0x3c0 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 3ea:	00 00       	nop
 3ec:	26 96       	adiw	r28, 0x06	; 6
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <TIMER_0_TCB_initialization>:

#include "driver_init.h"
#include <system.h>

void TIMER_0_TCB_initialization(void)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to output

	G3_MCU_set_level(
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 55 01 	call	0x2aa	; 0x2aa <G3_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    true);

	G3_MCU_set_dir(PORT_DIR_OUT);
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 46 01 	call	0x28c	; 0x28c <G3_MCU_set_dir>

	/* set the alternate pin mux */

	PORTMUX.TCBROUTEA |= PORTMUX_TCB0_bm;
 40c:	80 ee       	ldi	r24, 0xE0	; 224
 40e:	95 e0       	ldi	r25, 0x05	; 5
 410:	20 ee       	ldi	r18, 0xE0	; 224
 412:	35 e0       	ldi	r19, 0x05	; 5
 414:	f9 01       	movw	r30, r18
 416:	25 81       	ldd	r18, Z+5	; 0x05
 418:	21 60       	ori	r18, 0x01	; 1
 41a:	fc 01       	movw	r30, r24
 41c:	25 83       	std	Z+5, r18	; 0x05

	TIMER_0_TCB_init();
 41e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TIMER_0_TCB_init>
}
 422:	00 00       	nop
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <PWM_0_initialization>:

void PWM_0_initialization(void)
{
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62

	PWM_0_init();
 432:	0e 94 39 02 	call	0x472	; 0x472 <PWM_0_init>
}
 436:	00 00       	nop
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 446:	0e 94 64 01 	call	0x2c8	; 0x2c8 <mcu_init>

	CLKCTRL_init();
 44a:	0e 94 a3 00 	call	0x146	; 0x146 <CLKCTRL_init>

	TIMER_0_TCB_initialization();
 44e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <TIMER_0_TCB_initialization>

	PWM_0_initialization();
 452:	0e 94 15 02 	call	0x42a	; 0x42a <PWM_0_initialization>

	CPUINT_init();
 456:	0e 94 b0 00 	call	0x160	; 0x160 <CPUINT_init>

	SLPCTRL_init();
 45a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SLPCTRL_init>

	BOD_init();
 45e:	0e 94 85 00 	call	0x10a	; 0x10a <BOD_init>
}
 462:	00 00       	nop
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 46a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 46c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 46e:	40 83       	st	Z, r20
	ret                             // Return to caller
 470:	08 95       	ret

00000472 <PWM_0_init>:
 * \return Nothing.
 */
void PWM_0_register_callback(pwm_irq_cb_t f)
{
	PWM_0_cb = f;
}
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	80 e9       	ldi	r24, 0x90	; 144
 47c:	9a e0       	ldi	r25, 0x0A	; 10
 47e:	27 e0       	ldi	r18, 0x07	; 7
 480:	fc 01       	movw	r30, r24
 482:	21 83       	std	Z+1, r18	; 0x01
 484:	80 e9       	ldi	r24, 0x90	; 144
 486:	9a e0       	ldi	r25, 0x0A	; 10
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	fc 01       	movw	r30, r24
 48c:	20 83       	st	Z, r18
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <__vector_13>:

ISR(TCB1_INT_vect)
{
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x7f403f>
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	ef 93       	push	r30
 4aa:	ff 93       	push	r31
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	cd b7       	in	r28, 0x3d	; 61
 4b2:	de b7       	in	r29, 0x3e	; 62
	static volatile uint8_t callback_count = 0;

	// Clear the interrupt flag
	TCB1.INTFLAGS = TCB_CAPT_bm;
 4b4:	80 e9       	ldi	r24, 0x90	; 144
 4b6:	9a e0       	ldi	r25, 0x0A	; 10
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	fc 01       	movw	r30, r24
 4bc:	26 83       	std	Z+6, r18	; 0x06

	// callback function - called every 0 passes
	if ((++callback_count >= PWM_0_INTERRUPT_CB_RATE) && (PWM_0_INTERRUPT_CB_RATE != 0)) {
 4be:	80 91 00 28 	lds	r24, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
		if (PWM_0_cb != NULL) {
			PWM_0_cb();
		}
	}
}
 4c8:	00 00       	nop
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	ff 91       	pop	r31
 4d0:	ef 91       	pop	r30
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x7f403f>
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 4ec:	80 e0       	ldi	r24, 0x00	; 0
}
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <TIMER_0_TCB_init>:
 * \brief Initialize tcb interface
 *
 * \return Initialization status.
 */
int8_t TIMER_0_TCB_init()
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62

	TCB0.CCMP = 0xff; /* Compare or Capture: 0xff */
 4fc:	80 e8       	ldi	r24, 0x80	; 128
 4fe:	9a e0       	ldi	r25, 0x0A	; 10
 500:	2f ef       	ldi	r18, 0xFF	; 255
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	fc 01       	movw	r30, r24
 506:	24 87       	std	Z+12, r18	; 0x0c
 508:	35 87       	std	Z+13, r19	; 0x0d

	// TCB0.CNT = 0x0; /* Count: 0x0 */
	

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 50a:	80 e8       	ldi	r24, 0x80	; 128
 50c:	9a e0       	ldi	r25, 0x0A	; 10
 50e:	27 e1       	ldi	r18, 0x17	; 23
 510:	fc 01       	movw	r30, r24
 512:	21 83       	std	Z+1, r18	; 0x01
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB0.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */;

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc  /* CLK_PER (No Prescaling) */
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	9a e0       	ldi	r25, 0x0A	; 10
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
 51e:	80 e0       	ldi	r24, 0x00	; 0
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <_exit>:
 526:	f8 94       	cli

00000528 <__stop_program>:
 528:	ff cf       	rjmp	.-2      	; 0x528 <__stop_program>
