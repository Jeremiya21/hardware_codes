
Q2NEW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  000002d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004029  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000280f  00000000  00000000  00004459  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b88  00000000  00000000  00006c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  000077f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000018de  00000000  00000000  00007964  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cd  00000000  00000000  00009242  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000940f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  a0:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <system_init>
  ac:	08 95       	ret

000000ae <led_bright>:
 *  Author: faris
 */ 
#include "tca.h"
void led_bright(uint8_t R,uint8_t G,uint8_t B){
	
	TCA0.SINGLE.CMP0BUF = R;
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	e0 e0       	ldi	r30, 0x00	; 0
  b2:	fa e0       	ldi	r31, 0x0A	; 10
  b4:	80 af       	std	Z+56, r24	; 0x38
  b6:	91 af       	std	Z+57, r25	; 0x39

	TCA0.SINGLE.CMP1BUF = G;
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	62 af       	std	Z+58, r22	; 0x3a
  bc:	73 af       	std	Z+59, r23	; 0x3b

	TCA0.SINGLE.CMP2BUF = B;
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	44 af       	std	Z+60, r20	; 0x3c
  c2:	55 af       	std	Z+61, r21	; 0x3d
  c4:	08 95       	ret

000000c6 <main>:
#include "led.h"
int main(void)
{
	uint8_t R=100,G=200,B=222;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  c6:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		led_bright(R,G,B);
  ca:	4e ed       	ldi	r20, 0xDE	; 222
  cc:	68 ec       	ldi	r22, 0xC8	; 200
  ce:	84 e6       	ldi	r24, 0x64	; 100
  d0:	0e 94 57 00 	call	0xae	; 0xae <led_bright>
  d4:	fa cf       	rjmp	.-12     	; 0xca <main+0x4>

000000d6 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret

000000da <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  da:	40 e1       	ldi	r20, 0x10	; 16
  dc:	68 ed       	ldi	r22, 0xD8	; 216
  de:	81 e6       	ldi	r24, 0x61	; 97
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret

000000ea <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	08 95       	ret

000000ee <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 c0       	rjmp	.+16     	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  f2:	e8 2f       	mov	r30, r24
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	e0 5f       	subi	r30, 0xF0	; 240
  f8:	fb 4f       	sbci	r31, 0xFB	; 251
  fa:	90 81       	ld	r25, Z
  fc:	98 60       	ori	r25, 0x08	; 8
  fe:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	b0 f3       	brcs	.-20     	; 0xf2 <mcu_init+0x4>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 c0       	rjmp	.+16     	; 0x11a <__EEPROM_REGION_LENGTH__+0x1a>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	e0 5d       	subi	r30, 0xD0	; 208
 110:	fb 4f       	sbci	r31, 0xFB	; 251
 112:	90 81       	ld	r25, Z
 114:	98 60       	ori	r25, 0x08	; 8
 116:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 118:	8f 5f       	subi	r24, 0xFF	; 255
 11a:	88 30       	cpi	r24, 0x08	; 8
 11c:	b0 f3       	brcs	.-20     	; 0x10a <__EEPROM_REGION_LENGTH__+0xa>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	08 c0       	rjmp	.+16     	; 0x132 <__EEPROM_REGION_LENGTH__+0x32>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 122:	e8 2f       	mov	r30, r24
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e0 5b       	subi	r30, 0xB0	; 176
 128:	fb 4f       	sbci	r31, 0xFB	; 251
 12a:	90 81       	ld	r25, Z
 12c:	98 60       	ori	r25, 0x08	; 8
 12e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 130:	8f 5f       	subi	r24, 0xFF	; 255
 132:	88 30       	cpi	r24, 0x08	; 8
 134:	b0 f3       	brcs	.-20     	; 0x122 <__EEPROM_REGION_LENGTH__+0x22>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	08 c0       	rjmp	.+16     	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 13a:	e8 2f       	mov	r30, r24
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	e0 59       	subi	r30, 0x90	; 144
 140:	fb 4f       	sbci	r31, 0xFB	; 251
 142:	90 81       	ld	r25, Z
 144:	98 60       	ori	r25, 0x08	; 8
 146:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	88 30       	cpi	r24, 0x08	; 8
 14c:	b0 f3       	brcs	.-20     	; 0x13a <__EEPROM_REGION_LENGTH__+0x3a>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	08 c0       	rjmp	.+16     	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 152:	e8 2f       	mov	r30, r24
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	e0 57       	subi	r30, 0x70	; 112
 158:	fb 4f       	sbci	r31, 0xFB	; 251
 15a:	90 81       	ld	r25, Z
 15c:	98 60       	ori	r25, 0x08	; 8
 15e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	88 30       	cpi	r24, 0x08	; 8
 164:	b0 f3       	brcs	.-20     	; 0x152 <__EEPROM_REGION_LENGTH__+0x52>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	08 c0       	rjmp	.+16     	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 16a:	e8 2f       	mov	r30, r24
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e0 55       	subi	r30, 0x50	; 80
 170:	fb 4f       	sbci	r31, 0xFB	; 251
 172:	90 81       	ld	r25, Z
 174:	98 60       	ori	r25, 0x08	; 8
 176:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	88 30       	cpi	r24, 0x08	; 8
 17c:	b0 f3       	brcs	.-20     	; 0x16a <__EEPROM_REGION_LENGTH__+0x6a>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 17e:	08 95       	ret

00000180 <TIMER_0_initialization>:
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 180:	8d b1       	in	r24, 0x0d	; 13
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 186:	8c b1       	in	r24, 0x0c	; 12
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	8c b9       	out	0x0c, r24	; 12

	R0_MCU_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 18c:	e0 ee       	ldi	r30, 0xE0	; 224
 18e:	f5 e0       	ldi	r31, 0x05	; 5
 190:	84 81       	ldd	r24, Z+4	; 0x04
 192:	83 60       	ori	r24, 0x03	; 3
 194:	84 83       	std	Z+4, r24	; 0x04
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 196:	8d b1       	in	r24, 0x0d	; 13
 198:	8d 7f       	andi	r24, 0xFD	; 253
 19a:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 19c:	8c b1       	in	r24, 0x0c	; 12
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	8c b9       	out	0x0c, r24	; 12

	G0_MCU_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 1a2:	84 81       	ldd	r24, Z+4	; 0x04
 1a4:	83 60       	ori	r24, 0x03	; 3
 1a6:	84 83       	std	Z+4, r24	; 0x04
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 1a8:	8d b1       	in	r24, 0x0d	; 13
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 1ae:	8c b1       	in	r24, 0x0c	; 12
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	8c b9       	out	0x0c, r24	; 12

	B0_MCU_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA01_bm);
 1b4:	84 81       	ldd	r24, Z+4	; 0x04
 1b6:	83 60       	ori	r24, 0x03	; 3
 1b8:	84 83       	std	Z+4, r24	; 0x04

	TIMER_0_init();
 1ba:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TIMER_0_init>
 1be:	08 95       	ret

000001c0 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1c0:	0e 94 77 00 	call	0xee	; 0xee <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 1c4:	81 b1       	in	r24, 0x01	; 1
 1c6:	87 7f       	andi	r24, 0xF7	; 247
 1c8:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 1ca:	80 b1       	in	r24, 0x00	; 0
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 1d0:	0e 94 6d 00 	call	0xda	; 0xda <CLKCTRL_init>

	TIMER_0_initialization();
 1d4:	0e 94 c0 00 	call	0x180	; 0x180 <TIMER_0_initialization>

	CPUINT_init();
 1d8:	0e 94 75 00 	call	0xea	; 0xea <CPUINT_init>

	SLPCTRL_init();
 1dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SLPCTRL_init>

	BOD_init();
 1e0:	0e 94 6b 00 	call	0xd6	; 0xd6 <BOD_init>
 1e4:	08 95       	ret

000001e6 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1e6:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1e8:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1ea:	40 83       	st	Z, r20
	ret                             // Return to caller
 1ec:	08 95       	ret

000001ee <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret

000001f2 <TIMER_0_init>:

	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 1f2:	e0 e0       	ldi	r30, 0x00	; 0
 1f4:	fa e0       	ldi	r31, 0x0A	; 10
 1f6:	83 e7       	ldi	r24, 0x73	; 115
 1f8:	81 83       	std	Z+1, r24	; 0x01
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 0xff; /* Period: 0xff */
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	86 a3       	std	Z+38, r24	; 0x26
 200:	97 a3       	std	Z+39, r25	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
