
Q3NEW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000330  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003251  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002740  00000000  00000000  000036d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ae6  00000000  00000000  00005e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00006900  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016a5  00000000  00000000  00006a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014f  00000000  00000000  00008119  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00008268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  a0:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <system_init>
  ac:	08 95       	ret

000000ae <buzzer>:
 *  Author: faris
 */ 
#include "tcb.h"
#include "clock_config.h"
void buzzer(uint16_t input_freq){
	uint8_t count=F_CPU/input_freq;
  ae:	9c 01       	movw	r18, r24
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	64 eb       	ldi	r22, 0xB4	; 180
  b6:	74 ec       	ldi	r23, 0xC4	; 196
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <__divmodsi4>
	TCB0_CCMPL=count;
  c0:	20 93 8c 0a 	sts	0x0A8C, r18	; 0x800a8c <__TEXT_REGION_LENGTH__+0x7f4a8c>
	TCB0_CCMPH=count/2;
  c4:	26 95       	lsr	r18
  c6:	20 93 8d 0a 	sts	0x0A8D, r18	; 0x800a8d <__TEXT_REGION_LENGTH__+0x7f4a8d>
  ca:	08 95       	ret

000000cc <main>:
#include <atmel_start.h>
#include "buzzer.h"
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  cc:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	uint16_t input_freq=2000;
	/* Replace with your application code */
	while (1) {
		buzzer(input_freq);
  d0:	80 ed       	ldi	r24, 0xD0	; 208
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	0e 94 57 00 	call	0xae	; 0xae <buzzer>
  d8:	fb cf       	rjmp	.-10     	; 0xd0 <main+0x4>

000000da <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret

000000de <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  de:	4b e0       	ldi	r20, 0x0B	; 11
  e0:	68 ed       	ldi	r22, 0xD8	; 216
  e2:	81 e6       	ldi	r24, 0x61	; 97
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 de 00 	call	0x1bc	; 0x1bc <protected_write_io>
  ea:	40 e8       	ldi	r20, 0x80	; 128
  ec:	68 ed       	ldi	r22, 0xD8	; 216
  ee:	80 e6       	ldi	r24, 0x60	; 96
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 de 00 	call	0x1bc	; 0x1bc <protected_write_io>
	                 | 1 << CLKCTRL_CLKOUT_bp /* System clock out: enabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret

000000fa <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 95       	ret

000000fe <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	08 c0       	rjmp	.+16     	; 0x112 <__EEPROM_REGION_LENGTH__+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 102:	e8 2f       	mov	r30, r24
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	e0 5f       	subi	r30, 0xF0	; 240
 108:	fb 4f       	sbci	r31, 0xFB	; 251
 10a:	90 81       	ld	r25, Z
 10c:	98 60       	ori	r25, 0x08	; 8
 10e:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	88 30       	cpi	r24, 0x08	; 8
 114:	b0 f3       	brcs	.-20     	; 0x102 <__EEPROM_REGION_LENGTH__+0x2>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	08 c0       	rjmp	.+16     	; 0x12a <__EEPROM_REGION_LENGTH__+0x2a>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 11a:	e8 2f       	mov	r30, r24
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	e0 5d       	subi	r30, 0xD0	; 208
 120:	fb 4f       	sbci	r31, 0xFB	; 251
 122:	90 81       	ld	r25, Z
 124:	98 60       	ori	r25, 0x08	; 8
 126:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	b0 f3       	brcs	.-20     	; 0x11a <__EEPROM_REGION_LENGTH__+0x1a>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	08 c0       	rjmp	.+16     	; 0x142 <__EEPROM_REGION_LENGTH__+0x42>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 132:	e8 2f       	mov	r30, r24
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e0 5b       	subi	r30, 0xB0	; 176
 138:	fb 4f       	sbci	r31, 0xFB	; 251
 13a:	90 81       	ld	r25, Z
 13c:	98 60       	ori	r25, 0x08	; 8
 13e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	88 30       	cpi	r24, 0x08	; 8
 144:	b0 f3       	brcs	.-20     	; 0x132 <__EEPROM_REGION_LENGTH__+0x32>
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 c0       	rjmp	.+16     	; 0x15a <__EEPROM_REGION_LENGTH__+0x5a>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 14a:	e8 2f       	mov	r30, r24
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	e0 59       	subi	r30, 0x90	; 144
 150:	fb 4f       	sbci	r31, 0xFB	; 251
 152:	90 81       	ld	r25, Z
 154:	98 60       	ori	r25, 0x08	; 8
 156:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 158:	8f 5f       	subi	r24, 0xFF	; 255
 15a:	88 30       	cpi	r24, 0x08	; 8
 15c:	b0 f3       	brcs	.-20     	; 0x14a <__EEPROM_REGION_LENGTH__+0x4a>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	08 c0       	rjmp	.+16     	; 0x172 <__EEPROM_REGION_LENGTH__+0x72>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 57       	subi	r30, 0x70	; 112
 168:	fb 4f       	sbci	r31, 0xFB	; 251
 16a:	90 81       	ld	r25, Z
 16c:	98 60       	ori	r25, 0x08	; 8
 16e:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	b0 f3       	brcs	.-20     	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 c0       	rjmp	.+16     	; 0x18a <__EEPROM_REGION_LENGTH__+0x8a>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 17a:	e8 2f       	mov	r30, r24
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	e0 55       	subi	r30, 0x50	; 80
 180:	fb 4f       	sbci	r31, 0xFB	; 251
 182:	90 81       	ld	r25, Z
 184:	98 60       	ori	r25, 0x08	; 8
 186:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	88 30       	cpi	r24, 0x08	; 8
 18c:	b0 f3       	brcs	.-20     	; 0x17a <__EEPROM_REGION_LENGTH__+0x7a>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 18e:	08 95       	ret

00000190 <TIMER_0_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 190:	81 b1       	in	r24, 0x01	; 1
 192:	8b 7f       	andi	r24, 0xFB	; 251
 194:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 196:	80 b1       	in	r24, 0x00	; 0
 198:	84 60       	ori	r24, 0x04	; 4
 19a:	80 b9       	out	0x00, r24	; 0
	    // <true"> High
	    false);

	BUZZER_MCU_set_dir(PORT_DIR_OUT);

	TIMER_0_init();
 19c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <TIMER_0_init>
 1a0:	08 95       	ret

000001a2 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1a2:	0e 94 7f 00 	call	0xfe	; 0xfe <mcu_init>

	CLKCTRL_init();
 1a6:	0e 94 6f 00 	call	0xde	; 0xde <CLKCTRL_init>

	TIMER_0_initialization();
 1aa:	0e 94 c8 00 	call	0x190	; 0x190 <TIMER_0_initialization>

	CPUINT_init();
 1ae:	0e 94 7d 00 	call	0xfa	; 0xfa <CPUINT_init>

	SLPCTRL_init();
 1b2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SLPCTRL_init>

	BOD_init();
 1b6:	0e 94 6d 00 	call	0xda	; 0xda <BOD_init>
 1ba:	08 95       	ret

000001bc <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1bc:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1be:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1c0:	40 83       	st	Z, r20
	ret                             // Return to caller
 1c2:	08 95       	ret

000001c4 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	08 95       	ret

000001c8 <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCB0.CCMP = 0xff; /* Compare or Capture: 0xff */
 1c8:	e0 e8       	ldi	r30, 0x80	; 128
 1ca:	fa e0       	ldi	r31, 0x0A	; 10
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	84 87       	std	Z+12, r24	; 0x0c
 1d2:	95 87       	std	Z+13, r25	; 0x0d

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 1d4:	87 e1       	ldi	r24, 0x17	; 23
 1d6:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB0.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */;

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc  /* CLK_PER (No Prescaling) */
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 83       	st	Z, r24
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
}
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret

000001e0 <__divmodsi4>:
 1e0:	05 2e       	mov	r0, r21
 1e2:	97 fb       	bst	r25, 7
 1e4:	1e f4       	brtc	.+6      	; 0x1ec <__divmodsi4+0xc>
 1e6:	00 94       	com	r0
 1e8:	0e 94 07 01 	call	0x20e	; 0x20e <__negsi2>
 1ec:	57 fd       	sbrc	r21, 7
 1ee:	07 d0       	rcall	.+14     	; 0x1fe <__divmodsi4_neg2>
 1f0:	0e 94 0f 01 	call	0x21e	; 0x21e <__udivmodsi4>
 1f4:	07 fc       	sbrc	r0, 7
 1f6:	03 d0       	rcall	.+6      	; 0x1fe <__divmodsi4_neg2>
 1f8:	4e f4       	brtc	.+18     	; 0x20c <__divmodsi4_exit>
 1fa:	0c 94 07 01 	jmp	0x20e	; 0x20e <__negsi2>

000001fe <__divmodsi4_neg2>:
 1fe:	50 95       	com	r21
 200:	40 95       	com	r20
 202:	30 95       	com	r19
 204:	21 95       	neg	r18
 206:	3f 4f       	sbci	r19, 0xFF	; 255
 208:	4f 4f       	sbci	r20, 0xFF	; 255
 20a:	5f 4f       	sbci	r21, 0xFF	; 255

0000020c <__divmodsi4_exit>:
 20c:	08 95       	ret

0000020e <__negsi2>:
 20e:	90 95       	com	r25
 210:	80 95       	com	r24
 212:	70 95       	com	r23
 214:	61 95       	neg	r22
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	8f 4f       	sbci	r24, 0xFF	; 255
 21a:	9f 4f       	sbci	r25, 0xFF	; 255
 21c:	08 95       	ret

0000021e <__udivmodsi4>:
 21e:	a1 e2       	ldi	r26, 0x21	; 33
 220:	1a 2e       	mov	r1, r26
 222:	aa 1b       	sub	r26, r26
 224:	bb 1b       	sub	r27, r27
 226:	fd 01       	movw	r30, r26
 228:	0d c0       	rjmp	.+26     	; 0x244 <__udivmodsi4_ep>

0000022a <__udivmodsi4_loop>:
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	ee 1f       	adc	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	a2 17       	cp	r26, r18
 234:	b3 07       	cpc	r27, r19
 236:	e4 07       	cpc	r30, r20
 238:	f5 07       	cpc	r31, r21
 23a:	20 f0       	brcs	.+8      	; 0x244 <__udivmodsi4_ep>
 23c:	a2 1b       	sub	r26, r18
 23e:	b3 0b       	sbc	r27, r19
 240:	e4 0b       	sbc	r30, r20
 242:	f5 0b       	sbc	r31, r21

00000244 <__udivmodsi4_ep>:
 244:	66 1f       	adc	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	88 1f       	adc	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	1a 94       	dec	r1
 24e:	69 f7       	brne	.-38     	; 0x22a <__udivmodsi4_loop>
 250:	60 95       	com	r22
 252:	70 95       	com	r23
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	9b 01       	movw	r18, r22
 25a:	ac 01       	movw	r20, r24
 25c:	bd 01       	movw	r22, r26
 25e:	cf 01       	movw	r24, r30
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
