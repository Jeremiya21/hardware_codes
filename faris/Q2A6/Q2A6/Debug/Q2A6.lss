
Q2A6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  000002d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003fa3  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002820  00000000  00000000  000043d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b7d  00000000  00000000  00006bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00007770  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000191b  00000000  00000000  000078e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001cf  00000000  00000000  000091ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000093ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <system_init>
  ac:	08 95       	ret

000000ae <led_bright>:
 *  Author: faris
 */ 
#include "tca.h"
void led_bright(uint8_t R,uint8_t G,uint8_t B){
	
	TCA0.SINGLE.CMP0 = R; /* Compare Register 0: 0x0 */
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	e0 e0       	ldi	r30, 0x00	; 0
  b2:	fa e0       	ldi	r31, 0x0A	; 10
  b4:	80 a7       	std	Z+40, r24	; 0x28
  b6:	91 a7       	std	Z+41, r25	; 0x29

	TCA0.SINGLE.CMP1 = G; /* Compare Register 1: 0x0 */
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	62 a7       	std	Z+42, r22	; 0x2a
  bc:	73 a7       	std	Z+43, r23	; 0x2b

	TCA0.SINGLE.CMP2 = B; /* Compare Register 2: 0x0 */
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	44 a7       	std	Z+44, r20	; 0x2c
  c2:	55 a7       	std	Z+45, r21	; 0x2d
  c4:	08 95       	ret

000000c6 <main>:
#include "led.h"
int main(void)
{
	uint8_t R=100,G=200,B=222;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  c6:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>

	/* Replace with your application code */
	while (1) {
		led_bright(R,G,B);
  ca:	4e ed       	ldi	r20, 0xDE	; 222
  cc:	68 ec       	ldi	r22, 0xC8	; 200
  ce:	84 e6       	ldi	r24, 0x64	; 100
  d0:	0e 94 57 00 	call	0xae	; 0xae <led_bright>
  d4:	fa cf       	rjmp	.-12     	; 0xca <main+0x4>

000000d6 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret

000000da <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  da:	40 e1       	ldi	r20, 0x10	; 16
  dc:	68 ed       	ldi	r22, 0xD8	; 216
  de:	81 e6       	ldi	r24, 0x61	; 97
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <protected_write_io>
  e6:	40 e8       	ldi	r20, 0x80	; 128
  e8:	68 ed       	ldi	r22, 0xD8	; 216
  ea:	80 e6       	ldi	r24, 0x60	; 96
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <protected_write_io>
	                 | 1 << CLKCTRL_CLKOUT_bp /* System clock out: enabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret

000000f6 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	08 95       	ret

000000fa <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	08 c0       	rjmp	.+16     	; 0x10e <__EEPROM_REGION_LENGTH__+0xe>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  fe:	e8 2f       	mov	r30, r24
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e0 5f       	subi	r30, 0xF0	; 240
 104:	fb 4f       	sbci	r31, 0xFB	; 251
 106:	90 81       	ld	r25, Z
 108:	98 60       	ori	r25, 0x08	; 8
 10a:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	88 30       	cpi	r24, 0x08	; 8
 110:	b0 f3       	brcs	.-20     	; 0xfe <mcu_init+0x4>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 c0       	rjmp	.+16     	; 0x126 <__EEPROM_REGION_LENGTH__+0x26>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 116:	e8 2f       	mov	r30, r24
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e0 5d       	subi	r30, 0xD0	; 208
 11c:	fb 4f       	sbci	r31, 0xFB	; 251
 11e:	90 81       	ld	r25, Z
 120:	98 60       	ori	r25, 0x08	; 8
 122:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 124:	8f 5f       	subi	r24, 0xFF	; 255
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	b0 f3       	brcs	.-20     	; 0x116 <__EEPROM_REGION_LENGTH__+0x16>
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 c0       	rjmp	.+16     	; 0x13e <__EEPROM_REGION_LENGTH__+0x3e>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 12e:	e8 2f       	mov	r30, r24
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	e0 5b       	subi	r30, 0xB0	; 176
 134:	fb 4f       	sbci	r31, 0xFB	; 251
 136:	90 81       	ld	r25, Z
 138:	98 60       	ori	r25, 0x08	; 8
 13a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 13c:	8f 5f       	subi	r24, 0xFF	; 255
 13e:	88 30       	cpi	r24, 0x08	; 8
 140:	b0 f3       	brcs	.-20     	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 c0       	rjmp	.+16     	; 0x156 <__EEPROM_REGION_LENGTH__+0x56>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 146:	e8 2f       	mov	r30, r24
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	e0 59       	subi	r30, 0x90	; 144
 14c:	fb 4f       	sbci	r31, 0xFB	; 251
 14e:	90 81       	ld	r25, Z
 150:	98 60       	ori	r25, 0x08	; 8
 152:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	b0 f3       	brcs	.-20     	; 0x146 <__EEPROM_REGION_LENGTH__+0x46>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	08 c0       	rjmp	.+16     	; 0x16e <__EEPROM_REGION_LENGTH__+0x6e>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 15e:	e8 2f       	mov	r30, r24
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	e0 57       	subi	r30, 0x70	; 112
 164:	fb 4f       	sbci	r31, 0xFB	; 251
 166:	90 81       	ld	r25, Z
 168:	98 60       	ori	r25, 0x08	; 8
 16a:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	88 30       	cpi	r24, 0x08	; 8
 170:	b0 f3       	brcs	.-20     	; 0x15e <__EEPROM_REGION_LENGTH__+0x5e>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 c0       	rjmp	.+16     	; 0x186 <__EEPROM_REGION_LENGTH__+0x86>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 176:	e8 2f       	mov	r30, r24
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	e0 55       	subi	r30, 0x50	; 80
 17c:	fb 4f       	sbci	r31, 0xFB	; 251
 17e:	90 81       	ld	r25, Z
 180:	98 60       	ori	r25, 0x08	; 8
 182:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 184:	8f 5f       	subi	r24, 0xFF	; 255
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	b0 f3       	brcs	.-20     	; 0x176 <__EEPROM_REGION_LENGTH__+0x76>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 18a:	08 95       	ret

0000018c <TIMER_0_initialization>:
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 18c:	85 b3       	in	r24, 0x15	; 21
 18e:	87 7f       	andi	r24, 0xF7	; 247
 190:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 192:	84 b3       	in	r24, 0x14	; 20
 194:	88 60       	ori	r24, 0x08	; 8
 196:	84 bb       	out	0x14, r24	; 20

	R3_MCU_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA02_bm);
 198:	e0 ee       	ldi	r30, 0xE0	; 224
 19a:	f5 e0       	ldi	r31, 0x05	; 5
 19c:	84 81       	ldd	r24, Z+4	; 0x04
 19e:	85 60       	ori	r24, 0x05	; 5
 1a0:	84 83       	std	Z+4, r24	; 0x04
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 1a2:	85 b3       	in	r24, 0x15	; 21
 1a4:	8f 7e       	andi	r24, 0xEF	; 239
 1a6:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 1a8:	84 b3       	in	r24, 0x14	; 20
 1aa:	80 61       	ori	r24, 0x10	; 16
 1ac:	84 bb       	out	0x14, r24	; 20

	G3_MCU_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA02_bm);
 1ae:	84 81       	ldd	r24, Z+4	; 0x04
 1b0:	85 60       	ori	r24, 0x05	; 5
 1b2:	84 83       	std	Z+4, r24	; 0x04
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 1b4:	85 b3       	in	r24, 0x15	; 21
 1b6:	8f 7d       	andi	r24, 0xDF	; 223
 1b8:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 1ba:	84 b3       	in	r24, 0x14	; 20
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	84 bb       	out	0x14, r24	; 20

	B3_MCU_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCAROUTEA |= (PORTMUX_TCA00_bm | PORTMUX_TCA02_bm);
 1c0:	84 81       	ldd	r24, Z+4	; 0x04
 1c2:	85 60       	ori	r24, 0x05	; 5
 1c4:	84 83       	std	Z+4, r24	; 0x04

	TIMER_0_init();
 1c6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <TIMER_0_init>
 1ca:	08 95       	ret

000001cc <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 1cc:	0e 94 7d 00 	call	0xfa	; 0xfa <mcu_init>

	CLKCTRL_init();
 1d0:	0e 94 6d 00 	call	0xda	; 0xda <CLKCTRL_init>

	TIMER_0_initialization();
 1d4:	0e 94 c6 00 	call	0x18c	; 0x18c <TIMER_0_initialization>

	CPUINT_init();
 1d8:	0e 94 7b 00 	call	0xf6	; 0xf6 <CPUINT_init>

	SLPCTRL_init();
 1dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <SLPCTRL_init>

	BOD_init();
 1e0:	0e 94 6b 00 	call	0xd6	; 0xd6 <BOD_init>
 1e4:	08 95       	ret

000001e6 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1e6:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1e8:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1ea:	40 83       	st	Z, r20
	ret                             // Return to caller
 1ec:	08 95       	ret

000001ee <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	08 95       	ret

000001f2 <TIMER_0_init>:

	// TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */

	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	TCA0.SINGLE.CNT = 0xff; /* Count: 0xff */
 1f2:	e0 e0       	ldi	r30, 0x00	; 0
 1f4:	fa e0       	ldi	r31, 0x0A	; 10
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	80 a3       	std	Z+32, r24	; 0x20
 1fc:	91 a3       	std	Z+33, r25	; 0x21

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 1fe:	83 e7       	ldi	r24, 0x73	; 115
 200:	81 83       	std	Z+1, r24	; 0x01
	                    | 1 << TCA_SINGLE_CMP0EN_bp         /* Compare 0 Enable: enabled */
	                    | 1 << TCA_SINGLE_CMP1EN_bp         /* Compare 1 Enable: enabled */
	                    | 1 << TCA_SINGLE_CMP2EN_bp         /* Compare 2 Enable: enabled */
	                    | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /*  */

	TCA0.SINGLE.CTRLC = 1 << TCA_SINGLE_CMP0OV_bp    /* Compare 0 Waveform Output Value: enabled */
 202:	87 e0       	ldi	r24, 0x07	; 7
 204:	82 83       	std	Z+2, r24	; 0x02
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	// TCA0.SINGLE.PER = 0xffff; /* Period: 0xffff */

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 83       	st	Z, r24
	                    | 1 << TCA_SINGLE_ENABLE_bp /* Module Enable: enabled */;

	return 0;
}
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
