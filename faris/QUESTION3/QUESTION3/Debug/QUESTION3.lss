
QUESTION3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c86  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002f52  00000000  00000000  00000edc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000261f  00000000  00000000  00003e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cf5  00000000  00000000  0000644d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e0  00000000  00000000  00007144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013f7  00000000  00000000  00007524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d8  00000000  00000000  0000891b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00008ff3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a0:	0c 94 41 06 	jmp	0xc82	; 0xc82 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 c1 02 	call	0x582	; 0x582 <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <main>:
#include <atmel_start.h>
#include "toggle.h"

int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	26 97       	sbiw	r28, 0x06	; 6
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  ca:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	int delay1=100,delay2=200,delay3=300;
  ce:	84 e6       	ldi	r24, 0x64	; 100
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	9a 83       	std	Y+2, r25	; 0x02
  d6:	88 ec       	ldi	r24, 0xC8	; 200
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	8b 83       	std	Y+3, r24	; 0x03
  dc:	9c 83       	std	Y+4, r25	; 0x04
  de:	8c e2       	ldi	r24, 0x2C	; 44
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	8d 83       	std	Y+5, r24	; 0x05
  e4:	9e 83       	std	Y+6, r25	; 0x06
	
	/* Replace with your application code */
	while (1) {
		toggle(delay1,delay2,delay3);
  e6:	4d 81       	ldd	r20, Y+5	; 0x05
  e8:	5e 81       	ldd	r21, Y+6	; 0x06
  ea:	2b 81       	ldd	r18, Y+3	; 0x03
  ec:	3c 81       	ldd	r19, Y+4	; 0x04
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	b9 01       	movw	r22, r18
  f4:	0e 94 33 03 	call	0x666	; 0x666 <toggle>
	}
  f8:	f6 cf       	rjmp	.-20     	; 0xe6 <main+0x2a>

000000fa <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 112:	80 e0       	ldi	r24, 0x00	; 0
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 122:	80 e0       	ldi	r24, 0x00	; 0
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	00 d0       	rcall	.+0      	; 0x130 <PORTA_set_pin_dir+0x6>
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
 134:	89 83       	std	Y+1, r24	; 0x01
 136:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 138:	8a 81       	ldd	r24, Y+2	; 0x02
 13a:	88 2f       	mov	r24, r24
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	91 05       	cpc	r25, r1
 142:	e1 f0       	breq	.+56     	; 0x17c <PORTA_set_pin_dir+0x52>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	91 05       	cpc	r25, r1
 148:	71 f1       	breq	.+92     	; 0x1a6 <PORTA_set_pin_dir+0x7c>
 14a:	89 2b       	or	r24, r25
 14c:	09 f0       	breq	.+2      	; 0x150 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 14e:	3b c0       	rjmp	.+118    	; 0x1c6 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	68 2f       	mov	r22, r24
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	48 2f       	mov	r20, r24
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <PORTA_set_pin_dir+0x44>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	4a 95       	dec	r20
 170:	e2 f7       	brpl	.-8      	; 0x16a <PORTA_set_pin_dir+0x40>
 172:	80 95       	com	r24
 174:	86 23       	and	r24, r22
 176:	f9 01       	movw	r30, r18
 178:	80 83       	st	Z, r24
		break;
 17a:	25 c0       	rjmp	.+74     	; 0x1c6 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	80 81       	ld	r24, Z
 188:	68 2f       	mov	r22, r24
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	48 2f       	mov	r20, r24
 18e:	50 e0       	ldi	r21, 0x00	; 0
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <PORTA_set_pin_dir+0x70>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	4a 95       	dec	r20
 19c:	e2 f7       	brpl	.-8      	; 0x196 <PORTA_set_pin_dir+0x6c>
 19e:	86 2b       	or	r24, r22
 1a0:	f9 01       	movw	r30, r18
 1a2:	80 83       	st	Z, r24
		break;
 1a4:	10 c0       	rjmp	.+32     	; 0x1c6 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	88 2f       	mov	r24, r24
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 5f       	subi	r24, 0xF0	; 240
 1ae:	9b 4f       	sbci	r25, 0xFB	; 251
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	22 2f       	mov	r18, r18
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	20 5f       	subi	r18, 0xF0	; 240
 1b8:	3b 4f       	sbci	r19, 0xFB	; 251
 1ba:	f9 01       	movw	r30, r18
 1bc:	20 81       	ld	r18, Z
 1be:	28 60       	ori	r18, 0x08	; 8
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
		break;
 1c4:	00 00       	nop
	default:
		break;
	}
}
 1c6:	00 00       	nop
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <PORTA_set_pin_level+0x6>
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	89 83       	std	Y+1, r24	; 0x01
 1de:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 1e0:	8a 81       	ldd	r24, Y+2	; 0x02
 1e2:	88 23       	and	r24, r24
 1e4:	a9 f0       	breq	.+42     	; 0x210 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	fc 01       	movw	r30, r24
 1f0:	81 81       	ldd	r24, Z+1	; 0x01
 1f2:	68 2f       	mov	r22, r24
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	48 2f       	mov	r20, r24
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <PORTA_set_pin_level+0x32>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	4a 95       	dec	r20
 206:	e2 f7       	brpl	.-8      	; 0x200 <PORTA_set_pin_level+0x2e>
 208:	86 2b       	or	r24, r22
 20a:	f9 01       	movw	r30, r18
 20c:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
 20e:	15 c0       	rjmp	.+42     	; 0x23a <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	81 81       	ldd	r24, Z+1	; 0x01
 21c:	68 2f       	mov	r22, r24
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	48 2f       	mov	r20, r24
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <PORTA_set_pin_level+0x5c>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	4a 95       	dec	r20
 230:	e2 f7       	brpl	.-8      	; 0x22a <PORTA_set_pin_level+0x58>
 232:	80 95       	com	r24
 234:	86 23       	and	r24, r22
 236:	f9 01       	movw	r30, r18
 238:	81 83       	std	Z+1, r24	; 0x01
	}
}
 23a:	00 00       	nop
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	00 d0       	rcall	.+0      	; 0x24c <PORTD_set_pin_dir+0x6>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	88 2f       	mov	r24, r24
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 05       	cpc	r25, r1
 25e:	e1 f0       	breq	.+56     	; 0x298 <PORTD_set_pin_dir+0x52>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	91 05       	cpc	r25, r1
 264:	71 f1       	breq	.+92     	; 0x2c2 <PORTD_set_pin_dir+0x7c>
 266:	89 2b       	or	r24, r25
 268:	09 f0       	breq	.+2      	; 0x26c <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 26a:	3b c0       	rjmp	.+118    	; 0x2e2 <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	2c e0       	ldi	r18, 0x0C	; 12
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	f9 01       	movw	r30, r18
 276:	20 81       	ld	r18, Z
 278:	62 2f       	mov	r22, r18
 27a:	29 81       	ldd	r18, Y+1	; 0x01
 27c:	42 2f       	mov	r20, r18
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	21 e0       	ldi	r18, 0x01	; 1
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <PORTD_set_pin_dir+0x44>
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	4a 95       	dec	r20
 28c:	e2 f7       	brpl	.-8      	; 0x286 <PORTD_set_pin_dir+0x40>
 28e:	20 95       	com	r18
 290:	26 23       	and	r18, r22
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
		break;
 296:	25 c0       	rjmp	.+74     	; 0x2e2 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 298:	8c e0       	ldi	r24, 0x0C	; 12
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	2c e0       	ldi	r18, 0x0C	; 12
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	f9 01       	movw	r30, r18
 2a2:	20 81       	ld	r18, Z
 2a4:	62 2f       	mov	r22, r18
 2a6:	29 81       	ldd	r18, Y+1	; 0x01
 2a8:	42 2f       	mov	r20, r18
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <PORTD_set_pin_dir+0x70>
 2b2:	22 0f       	add	r18, r18
 2b4:	33 1f       	adc	r19, r19
 2b6:	4a 95       	dec	r20
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <PORTD_set_pin_dir+0x6c>
 2ba:	26 2b       	or	r18, r22
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
		break;
 2c0:	10 c0       	rjmp	.+32     	; 0x2e2 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	88 2f       	mov	r24, r24
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	80 59       	subi	r24, 0x90	; 144
 2ca:	9b 4f       	sbci	r25, 0xFB	; 251
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	22 2f       	mov	r18, r18
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	20 59       	subi	r18, 0x90	; 144
 2d4:	3b 4f       	sbci	r19, 0xFB	; 251
 2d6:	f9 01       	movw	r30, r18
 2d8:	20 81       	ld	r18, Z
 2da:	28 60       	ori	r18, 0x08	; 8
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
		break;
 2e0:	00 00       	nop
	default:
		break;
	}
}
 2e2:	00 00       	nop
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <PORTD_set_pin_level+0x6>
 2f4:	cd b7       	in	r28, 0x3d	; 61
 2f6:	de b7       	in	r29, 0x3e	; 62
 2f8:	89 83       	std	Y+1, r24	; 0x01
 2fa:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	88 23       	and	r24, r24
 300:	a9 f0       	breq	.+42     	; 0x32c <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	2c e0       	ldi	r18, 0x0C	; 12
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	f9 01       	movw	r30, r18
 30c:	21 81       	ldd	r18, Z+1	; 0x01
 30e:	62 2f       	mov	r22, r18
 310:	29 81       	ldd	r18, Y+1	; 0x01
 312:	42 2f       	mov	r20, r18
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <PORTD_set_pin_level+0x32>
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	4a 95       	dec	r20
 322:	e2 f7       	brpl	.-8      	; 0x31c <PORTD_set_pin_level+0x2e>
 324:	26 2b       	or	r18, r22
 326:	fc 01       	movw	r30, r24
 328:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
 32a:	15 c0       	rjmp	.+42     	; 0x356 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 32c:	8c e0       	ldi	r24, 0x0C	; 12
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	2c e0       	ldi	r18, 0x0C	; 12
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	21 81       	ldd	r18, Z+1	; 0x01
 338:	62 2f       	mov	r22, r18
 33a:	29 81       	ldd	r18, Y+1	; 0x01
 33c:	42 2f       	mov	r20, r18
 33e:	50 e0       	ldi	r21, 0x00	; 0
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <PORTD_set_pin_level+0x5c>
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	4a 95       	dec	r20
 34c:	e2 f7       	brpl	.-8      	; 0x346 <PORTD_set_pin_level+0x58>
 34e:	20 95       	com	r18
 350:	26 23       	and	r18, r22
 352:	fc 01       	movw	r30, r24
 354:	21 83       	std	Z+1, r18	; 0x01
	}
}
 356:	00 00       	nop
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	1f 92       	push	r1
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
 36e:	69 81       	ldd	r22, Y+1	; 0x01
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 95 00 	call	0x12a	; 0x12a <PORTA_set_pin_dir>
}
 376:	00 00       	nop
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	08 95       	ret

00000380 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	1f 92       	push	r1
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
 38c:	69 81       	ldd	r22, Y+1	; 0x01
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <PORTA_set_pin_level>
}
 394:	00 00       	nop
 396:	0f 90       	pop	r0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	1f 92       	push	r1
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
 3aa:	69 81       	ldd	r22, Y+1	; 0x01
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 23 01 	call	0x246	; 0x246 <PORTD_set_pin_dir>
}
 3b2:	00 00       	nop
 3b4:	0f 90       	pop	r0
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	1f 92       	push	r1
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
 3c8:	69 81       	ldd	r22, Y+1	; 0x01
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <PORTD_set_pin_level>
}
 3d0:	00 00       	nop
 3d2:	0f 90       	pop	r0
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	1f 92       	push	r1
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
 3e6:	69 81       	ldd	r22, Y+1	; 0x01
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 23 01 	call	0x246	; 0x246 <PORTD_set_pin_dir>
}
 3ee:	00 00       	nop
 3f0:	0f 90       	pop	r0
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	1f 92       	push	r1
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
 404:	69 81       	ldd	r22, Y+1	; 0x01
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	0e 94 77 01 	call	0x2ee	; 0x2ee <PORTD_set_pin_level>
}
 40c:	00 00       	nop
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	1f 92       	push	r1
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
 422:	69 81       	ldd	r22, Y+1	; 0x01
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 23 01 	call	0x246	; 0x246 <PORTD_set_pin_dir>
}
 42a:	00 00       	nop
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	1f 92       	push	r1
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
 440:	69 81       	ldd	r22, Y+1	; 0x01
 442:	82 e0       	ldi	r24, 0x02	; 2
 444:	0e 94 77 01 	call	0x2ee	; 0x2ee <PORTD_set_pin_level>
}
 448:	00 00       	nop
 44a:	0f 90       	pop	r0
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	26 97       	sbiw	r28, 0x06	; 6
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 460:	19 82       	std	Y+1, r1	; 0x01
 462:	12 c0       	rjmp	.+36     	; 0x488 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	88 2f       	mov	r24, r24
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	80 5f       	subi	r24, 0xF0	; 240
 46c:	9b 4f       	sbci	r25, 0xFB	; 251
 46e:	29 81       	ldd	r18, Y+1	; 0x01
 470:	22 2f       	mov	r18, r18
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	20 5f       	subi	r18, 0xF0	; 240
 476:	3b 4f       	sbci	r19, 0xFB	; 251
 478:	f9 01       	movw	r30, r18
 47a:	20 81       	ld	r18, Z
 47c:	28 60       	ori	r18, 0x08	; 8
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	8f 5f       	subi	r24, 0xFF	; 255
 486:	89 83       	std	Y+1, r24	; 0x01
 488:	89 81       	ldd	r24, Y+1	; 0x01
 48a:	88 30       	cpi	r24, 0x08	; 8
 48c:	58 f3       	brcs	.-42     	; 0x464 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 48e:	1a 82       	std	Y+2, r1	; 0x02
 490:	12 c0       	rjmp	.+36     	; 0x4b6 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 492:	8a 81       	ldd	r24, Y+2	; 0x02
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	80 5d       	subi	r24, 0xD0	; 208
 49a:	9b 4f       	sbci	r25, 0xFB	; 251
 49c:	2a 81       	ldd	r18, Y+2	; 0x02
 49e:	22 2f       	mov	r18, r18
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	20 5d       	subi	r18, 0xD0	; 208
 4a4:	3b 4f       	sbci	r19, 0xFB	; 251
 4a6:	f9 01       	movw	r30, r18
 4a8:	20 81       	ld	r18, Z
 4aa:	28 60       	ori	r18, 0x08	; 8
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	8a 83       	std	Y+2, r24	; 0x02
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	88 30       	cpi	r24, 0x08	; 8
 4ba:	58 f3       	brcs	.-42     	; 0x492 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 4bc:	1b 82       	std	Y+3, r1	; 0x03
 4be:	12 c0       	rjmp	.+36     	; 0x4e4 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	80 5b       	subi	r24, 0xB0	; 176
 4c8:	9b 4f       	sbci	r25, 0xFB	; 251
 4ca:	2b 81       	ldd	r18, Y+3	; 0x03
 4cc:	22 2f       	mov	r18, r18
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	20 5b       	subi	r18, 0xB0	; 176
 4d2:	3b 4f       	sbci	r19, 0xFB	; 251
 4d4:	f9 01       	movw	r30, r18
 4d6:	20 81       	ld	r18, Z
 4d8:	28 60       	ori	r18, 0x08	; 8
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 4de:	8b 81       	ldd	r24, Y+3	; 0x03
 4e0:	8f 5f       	subi	r24, 0xFF	; 255
 4e2:	8b 83       	std	Y+3, r24	; 0x03
 4e4:	8b 81       	ldd	r24, Y+3	; 0x03
 4e6:	88 30       	cpi	r24, 0x08	; 8
 4e8:	58 f3       	brcs	.-42     	; 0x4c0 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 4ea:	1c 82       	std	Y+4, r1	; 0x04
 4ec:	12 c0       	rjmp	.+36     	; 0x512 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 4ee:	8c 81       	ldd	r24, Y+4	; 0x04
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	80 59       	subi	r24, 0x90	; 144
 4f6:	9b 4f       	sbci	r25, 0xFB	; 251
 4f8:	2c 81       	ldd	r18, Y+4	; 0x04
 4fa:	22 2f       	mov	r18, r18
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	20 59       	subi	r18, 0x90	; 144
 500:	3b 4f       	sbci	r19, 0xFB	; 251
 502:	f9 01       	movw	r30, r18
 504:	20 81       	ld	r18, Z
 506:	28 60       	ori	r18, 0x08	; 8
 508:	fc 01       	movw	r30, r24
 50a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 50c:	8c 81       	ldd	r24, Y+4	; 0x04
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	8c 83       	std	Y+4, r24	; 0x04
 512:	8c 81       	ldd	r24, Y+4	; 0x04
 514:	88 30       	cpi	r24, 0x08	; 8
 516:	58 f3       	brcs	.-42     	; 0x4ee <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 518:	1d 82       	std	Y+5, r1	; 0x05
 51a:	12 c0       	rjmp	.+36     	; 0x540 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 51c:	8d 81       	ldd	r24, Y+5	; 0x05
 51e:	88 2f       	mov	r24, r24
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	80 57       	subi	r24, 0x70	; 112
 524:	9b 4f       	sbci	r25, 0xFB	; 251
 526:	2d 81       	ldd	r18, Y+5	; 0x05
 528:	22 2f       	mov	r18, r18
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	20 57       	subi	r18, 0x70	; 112
 52e:	3b 4f       	sbci	r19, 0xFB	; 251
 530:	f9 01       	movw	r30, r18
 532:	20 81       	ld	r18, Z
 534:	28 60       	ori	r18, 0x08	; 8
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 53a:	8d 81       	ldd	r24, Y+5	; 0x05
 53c:	8f 5f       	subi	r24, 0xFF	; 255
 53e:	8d 83       	std	Y+5, r24	; 0x05
 540:	8d 81       	ldd	r24, Y+5	; 0x05
 542:	88 30       	cpi	r24, 0x08	; 8
 544:	58 f3       	brcs	.-42     	; 0x51c <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 546:	1e 82       	std	Y+6, r1	; 0x06
 548:	12 c0       	rjmp	.+36     	; 0x56e <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 54a:	8e 81       	ldd	r24, Y+6	; 0x06
 54c:	88 2f       	mov	r24, r24
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	80 55       	subi	r24, 0x50	; 80
 552:	9b 4f       	sbci	r25, 0xFB	; 251
 554:	2e 81       	ldd	r18, Y+6	; 0x06
 556:	22 2f       	mov	r18, r18
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	20 55       	subi	r18, 0x50	; 80
 55c:	3b 4f       	sbci	r19, 0xFB	; 251
 55e:	f9 01       	movw	r30, r18
 560:	20 81       	ld	r18, Z
 562:	28 60       	ori	r18, 0x08	; 8
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 568:	8e 81       	ldd	r24, Y+6	; 0x06
 56a:	8f 5f       	subi	r24, 0xFF	; 255
 56c:	8e 83       	std	Y+6, r24	; 0x06
 56e:	8e 81       	ldd	r24, Y+6	; 0x06
 570:	88 30       	cpi	r24, 0x08	; 8
 572:	58 f3       	brcs	.-42     	; 0x54a <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 574:	00 00       	nop
 576:	26 96       	adiw	r28, 0x06	; 6
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 58a:	0e 94 29 02 	call	0x452	; 0x452 <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	0e 94 c0 01 	call	0x380	; 0x380 <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	0e 94 b1 01 	call	0x362	; 0x362 <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	0e 94 de 01 	call	0x3bc	; 0x3bc <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 cf 01 	call	0x39e	; 0x39e <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 ed 01 	call	0x3da	; 0x3da <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 1a 02 	call	0x434	; 0x434 <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 0b 02 	call	0x416	; 0x416 <B0_MCU_set_dir>

	CLKCTRL_init();
 5be:	0e 94 85 00 	call	0x10a	; 0x10a <CLKCTRL_init>

	CPUINT_init();
 5c2:	0e 94 8d 00 	call	0x11a	; 0x11a <CPUINT_init>

	SLPCTRL_init();
 5c6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SLPCTRL_init>

	BOD_init();
 5ca:	0e 94 7d 00 	call	0xfa	; 0xfa <BOD_init>
}
 5ce:	00 00       	nop
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 5de:	80 e0       	ldi	r24, 0x00	; 0
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <PORTD_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	1f 92       	push	r1
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	89 83       	std	Y+1, r24	; 0x01
	VPORTD.IN |= 1 << pin;
 5f2:	8c e0       	ldi	r24, 0x0C	; 12
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	2c e0       	ldi	r18, 0x0C	; 12
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	f9 01       	movw	r30, r18
 5fc:	22 81       	ldd	r18, Z+2	; 0x02
 5fe:	62 2f       	mov	r22, r18
 600:	29 81       	ldd	r18, Y+1	; 0x01
 602:	42 2f       	mov	r20, r18
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	21 e0       	ldi	r18, 0x01	; 1
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <PORTD_toggle_pin_level+0x2a>
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	4a 95       	dec	r20
 612:	e2 f7       	brpl	.-8      	; 0x60c <PORTD_toggle_pin_level+0x26>
 614:	26 2b       	or	r18, r22
 616:	fc 01       	movw	r30, r24
 618:	22 83       	std	Z+2, r18	; 0x02
}
 61a:	00 00       	nop
 61c:	0f 90       	pop	r0
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <R0_MCU_toggle_level>:
 * \brief Toggle output level on R0_MCU
 *
 * Toggle the pin level
 */
static inline void R0_MCU_toggle_level()
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(0);
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <PORTD_toggle_pin_level>
}
 632:	00 00       	nop
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <G0_MCU_toggle_level>:
 * \brief Toggle output level on G0_MCU
 *
 * Toggle the pin level
 */
static inline void G0_MCU_toggle_level()
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	cd b7       	in	r28, 0x3d	; 61
 640:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(1);
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <PORTD_toggle_pin_level>
}
 648:	00 00       	nop
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	08 95       	ret

00000650 <B0_MCU_toggle_level>:
 * \brief Toggle output level on B0_MCU
 *
 * Toggle the pin level
 */
static inline void B0_MCU_toggle_level()
{
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	cd b7       	in	r28, 0x3d	; 61
 656:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(2);
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <PORTD_toggle_pin_level>
}
 65e:	00 00       	nop
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	08 95       	ret

00000666 <toggle>:
 * Created: 26-09-2023 09:29:33
 *  Author: faris
 */ 
#include "toggle.h"
#include "atmel_start.h"
void toggle(int delay1,int delay2,int delay3){
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	cd b7       	in	r28, 0x3d	; 61
 66c:	de b7       	in	r29, 0x3e	; 62
 66e:	e0 97       	sbiw	r28, 0x30	; 48
 670:	cd bf       	out	0x3d, r28	; 61
 672:	de bf       	out	0x3e, r29	; 62
 674:	8b a7       	std	Y+43, r24	; 0x2b
 676:	9c a7       	std	Y+44, r25	; 0x2c
 678:	6d a7       	std	Y+45, r22	; 0x2d
 67a:	7e a7       	std	Y+46, r23	; 0x2e
 67c:	4f a7       	std	Y+47, r20	; 0x2f
 67e:	58 ab       	std	Y+48, r21	; 0x30
	
	if(delay1<delay2 && delay1<delay3){
 680:	2b a5       	ldd	r18, Y+43	; 0x2b
 682:	3c a5       	ldd	r19, Y+44	; 0x2c
 684:	8d a5       	ldd	r24, Y+45	; 0x2d
 686:	9e a5       	ldd	r25, Y+46	; 0x2e
 688:	28 17       	cp	r18, r24
 68a:	39 07       	cpc	r19, r25
 68c:	0c f0       	brlt	.+2      	; 0x690 <toggle+0x2a>
 68e:	9a c1       	rjmp	.+820    	; 0x9c4 <toggle+0x35e>
 690:	2b a5       	ldd	r18, Y+43	; 0x2b
 692:	3c a5       	ldd	r19, Y+44	; 0x2c
 694:	8f a5       	ldd	r24, Y+47	; 0x2f
 696:	98 a9       	ldd	r25, Y+48	; 0x30
 698:	28 17       	cp	r18, r24
 69a:	39 07       	cpc	r19, r25
 69c:	0c f0       	brlt	.+2      	; 0x6a0 <toggle+0x3a>
 69e:	92 c1       	rjmp	.+804    	; 0x9c4 <toggle+0x35e>
		if(delay2<delay3){
 6a0:	2d a5       	ldd	r18, Y+45	; 0x2d
 6a2:	3e a5       	ldd	r19, Y+46	; 0x2e
 6a4:	8f a5       	ldd	r24, Y+47	; 0x2f
 6a6:	98 a9       	ldd	r25, Y+48	; 0x30
 6a8:	28 17       	cp	r18, r24
 6aa:	39 07       	cpc	r19, r25
 6ac:	0c f0       	brlt	.+2      	; 0x6b0 <toggle+0x4a>
 6ae:	8a c1       	rjmp	.+788    	; 0x9c4 <toggle+0x35e>
			R0_MCU_toggle_level();
 6b0:	0e 94 12 03 	call	0x624	; 0x624 <R0_MCU_toggle_level>
			G0_MCU_toggle_level();
 6b4:	0e 94 1d 03 	call	0x63a	; 0x63a <G0_MCU_toggle_level>
			B0_MCU_toggle_level();
 6b8:	0e 94 28 03 	call	0x650	; 0x650 <B0_MCU_toggle_level>
			_delay_ms(delay1);
 6bc:	8b a5       	ldd	r24, Y+43	; 0x2b
 6be:	9c a5       	ldd	r25, Y+44	; 0x2c
 6c0:	09 2e       	mov	r0, r25
 6c2:	00 0c       	add	r0, r0
 6c4:	aa 0b       	sbc	r26, r26
 6c6:	bb 0b       	sbc	r27, r27
 6c8:	bc 01       	movw	r22, r24
 6ca:	cd 01       	movw	r24, r26
 6cc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatsisf>
 6d0:	dc 01       	movw	r26, r24
 6d2:	cb 01       	movw	r24, r22
 6d4:	89 83       	std	Y+1, r24	; 0x01
 6d6:	9a 83       	std	Y+2, r25	; 0x02
 6d8:	ab 83       	std	Y+3, r26	; 0x03
 6da:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 6dc:	24 e5       	ldi	r18, 0x54	; 84
 6de:	35 e5       	ldi	r19, 0x55	; 85
 6e0:	40 e5       	ldi	r20, 0x50	; 80
 6e2:	54 e4       	ldi	r21, 0x44	; 68
 6e4:	69 81       	ldd	r22, Y+1	; 0x01
 6e6:	7a 81       	ldd	r23, Y+2	; 0x02
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	9c 81       	ldd	r25, Y+4	; 0x04
 6ec:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 6f0:	dc 01       	movw	r26, r24
 6f2:	cb 01       	movw	r24, r22
 6f4:	89 a3       	std	Y+33, r24	; 0x21
 6f6:	9a a3       	std	Y+34, r25	; 0x22
 6f8:	ab a3       	std	Y+35, r26	; 0x23
 6fa:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 6fc:	20 e0       	ldi	r18, 0x00	; 0
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	40 e8       	ldi	r20, 0x80	; 128
 702:	5f e3       	ldi	r21, 0x3F	; 63
 704:	69 a1       	ldd	r22, Y+33	; 0x21
 706:	7a a1       	ldd	r23, Y+34	; 0x22
 708:	8b a1       	ldd	r24, Y+35	; 0x23
 70a:	9c a1       	ldd	r25, Y+36	; 0x24
 70c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__cmpsf2>
 710:	88 23       	and	r24, r24
 712:	2c f4       	brge	.+10     	; 0x71e <toggle+0xb8>
		__ticks = 1;
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	8d a3       	std	Y+37, r24	; 0x25
 71a:	9e a3       	std	Y+38, r25	; 0x26
 71c:	3f c0       	rjmp	.+126    	; 0x79c <toggle+0x136>
	else if (__tmp > 65535)
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	3f ef       	ldi	r19, 0xFF	; 255
 722:	4f e7       	ldi	r20, 0x7F	; 127
 724:	57 e4       	ldi	r21, 0x47	; 71
 726:	69 a1       	ldd	r22, Y+33	; 0x21
 728:	7a a1       	ldd	r23, Y+34	; 0x22
 72a:	8b a1       	ldd	r24, Y+35	; 0x23
 72c:	9c a1       	ldd	r25, Y+36	; 0x24
 72e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__gesf2>
 732:	18 16       	cp	r1, r24
 734:	4c f5       	brge	.+82     	; 0x788 <toggle+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 736:	20 e0       	ldi	r18, 0x00	; 0
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	40 e2       	ldi	r20, 0x20	; 32
 73c:	51 e4       	ldi	r21, 0x41	; 65
 73e:	69 81       	ldd	r22, Y+1	; 0x01
 740:	7a 81       	ldd	r23, Y+2	; 0x02
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	9c 81       	ldd	r25, Y+4	; 0x04
 746:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 74a:	dc 01       	movw	r26, r24
 74c:	cb 01       	movw	r24, r22
 74e:	bc 01       	movw	r22, r24
 750:	cd 01       	movw	r24, r26
 752:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
 756:	dc 01       	movw	r26, r24
 758:	cb 01       	movw	r24, r22
 75a:	8d a3       	std	Y+37, r24	; 0x25
 75c:	9e a3       	std	Y+38, r25	; 0x26
 75e:	0f c0       	rjmp	.+30     	; 0x77e <toggle+0x118>
 760:	83 e5       	ldi	r24, 0x53	; 83
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	8f a3       	std	Y+39, r24	; 0x27
 766:	98 a7       	std	Y+40, r25	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 768:	8f a1       	ldd	r24, Y+39	; 0x27
 76a:	98 a5       	ldd	r25, Y+40	; 0x28
 76c:	01 97       	sbiw	r24, 0x01	; 1
 76e:	f1 f7       	brne	.-4      	; 0x76c <toggle+0x106>
 770:	8f a3       	std	Y+39, r24	; 0x27
 772:	98 a7       	std	Y+40, r25	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 774:	8d a1       	ldd	r24, Y+37	; 0x25
 776:	9e a1       	ldd	r25, Y+38	; 0x26
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	8d a3       	std	Y+37, r24	; 0x25
 77c:	9e a3       	std	Y+38, r25	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 77e:	8d a1       	ldd	r24, Y+37	; 0x25
 780:	9e a1       	ldd	r25, Y+38	; 0x26
 782:	89 2b       	or	r24, r25
 784:	69 f7       	brne	.-38     	; 0x760 <toggle+0xfa>
 786:	14 c0       	rjmp	.+40     	; 0x7b0 <toggle+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 788:	69 a1       	ldd	r22, Y+33	; 0x21
 78a:	7a a1       	ldd	r23, Y+34	; 0x22
 78c:	8b a1       	ldd	r24, Y+35	; 0x23
 78e:	9c a1       	ldd	r25, Y+36	; 0x24
 790:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
 794:	dc 01       	movw	r26, r24
 796:	cb 01       	movw	r24, r22
 798:	8d a3       	std	Y+37, r24	; 0x25
 79a:	9e a3       	std	Y+38, r25	; 0x26
 79c:	8d a1       	ldd	r24, Y+37	; 0x25
 79e:	9e a1       	ldd	r25, Y+38	; 0x26
 7a0:	89 a7       	std	Y+41, r24	; 0x29
 7a2:	9a a7       	std	Y+42, r25	; 0x2a
 7a4:	89 a5       	ldd	r24, Y+41	; 0x29
 7a6:	9a a5       	ldd	r25, Y+42	; 0x2a
 7a8:	01 97       	sbiw	r24, 0x01	; 1
 7aa:	f1 f7       	brne	.-4      	; 0x7a8 <toggle+0x142>
 7ac:	89 a7       	std	Y+41, r24	; 0x29
 7ae:	9a a7       	std	Y+42, r25	; 0x2a
			R0_MCU_toggle_level();
 7b0:	0e 94 12 03 	call	0x624	; 0x624 <R0_MCU_toggle_level>
			_delay_ms(delay2-delay1);
 7b4:	2d a5       	ldd	r18, Y+45	; 0x2d
 7b6:	3e a5       	ldd	r19, Y+46	; 0x2e
 7b8:	8b a5       	ldd	r24, Y+43	; 0x2b
 7ba:	9c a5       	ldd	r25, Y+44	; 0x2c
 7bc:	a9 01       	movw	r20, r18
 7be:	48 1b       	sub	r20, r24
 7c0:	59 0b       	sbc	r21, r25
 7c2:	ca 01       	movw	r24, r20
 7c4:	09 2e       	mov	r0, r25
 7c6:	00 0c       	add	r0, r0
 7c8:	aa 0b       	sbc	r26, r26
 7ca:	bb 0b       	sbc	r27, r27
 7cc:	bc 01       	movw	r22, r24
 7ce:	cd 01       	movw	r24, r26
 7d0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatsisf>
 7d4:	dc 01       	movw	r26, r24
 7d6:	cb 01       	movw	r24, r22
 7d8:	8d 83       	std	Y+5, r24	; 0x05
 7da:	9e 83       	std	Y+6, r25	; 0x06
 7dc:	af 83       	std	Y+7, r26	; 0x07
 7de:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 7e0:	24 e5       	ldi	r18, 0x54	; 84
 7e2:	35 e5       	ldi	r19, 0x55	; 85
 7e4:	40 e5       	ldi	r20, 0x50	; 80
 7e6:	54 e4       	ldi	r21, 0x44	; 68
 7e8:	6d 81       	ldd	r22, Y+5	; 0x05
 7ea:	7e 81       	ldd	r23, Y+6	; 0x06
 7ec:	8f 81       	ldd	r24, Y+7	; 0x07
 7ee:	98 85       	ldd	r25, Y+8	; 0x08
 7f0:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 7f4:	dc 01       	movw	r26, r24
 7f6:	cb 01       	movw	r24, r22
 7f8:	8f 8b       	std	Y+23, r24	; 0x17
 7fa:	98 8f       	std	Y+24, r25	; 0x18
 7fc:	a9 8f       	std	Y+25, r26	; 0x19
 7fe:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 800:	20 e0       	ldi	r18, 0x00	; 0
 802:	30 e0       	ldi	r19, 0x00	; 0
 804:	40 e8       	ldi	r20, 0x80	; 128
 806:	5f e3       	ldi	r21, 0x3F	; 63
 808:	6f 89       	ldd	r22, Y+23	; 0x17
 80a:	78 8d       	ldd	r23, Y+24	; 0x18
 80c:	89 8d       	ldd	r24, Y+25	; 0x19
 80e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 810:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__cmpsf2>
 814:	88 23       	and	r24, r24
 816:	2c f4       	brge	.+10     	; 0x822 <toggle+0x1bc>
		__ticks = 1;
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	8b 8f       	std	Y+27, r24	; 0x1b
 81e:	9c 8f       	std	Y+28, r25	; 0x1c
 820:	3f c0       	rjmp	.+126    	; 0x8a0 <toggle+0x23a>
	else if (__tmp > 65535)
 822:	20 e0       	ldi	r18, 0x00	; 0
 824:	3f ef       	ldi	r19, 0xFF	; 255
 826:	4f e7       	ldi	r20, 0x7F	; 127
 828:	57 e4       	ldi	r21, 0x47	; 71
 82a:	6f 89       	ldd	r22, Y+23	; 0x17
 82c:	78 8d       	ldd	r23, Y+24	; 0x18
 82e:	89 8d       	ldd	r24, Y+25	; 0x19
 830:	9a 8d       	ldd	r25, Y+26	; 0x1a
 832:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__gesf2>
 836:	18 16       	cp	r1, r24
 838:	4c f5       	brge	.+82     	; 0x88c <toggle+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 83a:	20 e0       	ldi	r18, 0x00	; 0
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	40 e2       	ldi	r20, 0x20	; 32
 840:	51 e4       	ldi	r21, 0x41	; 65
 842:	6d 81       	ldd	r22, Y+5	; 0x05
 844:	7e 81       	ldd	r23, Y+6	; 0x06
 846:	8f 81       	ldd	r24, Y+7	; 0x07
 848:	98 85       	ldd	r25, Y+8	; 0x08
 84a:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 84e:	dc 01       	movw	r26, r24
 850:	cb 01       	movw	r24, r22
 852:	bc 01       	movw	r22, r24
 854:	cd 01       	movw	r24, r26
 856:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
 85a:	dc 01       	movw	r26, r24
 85c:	cb 01       	movw	r24, r22
 85e:	8b 8f       	std	Y+27, r24	; 0x1b
 860:	9c 8f       	std	Y+28, r25	; 0x1c
 862:	0f c0       	rjmp	.+30     	; 0x882 <toggle+0x21c>
 864:	83 e5       	ldi	r24, 0x53	; 83
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	8d 8f       	std	Y+29, r24	; 0x1d
 86a:	9e 8f       	std	Y+30, r25	; 0x1e
 86c:	8d 8d       	ldd	r24, Y+29	; 0x1d
 86e:	9e 8d       	ldd	r25, Y+30	; 0x1e
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <toggle+0x20a>
 874:	8d 8f       	std	Y+29, r24	; 0x1d
 876:	9e 8f       	std	Y+30, r25	; 0x1e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 878:	8b 8d       	ldd	r24, Y+27	; 0x1b
 87a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 87c:	01 97       	sbiw	r24, 0x01	; 1
 87e:	8b 8f       	std	Y+27, r24	; 0x1b
 880:	9c 8f       	std	Y+28, r25	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 882:	8b 8d       	ldd	r24, Y+27	; 0x1b
 884:	9c 8d       	ldd	r25, Y+28	; 0x1c
 886:	89 2b       	or	r24, r25
 888:	69 f7       	brne	.-38     	; 0x864 <toggle+0x1fe>
 88a:	14 c0       	rjmp	.+40     	; 0x8b4 <toggle+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 88c:	6f 89       	ldd	r22, Y+23	; 0x17
 88e:	78 8d       	ldd	r23, Y+24	; 0x18
 890:	89 8d       	ldd	r24, Y+25	; 0x19
 892:	9a 8d       	ldd	r25, Y+26	; 0x1a
 894:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
 898:	dc 01       	movw	r26, r24
 89a:	cb 01       	movw	r24, r22
 89c:	8b 8f       	std	Y+27, r24	; 0x1b
 89e:	9c 8f       	std	Y+28, r25	; 0x1c
 8a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
 8a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
 8a4:	8f 8f       	std	Y+31, r24	; 0x1f
 8a6:	98 a3       	std	Y+32, r25	; 0x20
 8a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
 8aa:	98 a1       	ldd	r25, Y+32	; 0x20
 8ac:	01 97       	sbiw	r24, 0x01	; 1
 8ae:	f1 f7       	brne	.-4      	; 0x8ac <toggle+0x246>
 8b0:	8f 8f       	std	Y+31, r24	; 0x1f
 8b2:	98 a3       	std	Y+32, r25	; 0x20
			G0_MCU_toggle_level();
 8b4:	0e 94 1d 03 	call	0x63a	; 0x63a <G0_MCU_toggle_level>
			_delay_ms(delay3-delay2-delay1);
 8b8:	2f a5       	ldd	r18, Y+47	; 0x2f
 8ba:	38 a9       	ldd	r19, Y+48	; 0x30
 8bc:	8d a5       	ldd	r24, Y+45	; 0x2d
 8be:	9e a5       	ldd	r25, Y+46	; 0x2e
 8c0:	28 1b       	sub	r18, r24
 8c2:	39 0b       	sbc	r19, r25
 8c4:	8b a5       	ldd	r24, Y+43	; 0x2b
 8c6:	9c a5       	ldd	r25, Y+44	; 0x2c
 8c8:	a9 01       	movw	r20, r18
 8ca:	48 1b       	sub	r20, r24
 8cc:	59 0b       	sbc	r21, r25
 8ce:	ca 01       	movw	r24, r20
 8d0:	09 2e       	mov	r0, r25
 8d2:	00 0c       	add	r0, r0
 8d4:	aa 0b       	sbc	r26, r26
 8d6:	bb 0b       	sbc	r27, r27
 8d8:	bc 01       	movw	r22, r24
 8da:	cd 01       	movw	r24, r26
 8dc:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__floatsisf>
 8e0:	dc 01       	movw	r26, r24
 8e2:	cb 01       	movw	r24, r22
 8e4:	89 87       	std	Y+9, r24	; 0x09
 8e6:	9a 87       	std	Y+10, r25	; 0x0a
 8e8:	ab 87       	std	Y+11, r26	; 0x0b
 8ea:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 8ec:	24 e5       	ldi	r18, 0x54	; 84
 8ee:	35 e5       	ldi	r19, 0x55	; 85
 8f0:	40 e5       	ldi	r20, 0x50	; 80
 8f2:	54 e4       	ldi	r21, 0x44	; 68
 8f4:	69 85       	ldd	r22, Y+9	; 0x09
 8f6:	7a 85       	ldd	r23, Y+10	; 0x0a
 8f8:	8b 85       	ldd	r24, Y+11	; 0x0b
 8fa:	9c 85       	ldd	r25, Y+12	; 0x0c
 8fc:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 900:	dc 01       	movw	r26, r24
 902:	cb 01       	movw	r24, r22
 904:	8d 87       	std	Y+13, r24	; 0x0d
 906:	9e 87       	std	Y+14, r25	; 0x0e
 908:	af 87       	std	Y+15, r26	; 0x0f
 90a:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 90c:	20 e0       	ldi	r18, 0x00	; 0
 90e:	30 e0       	ldi	r19, 0x00	; 0
 910:	40 e8       	ldi	r20, 0x80	; 128
 912:	5f e3       	ldi	r21, 0x3F	; 63
 914:	6d 85       	ldd	r22, Y+13	; 0x0d
 916:	7e 85       	ldd	r23, Y+14	; 0x0e
 918:	8f 85       	ldd	r24, Y+15	; 0x0f
 91a:	98 89       	ldd	r25, Y+16	; 0x10
 91c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__cmpsf2>
 920:	88 23       	and	r24, r24
 922:	2c f4       	brge	.+10     	; 0x92e <toggle+0x2c8>
		__ticks = 1;
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	89 8b       	std	Y+17, r24	; 0x11
 92a:	9a 8b       	std	Y+18, r25	; 0x12
 92c:	3f c0       	rjmp	.+126    	; 0x9ac <toggle+0x346>
	else if (__tmp > 65535)
 92e:	20 e0       	ldi	r18, 0x00	; 0
 930:	3f ef       	ldi	r19, 0xFF	; 255
 932:	4f e7       	ldi	r20, 0x7F	; 127
 934:	57 e4       	ldi	r21, 0x47	; 71
 936:	6d 85       	ldd	r22, Y+13	; 0x0d
 938:	7e 85       	ldd	r23, Y+14	; 0x0e
 93a:	8f 85       	ldd	r24, Y+15	; 0x0f
 93c:	98 89       	ldd	r25, Y+16	; 0x10
 93e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <__gesf2>
 942:	18 16       	cp	r1, r24
 944:	4c f5       	brge	.+82     	; 0x998 <toggle+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 946:	20 e0       	ldi	r18, 0x00	; 0
 948:	30 e0       	ldi	r19, 0x00	; 0
 94a:	40 e2       	ldi	r20, 0x20	; 32
 94c:	51 e4       	ldi	r21, 0x41	; 65
 94e:	69 85       	ldd	r22, Y+9	; 0x09
 950:	7a 85       	ldd	r23, Y+10	; 0x0a
 952:	8b 85       	ldd	r24, Y+11	; 0x0b
 954:	9c 85       	ldd	r25, Y+12	; 0x0c
 956:	0e 94 ac 05 	call	0xb58	; 0xb58 <__mulsf3>
 95a:	dc 01       	movw	r26, r24
 95c:	cb 01       	movw	r24, r22
 95e:	bc 01       	movw	r22, r24
 960:	cd 01       	movw	r24, r26
 962:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
 966:	dc 01       	movw	r26, r24
 968:	cb 01       	movw	r24, r22
 96a:	89 8b       	std	Y+17, r24	; 0x11
 96c:	9a 8b       	std	Y+18, r25	; 0x12
 96e:	0f c0       	rjmp	.+30     	; 0x98e <toggle+0x328>
 970:	83 e5       	ldi	r24, 0x53	; 83
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	8b 8b       	std	Y+19, r24	; 0x13
 976:	9c 8b       	std	Y+20, r25	; 0x14
 978:	8b 89       	ldd	r24, Y+19	; 0x13
 97a:	9c 89       	ldd	r25, Y+20	; 0x14
 97c:	01 97       	sbiw	r24, 0x01	; 1
 97e:	f1 f7       	brne	.-4      	; 0x97c <toggle+0x316>
 980:	8b 8b       	std	Y+19, r24	; 0x13
 982:	9c 8b       	std	Y+20, r25	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 984:	89 89       	ldd	r24, Y+17	; 0x11
 986:	9a 89       	ldd	r25, Y+18	; 0x12
 988:	01 97       	sbiw	r24, 0x01	; 1
 98a:	89 8b       	std	Y+17, r24	; 0x11
 98c:	9a 8b       	std	Y+18, r25	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 98e:	89 89       	ldd	r24, Y+17	; 0x11
 990:	9a 89       	ldd	r25, Y+18	; 0x12
 992:	89 2b       	or	r24, r25
 994:	69 f7       	brne	.-38     	; 0x970 <toggle+0x30a>
 996:	14 c0       	rjmp	.+40     	; 0x9c0 <toggle+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 998:	6d 85       	ldd	r22, Y+13	; 0x0d
 99a:	7e 85       	ldd	r23, Y+14	; 0x0e
 99c:	8f 85       	ldd	r24, Y+15	; 0x0f
 99e:	98 89       	ldd	r25, Y+16	; 0x10
 9a0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fixunssfsi>
 9a4:	dc 01       	movw	r26, r24
 9a6:	cb 01       	movw	r24, r22
 9a8:	89 8b       	std	Y+17, r24	; 0x11
 9aa:	9a 8b       	std	Y+18, r25	; 0x12
 9ac:	89 89       	ldd	r24, Y+17	; 0x11
 9ae:	9a 89       	ldd	r25, Y+18	; 0x12
 9b0:	8d 8b       	std	Y+21, r24	; 0x15
 9b2:	9e 8b       	std	Y+22, r25	; 0x16
 9b4:	8d 89       	ldd	r24, Y+21	; 0x15
 9b6:	9e 89       	ldd	r25, Y+22	; 0x16
 9b8:	01 97       	sbiw	r24, 0x01	; 1
 9ba:	f1 f7       	brne	.-4      	; 0x9b8 <toggle+0x352>
 9bc:	8d 8b       	std	Y+21, r24	; 0x15
 9be:	9e 8b       	std	Y+22, r25	; 0x16
			B0_MCU_toggle_level();
 9c0:	0e 94 28 03 	call	0x650	; 0x650 <B0_MCU_toggle_level>
// 		else if(B==1){
// 			B0_MCU_toggle_level(true);
// 			_delay_ms(delay3);
// 		}
		
 9c4:	00 00       	nop
 9c6:	e0 96       	adiw	r28, 0x30	; 48
 9c8:	cd bf       	out	0x3d, r28	; 61
 9ca:	de bf       	out	0x3e, r29	; 62
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <__cmpsf2>:
 9d2:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fp_cmp>
 9d6:	08 f4       	brcc	.+2      	; 0x9da <__cmpsf2+0x8>
 9d8:	81 e0       	ldi	r24, 0x01	; 1
 9da:	08 95       	ret

000009dc <__fixunssfsi>:
 9dc:	0e 94 86 05 	call	0xb0c	; 0xb0c <__fp_splitA>
 9e0:	88 f0       	brcs	.+34     	; 0xa04 <__fixunssfsi+0x28>
 9e2:	9f 57       	subi	r25, 0x7F	; 127
 9e4:	98 f0       	brcs	.+38     	; 0xa0c <__fixunssfsi+0x30>
 9e6:	b9 2f       	mov	r27, r25
 9e8:	99 27       	eor	r25, r25
 9ea:	b7 51       	subi	r27, 0x17	; 23
 9ec:	b0 f0       	brcs	.+44     	; 0xa1a <__fixunssfsi+0x3e>
 9ee:	e1 f0       	breq	.+56     	; 0xa28 <__fixunssfsi+0x4c>
 9f0:	66 0f       	add	r22, r22
 9f2:	77 1f       	adc	r23, r23
 9f4:	88 1f       	adc	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	1a f0       	brmi	.+6      	; 0xa00 <__fixunssfsi+0x24>
 9fa:	ba 95       	dec	r27
 9fc:	c9 f7       	brne	.-14     	; 0x9f0 <__fixunssfsi+0x14>
 9fe:	14 c0       	rjmp	.+40     	; 0xa28 <__fixunssfsi+0x4c>
 a00:	b1 30       	cpi	r27, 0x01	; 1
 a02:	91 f0       	breq	.+36     	; 0xa28 <__fixunssfsi+0x4c>
 a04:	0e 94 a0 05 	call	0xb40	; 0xb40 <__fp_zero>
 a08:	b1 e0       	ldi	r27, 0x01	; 1
 a0a:	08 95       	ret
 a0c:	0c 94 a0 05 	jmp	0xb40	; 0xb40 <__fp_zero>
 a10:	67 2f       	mov	r22, r23
 a12:	78 2f       	mov	r23, r24
 a14:	88 27       	eor	r24, r24
 a16:	b8 5f       	subi	r27, 0xF8	; 248
 a18:	39 f0       	breq	.+14     	; 0xa28 <__fixunssfsi+0x4c>
 a1a:	b9 3f       	cpi	r27, 0xF9	; 249
 a1c:	cc f3       	brlt	.-14     	; 0xa10 <__fixunssfsi+0x34>
 a1e:	86 95       	lsr	r24
 a20:	77 95       	ror	r23
 a22:	67 95       	ror	r22
 a24:	b3 95       	inc	r27
 a26:	d9 f7       	brne	.-10     	; 0xa1e <__fixunssfsi+0x42>
 a28:	3e f4       	brtc	.+14     	; 0xa38 <__fixunssfsi+0x5c>
 a2a:	90 95       	com	r25
 a2c:	80 95       	com	r24
 a2e:	70 95       	com	r23
 a30:	61 95       	neg	r22
 a32:	7f 4f       	sbci	r23, 0xFF	; 255
 a34:	8f 4f       	sbci	r24, 0xFF	; 255
 a36:	9f 4f       	sbci	r25, 0xFF	; 255
 a38:	08 95       	ret

00000a3a <__floatunsisf>:
 a3a:	e8 94       	clt
 a3c:	09 c0       	rjmp	.+18     	; 0xa50 <__floatsisf+0x12>

00000a3e <__floatsisf>:
 a3e:	97 fb       	bst	r25, 7
 a40:	3e f4       	brtc	.+14     	; 0xa50 <__floatsisf+0x12>
 a42:	90 95       	com	r25
 a44:	80 95       	com	r24
 a46:	70 95       	com	r23
 a48:	61 95       	neg	r22
 a4a:	7f 4f       	sbci	r23, 0xFF	; 255
 a4c:	8f 4f       	sbci	r24, 0xFF	; 255
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	99 23       	and	r25, r25
 a52:	a9 f0       	breq	.+42     	; 0xa7e <__floatsisf+0x40>
 a54:	f9 2f       	mov	r31, r25
 a56:	96 e9       	ldi	r25, 0x96	; 150
 a58:	bb 27       	eor	r27, r27
 a5a:	93 95       	inc	r25
 a5c:	f6 95       	lsr	r31
 a5e:	87 95       	ror	r24
 a60:	77 95       	ror	r23
 a62:	67 95       	ror	r22
 a64:	b7 95       	ror	r27
 a66:	f1 11       	cpse	r31, r1
 a68:	f8 cf       	rjmp	.-16     	; 0xa5a <__floatsisf+0x1c>
 a6a:	fa f4       	brpl	.+62     	; 0xaaa <__floatsisf+0x6c>
 a6c:	bb 0f       	add	r27, r27
 a6e:	11 f4       	brne	.+4      	; 0xa74 <__floatsisf+0x36>
 a70:	60 ff       	sbrs	r22, 0
 a72:	1b c0       	rjmp	.+54     	; 0xaaa <__floatsisf+0x6c>
 a74:	6f 5f       	subi	r22, 0xFF	; 255
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	8f 4f       	sbci	r24, 0xFF	; 255
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	16 c0       	rjmp	.+44     	; 0xaaa <__floatsisf+0x6c>
 a7e:	88 23       	and	r24, r24
 a80:	11 f0       	breq	.+4      	; 0xa86 <__floatsisf+0x48>
 a82:	96 e9       	ldi	r25, 0x96	; 150
 a84:	11 c0       	rjmp	.+34     	; 0xaa8 <__floatsisf+0x6a>
 a86:	77 23       	and	r23, r23
 a88:	21 f0       	breq	.+8      	; 0xa92 <__floatsisf+0x54>
 a8a:	9e e8       	ldi	r25, 0x8E	; 142
 a8c:	87 2f       	mov	r24, r23
 a8e:	76 2f       	mov	r23, r22
 a90:	05 c0       	rjmp	.+10     	; 0xa9c <__floatsisf+0x5e>
 a92:	66 23       	and	r22, r22
 a94:	71 f0       	breq	.+28     	; 0xab2 <__floatsisf+0x74>
 a96:	96 e8       	ldi	r25, 0x86	; 134
 a98:	86 2f       	mov	r24, r22
 a9a:	70 e0       	ldi	r23, 0x00	; 0
 a9c:	60 e0       	ldi	r22, 0x00	; 0
 a9e:	2a f0       	brmi	.+10     	; 0xaaa <__floatsisf+0x6c>
 aa0:	9a 95       	dec	r25
 aa2:	66 0f       	add	r22, r22
 aa4:	77 1f       	adc	r23, r23
 aa6:	88 1f       	adc	r24, r24
 aa8:	da f7       	brpl	.-10     	; 0xaa0 <__floatsisf+0x62>
 aaa:	88 0f       	add	r24, r24
 aac:	96 95       	lsr	r25
 aae:	87 95       	ror	r24
 ab0:	97 f9       	bld	r25, 7
 ab2:	08 95       	ret

00000ab4 <__fp_cmp>:
 ab4:	99 0f       	add	r25, r25
 ab6:	00 08       	sbc	r0, r0
 ab8:	55 0f       	add	r21, r21
 aba:	aa 0b       	sbc	r26, r26
 abc:	e0 e8       	ldi	r30, 0x80	; 128
 abe:	fe ef       	ldi	r31, 0xFE	; 254
 ac0:	16 16       	cp	r1, r22
 ac2:	17 06       	cpc	r1, r23
 ac4:	e8 07       	cpc	r30, r24
 ac6:	f9 07       	cpc	r31, r25
 ac8:	c0 f0       	brcs	.+48     	; 0xafa <__fp_cmp+0x46>
 aca:	12 16       	cp	r1, r18
 acc:	13 06       	cpc	r1, r19
 ace:	e4 07       	cpc	r30, r20
 ad0:	f5 07       	cpc	r31, r21
 ad2:	98 f0       	brcs	.+38     	; 0xafa <__fp_cmp+0x46>
 ad4:	62 1b       	sub	r22, r18
 ad6:	73 0b       	sbc	r23, r19
 ad8:	84 0b       	sbc	r24, r20
 ada:	95 0b       	sbc	r25, r21
 adc:	39 f4       	brne	.+14     	; 0xaec <__fp_cmp+0x38>
 ade:	0a 26       	eor	r0, r26
 ae0:	61 f0       	breq	.+24     	; 0xafa <__fp_cmp+0x46>
 ae2:	23 2b       	or	r18, r19
 ae4:	24 2b       	or	r18, r20
 ae6:	25 2b       	or	r18, r21
 ae8:	21 f4       	brne	.+8      	; 0xaf2 <__fp_cmp+0x3e>
 aea:	08 95       	ret
 aec:	0a 26       	eor	r0, r26
 aee:	09 f4       	brne	.+2      	; 0xaf2 <__fp_cmp+0x3e>
 af0:	a1 40       	sbci	r26, 0x01	; 1
 af2:	a6 95       	lsr	r26
 af4:	8f ef       	ldi	r24, 0xFF	; 255
 af6:	81 1d       	adc	r24, r1
 af8:	81 1d       	adc	r24, r1
 afa:	08 95       	ret

00000afc <__fp_split3>:
 afc:	57 fd       	sbrc	r21, 7
 afe:	90 58       	subi	r25, 0x80	; 128
 b00:	44 0f       	add	r20, r20
 b02:	55 1f       	adc	r21, r21
 b04:	59 f0       	breq	.+22     	; 0xb1c <__fp_splitA+0x10>
 b06:	5f 3f       	cpi	r21, 0xFF	; 255
 b08:	71 f0       	breq	.+28     	; 0xb26 <__fp_splitA+0x1a>
 b0a:	47 95       	ror	r20

00000b0c <__fp_splitA>:
 b0c:	88 0f       	add	r24, r24
 b0e:	97 fb       	bst	r25, 7
 b10:	99 1f       	adc	r25, r25
 b12:	61 f0       	breq	.+24     	; 0xb2c <__fp_splitA+0x20>
 b14:	9f 3f       	cpi	r25, 0xFF	; 255
 b16:	79 f0       	breq	.+30     	; 0xb36 <__fp_splitA+0x2a>
 b18:	87 95       	ror	r24
 b1a:	08 95       	ret
 b1c:	12 16       	cp	r1, r18
 b1e:	13 06       	cpc	r1, r19
 b20:	14 06       	cpc	r1, r20
 b22:	55 1f       	adc	r21, r21
 b24:	f2 cf       	rjmp	.-28     	; 0xb0a <__fp_split3+0xe>
 b26:	46 95       	lsr	r20
 b28:	f1 df       	rcall	.-30     	; 0xb0c <__fp_splitA>
 b2a:	08 c0       	rjmp	.+16     	; 0xb3c <__fp_splitA+0x30>
 b2c:	16 16       	cp	r1, r22
 b2e:	17 06       	cpc	r1, r23
 b30:	18 06       	cpc	r1, r24
 b32:	99 1f       	adc	r25, r25
 b34:	f1 cf       	rjmp	.-30     	; 0xb18 <__fp_splitA+0xc>
 b36:	86 95       	lsr	r24
 b38:	71 05       	cpc	r23, r1
 b3a:	61 05       	cpc	r22, r1
 b3c:	08 94       	sec
 b3e:	08 95       	ret

00000b40 <__fp_zero>:
 b40:	e8 94       	clt

00000b42 <__fp_szero>:
 b42:	bb 27       	eor	r27, r27
 b44:	66 27       	eor	r22, r22
 b46:	77 27       	eor	r23, r23
 b48:	cb 01       	movw	r24, r22
 b4a:	97 f9       	bld	r25, 7
 b4c:	08 95       	ret

00000b4e <__gesf2>:
 b4e:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fp_cmp>
 b52:	08 f4       	brcc	.+2      	; 0xb56 <__gesf2+0x8>
 b54:	8f ef       	ldi	r24, 0xFF	; 255
 b56:	08 95       	ret

00000b58 <__mulsf3>:
 b58:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__mulsf3x>
 b5c:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_round>
 b60:	0e 94 22 06 	call	0xc44	; 0xc44 <__fp_pscA>
 b64:	38 f0       	brcs	.+14     	; 0xb74 <__mulsf3+0x1c>
 b66:	0e 94 29 06 	call	0xc52	; 0xc52 <__fp_pscB>
 b6a:	20 f0       	brcs	.+8      	; 0xb74 <__mulsf3+0x1c>
 b6c:	95 23       	and	r25, r21
 b6e:	11 f0       	breq	.+4      	; 0xb74 <__mulsf3+0x1c>
 b70:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>
 b74:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__fp_nan>
 b78:	11 24       	eor	r1, r1
 b7a:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_szero>

00000b7e <__mulsf3x>:
 b7e:	0e 94 7e 05 	call	0xafc	; 0xafc <__fp_split3>
 b82:	70 f3       	brcs	.-36     	; 0xb60 <__mulsf3+0x8>

00000b84 <__mulsf3_pse>:
 b84:	95 9f       	mul	r25, r21
 b86:	c1 f3       	breq	.-16     	; 0xb78 <__mulsf3+0x20>
 b88:	95 0f       	add	r25, r21
 b8a:	50 e0       	ldi	r21, 0x00	; 0
 b8c:	55 1f       	adc	r21, r21
 b8e:	62 9f       	mul	r22, r18
 b90:	f0 01       	movw	r30, r0
 b92:	72 9f       	mul	r23, r18
 b94:	bb 27       	eor	r27, r27
 b96:	f0 0d       	add	r31, r0
 b98:	b1 1d       	adc	r27, r1
 b9a:	63 9f       	mul	r22, r19
 b9c:	aa 27       	eor	r26, r26
 b9e:	f0 0d       	add	r31, r0
 ba0:	b1 1d       	adc	r27, r1
 ba2:	aa 1f       	adc	r26, r26
 ba4:	64 9f       	mul	r22, r20
 ba6:	66 27       	eor	r22, r22
 ba8:	b0 0d       	add	r27, r0
 baa:	a1 1d       	adc	r26, r1
 bac:	66 1f       	adc	r22, r22
 bae:	82 9f       	mul	r24, r18
 bb0:	22 27       	eor	r18, r18
 bb2:	b0 0d       	add	r27, r0
 bb4:	a1 1d       	adc	r26, r1
 bb6:	62 1f       	adc	r22, r18
 bb8:	73 9f       	mul	r23, r19
 bba:	b0 0d       	add	r27, r0
 bbc:	a1 1d       	adc	r26, r1
 bbe:	62 1f       	adc	r22, r18
 bc0:	83 9f       	mul	r24, r19
 bc2:	a0 0d       	add	r26, r0
 bc4:	61 1d       	adc	r22, r1
 bc6:	22 1f       	adc	r18, r18
 bc8:	74 9f       	mul	r23, r20
 bca:	33 27       	eor	r19, r19
 bcc:	a0 0d       	add	r26, r0
 bce:	61 1d       	adc	r22, r1
 bd0:	23 1f       	adc	r18, r19
 bd2:	84 9f       	mul	r24, r20
 bd4:	60 0d       	add	r22, r0
 bd6:	21 1d       	adc	r18, r1
 bd8:	82 2f       	mov	r24, r18
 bda:	76 2f       	mov	r23, r22
 bdc:	6a 2f       	mov	r22, r26
 bde:	11 24       	eor	r1, r1
 be0:	9f 57       	subi	r25, 0x7F	; 127
 be2:	50 40       	sbci	r21, 0x00	; 0
 be4:	9a f0       	brmi	.+38     	; 0xc0c <__mulsf3_pse+0x88>
 be6:	f1 f0       	breq	.+60     	; 0xc24 <__mulsf3_pse+0xa0>
 be8:	88 23       	and	r24, r24
 bea:	4a f0       	brmi	.+18     	; 0xbfe <__mulsf3_pse+0x7a>
 bec:	ee 0f       	add	r30, r30
 bee:	ff 1f       	adc	r31, r31
 bf0:	bb 1f       	adc	r27, r27
 bf2:	66 1f       	adc	r22, r22
 bf4:	77 1f       	adc	r23, r23
 bf6:	88 1f       	adc	r24, r24
 bf8:	91 50       	subi	r25, 0x01	; 1
 bfa:	50 40       	sbci	r21, 0x00	; 0
 bfc:	a9 f7       	brne	.-22     	; 0xbe8 <__mulsf3_pse+0x64>
 bfe:	9e 3f       	cpi	r25, 0xFE	; 254
 c00:	51 05       	cpc	r21, r1
 c02:	80 f0       	brcs	.+32     	; 0xc24 <__mulsf3_pse+0xa0>
 c04:	0c 94 19 06 	jmp	0xc32	; 0xc32 <__fp_inf>
 c08:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__fp_szero>
 c0c:	5f 3f       	cpi	r21, 0xFF	; 255
 c0e:	e4 f3       	brlt	.-8      	; 0xc08 <__mulsf3_pse+0x84>
 c10:	98 3e       	cpi	r25, 0xE8	; 232
 c12:	d4 f3       	brlt	.-12     	; 0xc08 <__mulsf3_pse+0x84>
 c14:	86 95       	lsr	r24
 c16:	77 95       	ror	r23
 c18:	67 95       	ror	r22
 c1a:	b7 95       	ror	r27
 c1c:	f7 95       	ror	r31
 c1e:	e7 95       	ror	r30
 c20:	9f 5f       	subi	r25, 0xFF	; 255
 c22:	c1 f7       	brne	.-16     	; 0xc14 <__mulsf3_pse+0x90>
 c24:	fe 2b       	or	r31, r30
 c26:	88 0f       	add	r24, r24
 c28:	91 1d       	adc	r25, r1
 c2a:	96 95       	lsr	r25
 c2c:	87 95       	ror	r24
 c2e:	97 f9       	bld	r25, 7
 c30:	08 95       	ret

00000c32 <__fp_inf>:
 c32:	97 f9       	bld	r25, 7
 c34:	9f 67       	ori	r25, 0x7F	; 127
 c36:	80 e8       	ldi	r24, 0x80	; 128
 c38:	70 e0       	ldi	r23, 0x00	; 0
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	08 95       	ret

00000c3e <__fp_nan>:
 c3e:	9f ef       	ldi	r25, 0xFF	; 255
 c40:	80 ec       	ldi	r24, 0xC0	; 192
 c42:	08 95       	ret

00000c44 <__fp_pscA>:
 c44:	00 24       	eor	r0, r0
 c46:	0a 94       	dec	r0
 c48:	16 16       	cp	r1, r22
 c4a:	17 06       	cpc	r1, r23
 c4c:	18 06       	cpc	r1, r24
 c4e:	09 06       	cpc	r0, r25
 c50:	08 95       	ret

00000c52 <__fp_pscB>:
 c52:	00 24       	eor	r0, r0
 c54:	0a 94       	dec	r0
 c56:	12 16       	cp	r1, r18
 c58:	13 06       	cpc	r1, r19
 c5a:	14 06       	cpc	r1, r20
 c5c:	05 06       	cpc	r0, r21
 c5e:	08 95       	ret

00000c60 <__fp_round>:
 c60:	09 2e       	mov	r0, r25
 c62:	03 94       	inc	r0
 c64:	00 0c       	add	r0, r0
 c66:	11 f4       	brne	.+4      	; 0xc6c <__fp_round+0xc>
 c68:	88 23       	and	r24, r24
 c6a:	52 f0       	brmi	.+20     	; 0xc80 <__fp_round+0x20>
 c6c:	bb 0f       	add	r27, r27
 c6e:	40 f4       	brcc	.+16     	; 0xc80 <__fp_round+0x20>
 c70:	bf 2b       	or	r27, r31
 c72:	11 f4       	brne	.+4      	; 0xc78 <__fp_round+0x18>
 c74:	60 ff       	sbrs	r22, 0
 c76:	04 c0       	rjmp	.+8      	; 0xc80 <__fp_round+0x20>
 c78:	6f 5f       	subi	r22, 0xFF	; 255
 c7a:	7f 4f       	sbci	r23, 0xFF	; 255
 c7c:	8f 4f       	sbci	r24, 0xFF	; 255
 c7e:	9f 4f       	sbci	r25, 0xFF	; 255
 c80:	08 95       	ret

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
