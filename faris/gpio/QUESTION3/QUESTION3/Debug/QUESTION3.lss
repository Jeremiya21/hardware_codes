
QUESTION3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000155a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001506  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000155a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000158c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000323b  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000265e  00000000  00000000  000049b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f10  00000000  00000000  00007015  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000046c  00000000  00000000  00007f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013f7  00000000  00000000  00008394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000813  00000000  00000000  0000978b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00009f9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	cd bf       	out	0x3d, r28	; 61
      98:	df e3       	ldi	r29, 0x3F	; 63
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
      a0:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <_exit>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
      b0:	0e 94 c1 02 	call	0x582	; 0x582 <system_init>
}
      b4:	00 00       	nop
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	08 95       	ret

000000bc <main>:
#include <atmel_start.h>
#include "toggle.h"

int main(void)
{
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	26 97       	sbiw	r28, 0x06	; 6
      c6:	cd bf       	out	0x3d, r28	; 61
      c8:	de bf       	out	0x3e, r29	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
      ca:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	int delay1=100,delay2=200,delay3=300;
      ce:	84 e6       	ldi	r24, 0x64	; 100
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	89 83       	std	Y+1, r24	; 0x01
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	88 ec       	ldi	r24, 0xC8	; 200
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	8b 83       	std	Y+3, r24	; 0x03
      dc:	9c 83       	std	Y+4, r25	; 0x04
      de:	8c e2       	ldi	r24, 0x2C	; 44
      e0:	91 e0       	ldi	r25, 0x01	; 1
      e2:	8d 83       	std	Y+5, r24	; 0x05
      e4:	9e 83       	std	Y+6, r25	; 0x06
	
	/* Replace with your application code */
	while (1) {
//		delaytoggling(delay1,delay2,delay3);
		toggle(delay1,delay2,delay3);
      e6:	4d 81       	ldd	r20, Y+5	; 0x05
      e8:	5e 81       	ldd	r21, Y+6	; 0x06
      ea:	2b 81       	ldd	r18, Y+3	; 0x03
      ec:	3c 81       	ldd	r19, Y+4	; 0x04
      ee:	89 81       	ldd	r24, Y+1	; 0x01
      f0:	9a 81       	ldd	r25, Y+2	; 0x02
      f2:	b9 01       	movw	r22, r18
      f4:	0e 94 9a 03 	call	0x734	; 0x734 <toggle>
	}
      f8:	f6 cf       	rjmp	.-20     	; 0xe6 <main+0x2a>

000000fa <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     102:	80 e0       	ldi	r24, 0x00	; 0
}
     104:	df 91       	pop	r29
     106:	cf 91       	pop	r28
     108:	08 95       	ret

0000010a <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	cd b7       	in	r28, 0x3d	; 61
     110:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     112:	80 e0       	ldi	r24, 0x00	; 0
}
     114:	df 91       	pop	r29
     116:	cf 91       	pop	r28
     118:	08 95       	ret

0000011a <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
     122:	80 e0       	ldi	r24, 0x00	; 0
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <PORTA_set_pin_dir+0x6>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	89 83       	std	Y+1, r24	; 0x01
     136:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     138:	8a 81       	ldd	r24, Y+2	; 0x02
     13a:	88 2f       	mov	r24, r24
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	81 30       	cpi	r24, 0x01	; 1
     140:	91 05       	cpc	r25, r1
     142:	e1 f0       	breq	.+56     	; 0x17c <PORTA_set_pin_dir+0x52>
     144:	82 30       	cpi	r24, 0x02	; 2
     146:	91 05       	cpc	r25, r1
     148:	71 f1       	breq	.+92     	; 0x1a6 <PORTA_set_pin_dir+0x7c>
     14a:	89 2b       	or	r24, r25
     14c:	09 f0       	breq	.+2      	; 0x150 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     14e:	3b c0       	rjmp	.+118    	; 0x1c6 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	fc 01       	movw	r30, r24
     15a:	80 81       	ld	r24, Z
     15c:	68 2f       	mov	r22, r24
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	48 2f       	mov	r20, r24
     162:	50 e0       	ldi	r21, 0x00	; 0
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	02 c0       	rjmp	.+4      	; 0x16e <PORTA_set_pin_dir+0x44>
     16a:	88 0f       	add	r24, r24
     16c:	99 1f       	adc	r25, r25
     16e:	4a 95       	dec	r20
     170:	e2 f7       	brpl	.-8      	; 0x16a <PORTA_set_pin_dir+0x40>
     172:	80 95       	com	r24
     174:	86 23       	and	r24, r22
     176:	f9 01       	movw	r30, r18
     178:	80 83       	st	Z, r24
		break;
     17a:	25 c0       	rjmp	.+74     	; 0x1c6 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	80 81       	ld	r24, Z
     188:	68 2f       	mov	r22, r24
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	48 2f       	mov	r20, r24
     18e:	50 e0       	ldi	r21, 0x00	; 0
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 c0       	rjmp	.+4      	; 0x19a <PORTA_set_pin_dir+0x70>
     196:	88 0f       	add	r24, r24
     198:	99 1f       	adc	r25, r25
     19a:	4a 95       	dec	r20
     19c:	e2 f7       	brpl	.-8      	; 0x196 <PORTA_set_pin_dir+0x6c>
     19e:	86 2b       	or	r24, r22
     1a0:	f9 01       	movw	r30, r18
     1a2:	80 83       	st	Z, r24
		break;
     1a4:	10 c0       	rjmp	.+32     	; 0x1c6 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	88 2f       	mov	r24, r24
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	80 5f       	subi	r24, 0xF0	; 240
     1ae:	9b 4f       	sbci	r25, 0xFB	; 251
     1b0:	29 81       	ldd	r18, Y+1	; 0x01
     1b2:	22 2f       	mov	r18, r18
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	20 5f       	subi	r18, 0xF0	; 240
     1b8:	3b 4f       	sbci	r19, 0xFB	; 251
     1ba:	f9 01       	movw	r30, r18
     1bc:	20 81       	ld	r18, Z
     1be:	28 60       	ori	r18, 0x08	; 8
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 83       	st	Z, r18
		break;
     1c4:	00 00       	nop
	default:
		break;
	}
}
     1c6:	00 00       	nop
     1c8:	0f 90       	pop	r0
     1ca:	0f 90       	pop	r0
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	08 95       	ret

000001d2 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <PORTA_set_pin_level+0x6>
     1d8:	cd b7       	in	r28, 0x3d	; 61
     1da:	de b7       	in	r29, 0x3e	; 62
     1dc:	89 83       	std	Y+1, r24	; 0x01
     1de:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	88 23       	and	r24, r24
     1e4:	a9 f0       	breq	.+42     	; 0x210 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	fc 01       	movw	r30, r24
     1f0:	81 81       	ldd	r24, Z+1	; 0x01
     1f2:	68 2f       	mov	r22, r24
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	48 2f       	mov	r20, r24
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <PORTA_set_pin_level+0x32>
     200:	88 0f       	add	r24, r24
     202:	99 1f       	adc	r25, r25
     204:	4a 95       	dec	r20
     206:	e2 f7       	brpl	.-8      	; 0x200 <PORTA_set_pin_level+0x2e>
     208:	86 2b       	or	r24, r22
     20a:	f9 01       	movw	r30, r18
     20c:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
     20e:	15 c0       	rjmp	.+42     	; 0x23a <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	fc 01       	movw	r30, r24
     21a:	81 81       	ldd	r24, Z+1	; 0x01
     21c:	68 2f       	mov	r22, r24
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	48 2f       	mov	r20, r24
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <PORTA_set_pin_level+0x5c>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	4a 95       	dec	r20
     230:	e2 f7       	brpl	.-8      	; 0x22a <PORTA_set_pin_level+0x58>
     232:	80 95       	com	r24
     234:	86 23       	and	r24, r22
     236:	f9 01       	movw	r30, r18
     238:	81 83       	std	Z+1, r24	; 0x01
	}
}
     23a:	00 00       	nop
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	08 95       	ret

00000246 <PORTD_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	00 d0       	rcall	.+0      	; 0x24c <PORTD_set_pin_dir+0x6>
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	89 83       	std	Y+1, r24	; 0x01
     252:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	81 30       	cpi	r24, 0x01	; 1
     25c:	91 05       	cpc	r25, r1
     25e:	e1 f0       	breq	.+56     	; 0x298 <PORTD_set_pin_dir+0x52>
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	91 05       	cpc	r25, r1
     264:	71 f1       	breq	.+92     	; 0x2c2 <PORTD_set_pin_dir+0x7c>
     266:	89 2b       	or	r24, r25
     268:	09 f0       	breq	.+2      	; 0x26c <PORTD_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     26a:	3b c0       	rjmp	.+118    	; 0x2e2 <PORTD_set_pin_dir+0x9c>
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
     26c:	8c e0       	ldi	r24, 0x0C	; 12
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	2c e0       	ldi	r18, 0x0C	; 12
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	f9 01       	movw	r30, r18
     276:	20 81       	ld	r18, Z
     278:	62 2f       	mov	r22, r18
     27a:	29 81       	ldd	r18, Y+1	; 0x01
     27c:	42 2f       	mov	r20, r18
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	02 c0       	rjmp	.+4      	; 0x28a <PORTD_set_pin_dir+0x44>
     286:	22 0f       	add	r18, r18
     288:	33 1f       	adc	r19, r19
     28a:	4a 95       	dec	r20
     28c:	e2 f7       	brpl	.-8      	; 0x286 <PORTD_set_pin_dir+0x40>
     28e:	20 95       	com	r18
     290:	26 23       	and	r18, r22
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
		break;
     296:	25 c0       	rjmp	.+74     	; 0x2e2 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
     298:	8c e0       	ldi	r24, 0x0C	; 12
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	2c e0       	ldi	r18, 0x0C	; 12
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	f9 01       	movw	r30, r18
     2a2:	20 81       	ld	r18, Z
     2a4:	62 2f       	mov	r22, r18
     2a6:	29 81       	ldd	r18, Y+1	; 0x01
     2a8:	42 2f       	mov	r20, r18
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	21 e0       	ldi	r18, 0x01	; 1
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <PORTD_set_pin_dir+0x70>
     2b2:	22 0f       	add	r18, r18
     2b4:	33 1f       	adc	r19, r19
     2b6:	4a 95       	dec	r20
     2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <PORTD_set_pin_dir+0x6c>
     2ba:	26 2b       	or	r18, r22
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18
		break;
     2c0:	10 c0       	rjmp	.+32     	; 0x2e2 <PORTD_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTD + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	80 59       	subi	r24, 0x90	; 144
     2ca:	9b 4f       	sbci	r25, 0xFB	; 251
     2cc:	29 81       	ldd	r18, Y+1	; 0x01
     2ce:	22 2f       	mov	r18, r18
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	20 59       	subi	r18, 0x90	; 144
     2d4:	3b 4f       	sbci	r19, 0xFB	; 251
     2d6:	f9 01       	movw	r30, r18
     2d8:	20 81       	ld	r18, Z
     2da:	28 60       	ori	r18, 0x08	; 8
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18
		break;
     2e0:	00 00       	nop
	default:
		break;
	}
}
     2e2:	00 00       	nop
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <PORTD_set_pin_level+0x6>
     2f4:	cd b7       	in	r28, 0x3d	; 61
     2f6:	de b7       	in	r29, 0x3e	; 62
     2f8:	89 83       	std	Y+1, r24	; 0x01
     2fa:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	88 23       	and	r24, r24
     300:	a9 f0       	breq	.+42     	; 0x32c <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
     302:	8c e0       	ldi	r24, 0x0C	; 12
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	2c e0       	ldi	r18, 0x0C	; 12
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f9 01       	movw	r30, r18
     30c:	21 81       	ldd	r18, Z+1	; 0x01
     30e:	62 2f       	mov	r22, r18
     310:	29 81       	ldd	r18, Y+1	; 0x01
     312:	42 2f       	mov	r20, r18
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	21 e0       	ldi	r18, 0x01	; 1
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	02 c0       	rjmp	.+4      	; 0x320 <PORTD_set_pin_level+0x32>
     31c:	22 0f       	add	r18, r18
     31e:	33 1f       	adc	r19, r19
     320:	4a 95       	dec	r20
     322:	e2 f7       	brpl	.-8      	; 0x31c <PORTD_set_pin_level+0x2e>
     324:	26 2b       	or	r18, r22
     326:	fc 01       	movw	r30, r24
     328:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
     32a:	15 c0       	rjmp	.+42     	; 0x356 <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     32c:	8c e0       	ldi	r24, 0x0C	; 12
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	2c e0       	ldi	r18, 0x0C	; 12
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	f9 01       	movw	r30, r18
     336:	21 81       	ldd	r18, Z+1	; 0x01
     338:	62 2f       	mov	r22, r18
     33a:	29 81       	ldd	r18, Y+1	; 0x01
     33c:	42 2f       	mov	r20, r18
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	21 e0       	ldi	r18, 0x01	; 1
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	02 c0       	rjmp	.+4      	; 0x34a <PORTD_set_pin_level+0x5c>
     346:	22 0f       	add	r18, r18
     348:	33 1f       	adc	r19, r19
     34a:	4a 95       	dec	r20
     34c:	e2 f7       	brpl	.-8      	; 0x346 <PORTD_set_pin_level+0x58>
     34e:	20 95       	com	r18
     350:	26 23       	and	r18, r22
     352:	fc 01       	movw	r30, r24
     354:	21 83       	std	Z+1, r18	; 0x01
	}
}
     356:	00 00       	nop
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	08 95       	ret

00000362 <W0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void W0_MCU_set_dir(const enum port_dir dir)
{
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	1f 92       	push	r1
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(3, dir);
     36e:	69 81       	ldd	r22, Y+1	; 0x01
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	0e 94 95 00 	call	0x12a	; 0x12a <PORTA_set_pin_dir>
}
     376:	00 00       	nop
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <W0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void W0_MCU_set_level(const bool level)
{
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	1f 92       	push	r1
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(3, level);
     38c:	69 81       	ldd	r22, Y+1	; 0x01
     38e:	83 e0       	ldi	r24, 0x03	; 3
     390:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <PORTA_set_pin_level>
}
     394:	00 00       	nop
     396:	0f 90       	pop	r0
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <R0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void R0_MCU_set_dir(const enum port_dir dir)
{
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	1f 92       	push	r1
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(0, dir);
     3aa:	69 81       	ldd	r22, Y+1	; 0x01
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 23 01 	call	0x246	; 0x246 <PORTD_set_pin_dir>
}
     3b2:	00 00       	nop
     3b4:	0f 90       	pop	r0
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	08 95       	ret

000003bc <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     3bc:	cf 93       	push	r28
     3be:	df 93       	push	r29
     3c0:	1f 92       	push	r1
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     3c8:	69 81       	ldd	r22, Y+1	; 0x01
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	0e 94 77 01 	call	0x2ee	; 0x2ee <PORTD_set_pin_level>
}
     3d0:	00 00       	nop
     3d2:	0f 90       	pop	r0
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <G0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void G0_MCU_set_dir(const enum port_dir dir)
{
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	1f 92       	push	r1
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(1, dir);
     3e6:	69 81       	ldd	r22, Y+1	; 0x01
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 23 01 	call	0x246	; 0x246 <PORTD_set_pin_dir>
}
     3ee:	00 00       	nop
     3f0:	0f 90       	pop	r0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	1f 92       	push	r1
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
     402:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     404:	69 81       	ldd	r22, Y+1	; 0x01
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	0e 94 77 01 	call	0x2ee	; 0x2ee <PORTD_set_pin_level>
}
     40c:	00 00       	nop
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <B0_MCU_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void B0_MCU_set_dir(const enum port_dir dir)
{
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_dir(2, dir);
     422:	69 81       	ldd	r22, Y+1	; 0x01
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	0e 94 23 01 	call	0x246	; 0x246 <PORTD_set_pin_dir>
}
     42a:	00 00       	nop
     42c:	0f 90       	pop	r0
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	1f 92       	push	r1
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     440:	69 81       	ldd	r22, Y+1	; 0x01
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 77 01 	call	0x2ee	; 0x2ee <PORTD_set_pin_level>
}
     448:	00 00       	nop
     44a:	0f 90       	pop	r0
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
     45a:	26 97       	sbiw	r28, 0x06	; 6
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     460:	19 82       	std	Y+1, r1	; 0x01
     462:	12 c0       	rjmp	.+36     	; 0x488 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	88 2f       	mov	r24, r24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	80 5f       	subi	r24, 0xF0	; 240
     46c:	9b 4f       	sbci	r25, 0xFB	; 251
     46e:	29 81       	ldd	r18, Y+1	; 0x01
     470:	22 2f       	mov	r18, r18
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	20 5f       	subi	r18, 0xF0	; 240
     476:	3b 4f       	sbci	r19, 0xFB	; 251
     478:	f9 01       	movw	r30, r18
     47a:	20 81       	ld	r18, Z
     47c:	28 60       	ori	r18, 0x08	; 8
     47e:	fc 01       	movw	r30, r24
     480:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
     482:	89 81       	ldd	r24, Y+1	; 0x01
     484:	8f 5f       	subi	r24, 0xFF	; 255
     486:	89 83       	std	Y+1, r24	; 0x01
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	88 30       	cpi	r24, 0x08	; 8
     48c:	58 f3       	brcs	.-42     	; 0x464 <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     48e:	1a 82       	std	Y+2, r1	; 0x02
     490:	12 c0       	rjmp	.+36     	; 0x4b6 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	88 2f       	mov	r24, r24
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	80 5d       	subi	r24, 0xD0	; 208
     49a:	9b 4f       	sbci	r25, 0xFB	; 251
     49c:	2a 81       	ldd	r18, Y+2	; 0x02
     49e:	22 2f       	mov	r18, r18
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	20 5d       	subi	r18, 0xD0	; 208
     4a4:	3b 4f       	sbci	r19, 0xFB	; 251
     4a6:	f9 01       	movw	r30, r18
     4a8:	20 81       	ld	r18, Z
     4aa:	28 60       	ori	r18, 0x08	; 8
     4ac:	fc 01       	movw	r30, r24
     4ae:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	8a 83       	std	Y+2, r24	; 0x02
     4b6:	8a 81       	ldd	r24, Y+2	; 0x02
     4b8:	88 30       	cpi	r24, 0x08	; 8
     4ba:	58 f3       	brcs	.-42     	; 0x492 <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4bc:	1b 82       	std	Y+3, r1	; 0x03
     4be:	12 c0       	rjmp	.+36     	; 0x4e4 <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4c0:	8b 81       	ldd	r24, Y+3	; 0x03
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	80 5b       	subi	r24, 0xB0	; 176
     4c8:	9b 4f       	sbci	r25, 0xFB	; 251
     4ca:	2b 81       	ldd	r18, Y+3	; 0x03
     4cc:	22 2f       	mov	r18, r18
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	20 5b       	subi	r18, 0xB0	; 176
     4d2:	3b 4f       	sbci	r19, 0xFB	; 251
     4d4:	f9 01       	movw	r30, r18
     4d6:	20 81       	ld	r18, Z
     4d8:	28 60       	ori	r18, 0x08	; 8
     4da:	fc 01       	movw	r30, r24
     4dc:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	8f 5f       	subi	r24, 0xFF	; 255
     4e2:	8b 83       	std	Y+3, r24	; 0x03
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	88 30       	cpi	r24, 0x08	; 8
     4e8:	58 f3       	brcs	.-42     	; 0x4c0 <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     4ea:	1c 82       	std	Y+4, r1	; 0x04
     4ec:	12 c0       	rjmp	.+36     	; 0x512 <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     4ee:	8c 81       	ldd	r24, Y+4	; 0x04
     4f0:	88 2f       	mov	r24, r24
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	80 59       	subi	r24, 0x90	; 144
     4f6:	9b 4f       	sbci	r25, 0xFB	; 251
     4f8:	2c 81       	ldd	r18, Y+4	; 0x04
     4fa:	22 2f       	mov	r18, r18
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	20 59       	subi	r18, 0x90	; 144
     500:	3b 4f       	sbci	r19, 0xFB	; 251
     502:	f9 01       	movw	r30, r18
     504:	20 81       	ld	r18, Z
     506:	28 60       	ori	r18, 0x08	; 8
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     50c:	8c 81       	ldd	r24, Y+4	; 0x04
     50e:	8f 5f       	subi	r24, 0xFF	; 255
     510:	8c 83       	std	Y+4, r24	; 0x04
     512:	8c 81       	ldd	r24, Y+4	; 0x04
     514:	88 30       	cpi	r24, 0x08	; 8
     516:	58 f3       	brcs	.-42     	; 0x4ee <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     518:	1d 82       	std	Y+5, r1	; 0x05
     51a:	12 c0       	rjmp	.+36     	; 0x540 <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     51c:	8d 81       	ldd	r24, Y+5	; 0x05
     51e:	88 2f       	mov	r24, r24
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	80 57       	subi	r24, 0x70	; 112
     524:	9b 4f       	sbci	r25, 0xFB	; 251
     526:	2d 81       	ldd	r18, Y+5	; 0x05
     528:	22 2f       	mov	r18, r18
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	20 57       	subi	r18, 0x70	; 112
     52e:	3b 4f       	sbci	r19, 0xFB	; 251
     530:	f9 01       	movw	r30, r18
     532:	20 81       	ld	r18, Z
     534:	28 60       	ori	r18, 0x08	; 8
     536:	fc 01       	movw	r30, r24
     538:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     53a:	8d 81       	ldd	r24, Y+5	; 0x05
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	8d 83       	std	Y+5, r24	; 0x05
     540:	8d 81       	ldd	r24, Y+5	; 0x05
     542:	88 30       	cpi	r24, 0x08	; 8
     544:	58 f3       	brcs	.-42     	; 0x51c <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     546:	1e 82       	std	Y+6, r1	; 0x06
     548:	12 c0       	rjmp	.+36     	; 0x56e <mcu_init+0x11c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
     54a:	8e 81       	ldd	r24, Y+6	; 0x06
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	80 55       	subi	r24, 0x50	; 80
     552:	9b 4f       	sbci	r25, 0xFB	; 251
     554:	2e 81       	ldd	r18, Y+6	; 0x06
     556:	22 2f       	mov	r18, r18
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	20 55       	subi	r18, 0x50	; 80
     55c:	3b 4f       	sbci	r19, 0xFB	; 251
     55e:	f9 01       	movw	r30, r18
     560:	20 81       	ld	r18, Z
     562:	28 60       	ori	r18, 0x08	; 8
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
     568:	8e 81       	ldd	r24, Y+6	; 0x06
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	8e 83       	std	Y+6, r24	; 0x06
     56e:	8e 81       	ldd	r24, Y+6	; 0x06
     570:	88 30       	cpi	r24, 0x08	; 8
     572:	58 f3       	brcs	.-42     	; 0x54a <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
     574:	00 00       	nop
     576:	26 96       	adiw	r28, 0x06	; 6
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	08 95       	ret

00000582 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
     58a:	0e 94 29 02 	call	0x452	; 0x452 <mcu_init>

	/* PORT setting on PA3 */

	// Set pin direction to output

	W0_MCU_set_level(
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 c0 01 	call	0x380	; 0x380 <W0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	W0_MCU_set_dir(PORT_DIR_OUT);
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	0e 94 b1 01 	call	0x362	; 0x362 <W0_MCU_set_dir>

	/* PORT setting on PD0 */

	// Set pin direction to output

	R0_MCU_set_level(
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 de 01 	call	0x3bc	; 0x3bc <R0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	R0_MCU_set_dir(PORT_DIR_OUT);
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 cf 01 	call	0x39e	; 0x39e <R0_MCU_set_dir>

	/* PORT setting on PD1 */

	// Set pin direction to output

	G0_MCU_set_level(
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <G0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	G0_MCU_set_dir(PORT_DIR_OUT);
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 ed 01 	call	0x3da	; 0x3da <G0_MCU_set_dir>

	/* PORT setting on PD2 */

	// Set pin direction to output

	B0_MCU_set_level(
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 1a 02 	call	0x434	; 0x434 <B0_MCU_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	B0_MCU_set_dir(PORT_DIR_OUT);
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 0b 02 	call	0x416	; 0x416 <B0_MCU_set_dir>

	CLKCTRL_init();
     5be:	0e 94 85 00 	call	0x10a	; 0x10a <CLKCTRL_init>

	CPUINT_init();
     5c2:	0e 94 8d 00 	call	0x11a	; 0x11a <CPUINT_init>

	SLPCTRL_init();
     5c6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <SLPCTRL_init>

	BOD_init();
     5ca:	0e 94 7d 00 	call	0xfa	; 0xfa <BOD_init>
}
     5ce:	00 00       	nop
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
     5de:	80 e0       	ldi	r24, 0x00	; 0
}
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <PORTD_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	00 d0       	rcall	.+0      	; 0x5ec <PORTD_set_pin_level+0x6>
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     5f4:	8a 81       	ldd	r24, Y+2	; 0x02
     5f6:	88 23       	and	r24, r24
     5f8:	a9 f0       	breq	.+42     	; 0x624 <PORTD_set_pin_level+0x3e>
		VPORTD.OUT |= (1 << pin);
     5fa:	8c e0       	ldi	r24, 0x0C	; 12
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	2c e0       	ldi	r18, 0x0C	; 12
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	f9 01       	movw	r30, r18
     604:	21 81       	ldd	r18, Z+1	; 0x01
     606:	62 2f       	mov	r22, r18
     608:	29 81       	ldd	r18, Y+1	; 0x01
     60a:	42 2f       	mov	r20, r18
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	21 e0       	ldi	r18, 0x01	; 1
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	02 c0       	rjmp	.+4      	; 0x618 <PORTD_set_pin_level+0x32>
     614:	22 0f       	add	r18, r18
     616:	33 1f       	adc	r19, r19
     618:	4a 95       	dec	r20
     61a:	e2 f7       	brpl	.-8      	; 0x614 <PORTD_set_pin_level+0x2e>
     61c:	26 2b       	or	r18, r22
     61e:	fc 01       	movw	r30, r24
     620:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTD.OUT &= ~(1 << pin);
	}
}
     622:	15 c0       	rjmp	.+42     	; 0x64e <PORTD_set_pin_level+0x68>
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
     624:	8c e0       	ldi	r24, 0x0C	; 12
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	2c e0       	ldi	r18, 0x0C	; 12
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	f9 01       	movw	r30, r18
     62e:	21 81       	ldd	r18, Z+1	; 0x01
     630:	62 2f       	mov	r22, r18
     632:	29 81       	ldd	r18, Y+1	; 0x01
     634:	42 2f       	mov	r20, r18
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	21 e0       	ldi	r18, 0x01	; 1
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	02 c0       	rjmp	.+4      	; 0x642 <PORTD_set_pin_level+0x5c>
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	4a 95       	dec	r20
     644:	e2 f7       	brpl	.-8      	; 0x63e <PORTD_set_pin_level+0x58>
     646:	20 95       	com	r18
     648:	26 23       	and	r18, r22
     64a:	fc 01       	movw	r30, r24
     64c:	21 83       	std	Z+1, r18	; 0x01
	}
}
     64e:	00 00       	nop
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <PORTD_toggle_pin_level>:
 * Toggle the pin levels on pins defined by bit mask
 *
 * \param[in] pin       The pin number within port
 */
static inline void PORTD_toggle_pin_level(const uint8_t pin)
{
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	1f 92       	push	r1
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	89 83       	std	Y+1, r24	; 0x01
	VPORTD.IN |= 1 << pin;
     666:	8c e0       	ldi	r24, 0x0C	; 12
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	2c e0       	ldi	r18, 0x0C	; 12
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	f9 01       	movw	r30, r18
     670:	22 81       	ldd	r18, Z+2	; 0x02
     672:	62 2f       	mov	r22, r18
     674:	29 81       	ldd	r18, Y+1	; 0x01
     676:	42 2f       	mov	r20, r18
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	21 e0       	ldi	r18, 0x01	; 1
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	02 c0       	rjmp	.+4      	; 0x684 <PORTD_toggle_pin_level+0x2a>
     680:	22 0f       	add	r18, r18
     682:	33 1f       	adc	r19, r19
     684:	4a 95       	dec	r20
     686:	e2 f7       	brpl	.-8      	; 0x680 <PORTD_toggle_pin_level+0x26>
     688:	26 2b       	or	r18, r22
     68a:	fc 01       	movw	r30, r24
     68c:	22 83       	std	Z+2, r18	; 0x02
}
     68e:	00 00       	nop
     690:	0f 90       	pop	r0
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <R0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void R0_MCU_set_level(const bool level)
{
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(0, level);
     6a4:	69 81       	ldd	r22, Y+1	; 0x01
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <PORTD_set_pin_level>
}
     6ac:	00 00       	nop
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <R0_MCU_toggle_level>:
 * \brief Toggle output level on R0_MCU
 *
 * Toggle the pin level
 */
static inline void R0_MCU_toggle_level()
{
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(0);
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	0e 94 2d 03 	call	0x65a	; 0x65a <PORTD_toggle_pin_level>
}
     6c4:	00 00       	nop
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <G0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void G0_MCU_set_level(const bool level)
{
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	1f 92       	push	r1
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
     6d6:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(1, level);
     6d8:	69 81       	ldd	r22, Y+1	; 0x01
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <PORTD_set_pin_level>
}
     6e0:	00 00       	nop
     6e2:	0f 90       	pop	r0
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <G0_MCU_toggle_level>:
 * \brief Toggle output level on G0_MCU
 *
 * Toggle the pin level
 */
static inline void G0_MCU_toggle_level()
{
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(1);
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 2d 03 	call	0x65a	; 0x65a <PORTD_toggle_pin_level>
}
     6f8:	00 00       	nop
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <B0_MCU_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void B0_MCU_set_level(const bool level)
{
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
     704:	1f 92       	push	r1
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	89 83       	std	Y+1, r24	; 0x01
	PORTD_set_pin_level(2, level);
     70c:	69 81       	ldd	r22, Y+1	; 0x01
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <PORTD_set_pin_level>
}
     714:	00 00       	nop
     716:	0f 90       	pop	r0
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <B0_MCU_toggle_level>:
 * \brief Toggle output level on B0_MCU
 *
 * Toggle the pin level
 */
static inline void B0_MCU_toggle_level()
{
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
	PORTD_toggle_pin_level(2);
     726:	82 e0       	ldi	r24, 0x02	; 2
     728:	0e 94 2d 03 	call	0x65a	; 0x65a <PORTD_toggle_pin_level>
}
     72c:	00 00       	nop
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	08 95       	ret

00000734 <toggle>:
 * Created: 26-09-2023 09:29:33
 *  Author: faris
 */ 
#include "toggle.h"
#include "atmel_start.h"
void toggle(int delay1,int delay2,int delay3){
     734:	0f 93       	push	r16
     736:	1f 93       	push	r17
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	c6 57       	subi	r28, 0x76	; 118
     742:	d1 09       	sbc	r29, r1
     744:	cd bf       	out	0x3d, r28	; 61
     746:	de bf       	out	0x3e, r29	; 62
     748:	9e 01       	movw	r18, r28
     74a:	2f 58       	subi	r18, 0x8F	; 143
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	f9 01       	movw	r30, r18
     750:	80 83       	st	Z, r24
     752:	91 83       	std	Z+1, r25	; 0x01
     754:	ce 01       	movw	r24, r28
     756:	8d 58       	subi	r24, 0x8D	; 141
     758:	9f 4f       	sbci	r25, 0xFF	; 255
     75a:	fc 01       	movw	r30, r24
     75c:	60 83       	st	Z, r22
     75e:	71 83       	std	Z+1, r23	; 0x01
     760:	ce 01       	movw	r24, r28
     762:	8b 58       	subi	r24, 0x8B	; 139
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	fc 01       	movw	r30, r24
     768:	40 83       	st	Z, r20
     76a:	51 83       	std	Z+1, r21	; 0x01
	/*TURNING RESPECTIVE LED WITH SPECIFIED DELAYS*/
			R0_MCU_toggle_level(true);
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <R0_MCU_toggle_level>
			_delay_ms(delay1);
     774:	ce 01       	movw	r24, r28
     776:	8f 58       	subi	r24, 0x8F	; 143
     778:	9f 4f       	sbci	r25, 0xFF	; 255
     77a:	fc 01       	movw	r30, r24
     77c:	80 81       	ld	r24, Z
     77e:	91 81       	ldd	r25, Z+1	; 0x01
     780:	09 2e       	mov	r0, r25
     782:	00 0c       	add	r0, r0
     784:	aa 0b       	sbc	r26, r26
     786:	bb 0b       	sbc	r27, r27
     788:	bc 01       	movw	r22, r24
     78a:	cd 01       	movw	r24, r26
     78c:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatsisf>
     790:	dc 01       	movw	r26, r24
     792:	cb 01       	movw	r24, r22
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	9a 83       	std	Y+2, r25	; 0x02
     798:	ab 83       	std	Y+3, r26	; 0x03
     79a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     79c:	8e 01       	movw	r16, r28
     79e:	09 59       	subi	r16, 0x99	; 153
     7a0:	1f 4f       	sbci	r17, 0xFF	; 255
     7a2:	24 e5       	ldi	r18, 0x54	; 84
     7a4:	35 e5       	ldi	r19, 0x55	; 85
     7a6:	40 e5       	ldi	r20, 0x50	; 80
     7a8:	54 e4       	ldi	r21, 0x44	; 68
     7aa:	69 81       	ldd	r22, Y+1	; 0x01
     7ac:	7a 81       	ldd	r23, Y+2	; 0x02
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	f8 01       	movw	r30, r16
     7bc:	80 83       	st	Z, r24
     7be:	91 83       	std	Z+1, r25	; 0x01
     7c0:	a2 83       	std	Z+2, r26	; 0x02
     7c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7c4:	ce 01       	movw	r24, r28
     7c6:	89 59       	subi	r24, 0x99	; 153
     7c8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e8       	ldi	r20, 0x80	; 128
     7d0:	5f e3       	ldi	r21, 0x3F	; 63
     7d2:	fc 01       	movw	r30, r24
     7d4:	60 81       	ld	r22, Z
     7d6:	71 81       	ldd	r23, Z+1	; 0x01
     7d8:	82 81       	ldd	r24, Z+2	; 0x02
     7da:	93 81       	ldd	r25, Z+3	; 0x03
     7dc:	0e 94 29 09 	call	0x1252	; 0x1252 <__cmpsf2>
     7e0:	88 23       	and	r24, r24
     7e2:	4c f4       	brge	.+18     	; 0x7f6 <toggle+0xc2>
		__ticks = 1;
     7e4:	ce 01       	movw	r24, r28
     7e6:	85 59       	subi	r24, 0x95	; 149
     7e8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 83       	st	Z, r18
     7f2:	31 83       	std	Z+1, r19	; 0x01
     7f4:	69 c0       	rjmp	.+210    	; 0x8c8 <toggle+0x194>
	else if (__tmp > 65535)
     7f6:	ce 01       	movw	r24, r28
     7f8:	89 59       	subi	r24, 0x99	; 153
     7fa:	9f 4f       	sbci	r25, 0xFF	; 255
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	3f ef       	ldi	r19, 0xFF	; 255
     800:	4f e7       	ldi	r20, 0x7F	; 127
     802:	57 e4       	ldi	r21, 0x47	; 71
     804:	fc 01       	movw	r30, r24
     806:	60 81       	ld	r22, Z
     808:	71 81       	ldd	r23, Z+1	; 0x01
     80a:	82 81       	ldd	r24, Z+2	; 0x02
     80c:	93 81       	ldd	r25, Z+3	; 0x03
     80e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     812:	18 16       	cp	r1, r24
     814:	0c f0       	brlt	.+2      	; 0x818 <toggle+0xe4>
     816:	46 c0       	rjmp	.+140    	; 0x8a4 <toggle+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e2       	ldi	r20, 0x20	; 32
     81e:	51 e4       	ldi	r21, 0x41	; 65
     820:	69 81       	ldd	r22, Y+1	; 0x01
     822:	7a 81       	ldd	r23, Y+2	; 0x02
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	9c 81       	ldd	r25, Y+4	; 0x04
     828:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	8e 01       	movw	r16, r28
     832:	05 59       	subi	r16, 0x95	; 149
     834:	1f 4f       	sbci	r17, 0xFF	; 255
     836:	bc 01       	movw	r22, r24
     838:	cd 01       	movw	r24, r26
     83a:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     83e:	dc 01       	movw	r26, r24
     840:	cb 01       	movw	r24, r22
     842:	f8 01       	movw	r30, r16
     844:	80 83       	st	Z, r24
     846:	91 83       	std	Z+1, r25	; 0x01
     848:	24 c0       	rjmp	.+72     	; 0x892 <toggle+0x15e>
     84a:	ce 01       	movw	r24, r28
     84c:	83 59       	subi	r24, 0x93	; 147
     84e:	9f 4f       	sbci	r25, 0xFF	; 255
     850:	23 e5       	ldi	r18, 0x53	; 83
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
     858:	31 83       	std	Z+1, r19	; 0x01
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     85a:	ce 01       	movw	r24, r28
     85c:	83 59       	subi	r24, 0x93	; 147
     85e:	9f 4f       	sbci	r25, 0xFF	; 255
     860:	fc 01       	movw	r30, r24
     862:	80 81       	ld	r24, Z
     864:	91 81       	ldd	r25, Z+1	; 0x01
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	f1 f7       	brne	.-4      	; 0x866 <toggle+0x132>
     86a:	9e 01       	movw	r18, r28
     86c:	23 59       	subi	r18, 0x93	; 147
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	f9 01       	movw	r30, r18
     872:	80 83       	st	Z, r24
     874:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     876:	ce 01       	movw	r24, r28
     878:	85 59       	subi	r24, 0x95	; 149
     87a:	9f 4f       	sbci	r25, 0xFF	; 255
     87c:	9e 01       	movw	r18, r28
     87e:	25 59       	subi	r18, 0x95	; 149
     880:	3f 4f       	sbci	r19, 0xFF	; 255
     882:	f9 01       	movw	r30, r18
     884:	20 81       	ld	r18, Z
     886:	31 81       	ldd	r19, Z+1	; 0x01
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	31 09       	sbc	r19, r1
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
     890:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     892:	ce 01       	movw	r24, r28
     894:	85 59       	subi	r24, 0x95	; 149
     896:	9f 4f       	sbci	r25, 0xFF	; 255
     898:	fc 01       	movw	r30, r24
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	89 2b       	or	r24, r25
     8a0:	a1 f6       	brne	.-88     	; 0x84a <toggle+0x116>
     8a2:	2c c0       	rjmp	.+88     	; 0x8fc <toggle+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8a4:	8e 01       	movw	r16, r28
     8a6:	05 59       	subi	r16, 0x95	; 149
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
     8ac:	89 59       	subi	r24, 0x99	; 153
     8ae:	9f 4f       	sbci	r25, 0xFF	; 255
     8b0:	fc 01       	movw	r30, r24
     8b2:	60 81       	ld	r22, Z
     8b4:	71 81       	ldd	r23, Z+1	; 0x01
     8b6:	82 81       	ldd	r24, Z+2	; 0x02
     8b8:	93 81       	ldd	r25, Z+3	; 0x03
     8ba:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	f8 01       	movw	r30, r16
     8c4:	80 83       	st	Z, r24
     8c6:	91 83       	std	Z+1, r25	; 0x01
     8c8:	ce 01       	movw	r24, r28
     8ca:	81 59       	subi	r24, 0x91	; 145
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	9e 01       	movw	r18, r28
     8d0:	25 59       	subi	r18, 0x95	; 149
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
     8d4:	f9 01       	movw	r30, r18
     8d6:	20 81       	ld	r18, Z
     8d8:	31 81       	ldd	r19, Z+1	; 0x01
     8da:	fc 01       	movw	r30, r24
     8dc:	20 83       	st	Z, r18
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	ce 01       	movw	r24, r28
     8e2:	81 59       	subi	r24, 0x91	; 145
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	fc 01       	movw	r30, r24
     8e8:	80 81       	ld	r24, Z
     8ea:	91 81       	ldd	r25, Z+1	; 0x01
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	f1 f7       	brne	.-4      	; 0x8ec <toggle+0x1b8>
     8f0:	9e 01       	movw	r18, r28
     8f2:	21 59       	subi	r18, 0x91	; 145
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	f9 01       	movw	r30, r18
     8f8:	80 83       	st	Z, r24
     8fa:	91 83       	std	Z+1, r25	; 0x01
 			G0_MCU_toggle_level(true);
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 75 03 	call	0x6ea	; 0x6ea <G0_MCU_toggle_level>
 			_delay_ms(delay2);
     904:	ce 01       	movw	r24, r28
     906:	8d 58       	subi	r24, 0x8D	; 141
     908:	9f 4f       	sbci	r25, 0xFF	; 255
     90a:	fc 01       	movw	r30, r24
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	09 2e       	mov	r0, r25
     912:	00 0c       	add	r0, r0
     914:	aa 0b       	sbc	r26, r26
     916:	bb 0b       	sbc	r27, r27
     918:	bc 01       	movw	r22, r24
     91a:	cd 01       	movw	r24, r26
     91c:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatsisf>
     920:	dc 01       	movw	r26, r24
     922:	cb 01       	movw	r24, r22
     924:	8d 83       	std	Y+5, r24	; 0x05
     926:	9e 83       	std	Y+6, r25	; 0x06
     928:	af 83       	std	Y+7, r26	; 0x07
     92a:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     92c:	8e 01       	movw	r16, r28
     92e:	03 5a       	subi	r16, 0xA3	; 163
     930:	1f 4f       	sbci	r17, 0xFF	; 255
     932:	24 e5       	ldi	r18, 0x54	; 84
     934:	35 e5       	ldi	r19, 0x55	; 85
     936:	40 e5       	ldi	r20, 0x50	; 80
     938:	54 e4       	ldi	r21, 0x44	; 68
     93a:	6d 81       	ldd	r22, Y+5	; 0x05
     93c:	7e 81       	ldd	r23, Y+6	; 0x06
     93e:	8f 81       	ldd	r24, Y+7	; 0x07
     940:	98 85       	ldd	r25, Y+8	; 0x08
     942:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     946:	dc 01       	movw	r26, r24
     948:	cb 01       	movw	r24, r22
     94a:	f8 01       	movw	r30, r16
     94c:	80 83       	st	Z, r24
     94e:	91 83       	std	Z+1, r25	; 0x01
     950:	a2 83       	std	Z+2, r26	; 0x02
     952:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     954:	ce 01       	movw	r24, r28
     956:	83 5a       	subi	r24, 0xA3	; 163
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e8       	ldi	r20, 0x80	; 128
     960:	5f e3       	ldi	r21, 0x3F	; 63
     962:	fc 01       	movw	r30, r24
     964:	60 81       	ld	r22, Z
     966:	71 81       	ldd	r23, Z+1	; 0x01
     968:	82 81       	ldd	r24, Z+2	; 0x02
     96a:	93 81       	ldd	r25, Z+3	; 0x03
     96c:	0e 94 29 09 	call	0x1252	; 0x1252 <__cmpsf2>
     970:	88 23       	and	r24, r24
     972:	4c f4       	brge	.+18     	; 0x986 <toggle+0x252>
		__ticks = 1;
     974:	ce 01       	movw	r24, r28
     976:	8f 59       	subi	r24, 0x9F	; 159
     978:	9f 4f       	sbci	r25, 0xFF	; 255
     97a:	21 e0       	ldi	r18, 0x01	; 1
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
     982:	31 83       	std	Z+1, r19	; 0x01
     984:	69 c0       	rjmp	.+210    	; 0xa58 <toggle+0x324>
	else if (__tmp > 65535)
     986:	ce 01       	movw	r24, r28
     988:	83 5a       	subi	r24, 0xA3	; 163
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	3f ef       	ldi	r19, 0xFF	; 255
     990:	4f e7       	ldi	r20, 0x7F	; 127
     992:	57 e4       	ldi	r21, 0x47	; 71
     994:	fc 01       	movw	r30, r24
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     9a2:	18 16       	cp	r1, r24
     9a4:	0c f0       	brlt	.+2      	; 0x9a8 <toggle+0x274>
     9a6:	46 c0       	rjmp	.+140    	; 0xa34 <toggle+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e2       	ldi	r20, 0x20	; 32
     9ae:	51 e4       	ldi	r21, 0x41	; 65
     9b0:	6d 81       	ldd	r22, Y+5	; 0x05
     9b2:	7e 81       	ldd	r23, Y+6	; 0x06
     9b4:	8f 81       	ldd	r24, Y+7	; 0x07
     9b6:	98 85       	ldd	r25, Y+8	; 0x08
     9b8:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	8e 01       	movw	r16, r28
     9c2:	0f 59       	subi	r16, 0x9F	; 159
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
     9c6:	bc 01       	movw	r22, r24
     9c8:	cd 01       	movw	r24, r26
     9ca:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	f8 01       	movw	r30, r16
     9d4:	80 83       	st	Z, r24
     9d6:	91 83       	std	Z+1, r25	; 0x01
     9d8:	24 c0       	rjmp	.+72     	; 0xa22 <toggle+0x2ee>
     9da:	ce 01       	movw	r24, r28
     9dc:	8d 59       	subi	r24, 0x9D	; 157
     9de:	9f 4f       	sbci	r25, 0xFF	; 255
     9e0:	23 e5       	ldi	r18, 0x53	; 83
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	fc 01       	movw	r30, r24
     9e6:	20 83       	st	Z, r18
     9e8:	31 83       	std	Z+1, r19	; 0x01
     9ea:	ce 01       	movw	r24, r28
     9ec:	8d 59       	subi	r24, 0x9D	; 157
     9ee:	9f 4f       	sbci	r25, 0xFF	; 255
     9f0:	fc 01       	movw	r30, r24
     9f2:	80 81       	ld	r24, Z
     9f4:	91 81       	ldd	r25, Z+1	; 0x01
     9f6:	01 97       	sbiw	r24, 0x01	; 1
     9f8:	f1 f7       	brne	.-4      	; 0x9f6 <toggle+0x2c2>
     9fa:	9e 01       	movw	r18, r28
     9fc:	2d 59       	subi	r18, 0x9D	; 157
     9fe:	3f 4f       	sbci	r19, 0xFF	; 255
     a00:	f9 01       	movw	r30, r18
     a02:	80 83       	st	Z, r24
     a04:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a06:	ce 01       	movw	r24, r28
     a08:	8f 59       	subi	r24, 0x9F	; 159
     a0a:	9f 4f       	sbci	r25, 0xFF	; 255
     a0c:	9e 01       	movw	r18, r28
     a0e:	2f 59       	subi	r18, 0x9F	; 159
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	31 81       	ldd	r19, Z+1	; 0x01
     a18:	21 50       	subi	r18, 0x01	; 1
     a1a:	31 09       	sbc	r19, r1
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
     a20:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a22:	ce 01       	movw	r24, r28
     a24:	8f 59       	subi	r24, 0x9F	; 159
     a26:	9f 4f       	sbci	r25, 0xFF	; 255
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	89 2b       	or	r24, r25
     a30:	a1 f6       	brne	.-88     	; 0x9da <toggle+0x2a6>
     a32:	2c c0       	rjmp	.+88     	; 0xa8c <toggle+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a34:	8e 01       	movw	r16, r28
     a36:	0f 59       	subi	r16, 0x9F	; 159
     a38:	1f 4f       	sbci	r17, 0xFF	; 255
     a3a:	ce 01       	movw	r24, r28
     a3c:	83 5a       	subi	r24, 0xA3	; 163
     a3e:	9f 4f       	sbci	r25, 0xFF	; 255
     a40:	fc 01       	movw	r30, r24
     a42:	60 81       	ld	r22, Z
     a44:	71 81       	ldd	r23, Z+1	; 0x01
     a46:	82 81       	ldd	r24, Z+2	; 0x02
     a48:	93 81       	ldd	r25, Z+3	; 0x03
     a4a:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	f8 01       	movw	r30, r16
     a54:	80 83       	st	Z, r24
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	ce 01       	movw	r24, r28
     a5a:	8b 59       	subi	r24, 0x9B	; 155
     a5c:	9f 4f       	sbci	r25, 0xFF	; 255
     a5e:	9e 01       	movw	r18, r28
     a60:	2f 59       	subi	r18, 0x9F	; 159
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
     a64:	f9 01       	movw	r30, r18
     a66:	20 81       	ld	r18, Z
     a68:	31 81       	ldd	r19, Z+1	; 0x01
     a6a:	fc 01       	movw	r30, r24
     a6c:	20 83       	st	Z, r18
     a6e:	31 83       	std	Z+1, r19	; 0x01
     a70:	ce 01       	movw	r24, r28
     a72:	8b 59       	subi	r24, 0x9B	; 155
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	fc 01       	movw	r30, r24
     a78:	80 81       	ld	r24, Z
     a7a:	91 81       	ldd	r25, Z+1	; 0x01
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <toggle+0x348>
     a80:	9e 01       	movw	r18, r28
     a82:	2b 59       	subi	r18, 0x9B	; 155
     a84:	3f 4f       	sbci	r19, 0xFF	; 255
     a86:	f9 01       	movw	r30, r18
     a88:	80 83       	st	Z, r24
     a8a:	91 83       	std	Z+1, r25	; 0x01
 			B0_MCU_toggle_level(true);
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 8f 03 	call	0x71e	; 0x71e <B0_MCU_toggle_level>
 			_delay_ms(delay3);
     a94:	ce 01       	movw	r24, r28
     a96:	8b 58       	subi	r24, 0x8B	; 139
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	fc 01       	movw	r30, r24
     a9c:	80 81       	ld	r24, Z
     a9e:	91 81       	ldd	r25, Z+1	; 0x01
     aa0:	09 2e       	mov	r0, r25
     aa2:	00 0c       	add	r0, r0
     aa4:	aa 0b       	sbc	r26, r26
     aa6:	bb 0b       	sbc	r27, r27
     aa8:	bc 01       	movw	r22, r24
     aaa:	cd 01       	movw	r24, r26
     aac:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatsisf>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	89 87       	std	Y+9, r24	; 0x09
     ab6:	9a 87       	std	Y+10, r25	; 0x0a
     ab8:	ab 87       	std	Y+11, r26	; 0x0b
     aba:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     abc:	8e 01       	movw	r16, r28
     abe:	0d 5a       	subi	r16, 0xAD	; 173
     ac0:	1f 4f       	sbci	r17, 0xFF	; 255
     ac2:	24 e5       	ldi	r18, 0x54	; 84
     ac4:	35 e5       	ldi	r19, 0x55	; 85
     ac6:	40 e5       	ldi	r20, 0x50	; 80
     ac8:	54 e4       	ldi	r21, 0x44	; 68
     aca:	69 85       	ldd	r22, Y+9	; 0x09
     acc:	7a 85       	ldd	r23, Y+10	; 0x0a
     ace:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad2:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     ad6:	dc 01       	movw	r26, r24
     ad8:	cb 01       	movw	r24, r22
     ada:	f8 01       	movw	r30, r16
     adc:	80 83       	st	Z, r24
     ade:	91 83       	std	Z+1, r25	; 0x01
     ae0:	a2 83       	std	Z+2, r26	; 0x02
     ae2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ae4:	ce 01       	movw	r24, r28
     ae6:	8d 5a       	subi	r24, 0xAD	; 173
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	40 e8       	ldi	r20, 0x80	; 128
     af0:	5f e3       	ldi	r21, 0x3F	; 63
     af2:	fc 01       	movw	r30, r24
     af4:	60 81       	ld	r22, Z
     af6:	71 81       	ldd	r23, Z+1	; 0x01
     af8:	82 81       	ldd	r24, Z+2	; 0x02
     afa:	93 81       	ldd	r25, Z+3	; 0x03
     afc:	0e 94 29 09 	call	0x1252	; 0x1252 <__cmpsf2>
     b00:	88 23       	and	r24, r24
     b02:	4c f4       	brge	.+18     	; 0xb16 <toggle+0x3e2>
		__ticks = 1;
     b04:	ce 01       	movw	r24, r28
     b06:	89 5a       	subi	r24, 0xA9	; 169
     b08:	9f 4f       	sbci	r25, 0xFF	; 255
     b0a:	21 e0       	ldi	r18, 0x01	; 1
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	fc 01       	movw	r30, r24
     b10:	20 83       	st	Z, r18
     b12:	31 83       	std	Z+1, r19	; 0x01
     b14:	69 c0       	rjmp	.+210    	; 0xbe8 <toggle+0x4b4>
	else if (__tmp > 65535)
     b16:	ce 01       	movw	r24, r28
     b18:	8d 5a       	subi	r24, 0xAD	; 173
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	3f ef       	ldi	r19, 0xFF	; 255
     b20:	4f e7       	ldi	r20, 0x7F	; 127
     b22:	57 e4       	ldi	r21, 0x47	; 71
     b24:	fc 01       	movw	r30, r24
     b26:	60 81       	ld	r22, Z
     b28:	71 81       	ldd	r23, Z+1	; 0x01
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     b32:	18 16       	cp	r1, r24
     b34:	0c f0       	brlt	.+2      	; 0xb38 <toggle+0x404>
     b36:	46 c0       	rjmp	.+140    	; 0xbc4 <toggle+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e2       	ldi	r20, 0x20	; 32
     b3e:	51 e4       	ldi	r21, 0x41	; 65
     b40:	69 85       	ldd	r22, Y+9	; 0x09
     b42:	7a 85       	ldd	r23, Y+10	; 0x0a
     b44:	8b 85       	ldd	r24, Y+11	; 0x0b
     b46:	9c 85       	ldd	r25, Y+12	; 0x0c
     b48:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	8e 01       	movw	r16, r28
     b52:	09 5a       	subi	r16, 0xA9	; 169
     b54:	1f 4f       	sbci	r17, 0xFF	; 255
     b56:	bc 01       	movw	r22, r24
     b58:	cd 01       	movw	r24, r26
     b5a:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     b5e:	dc 01       	movw	r26, r24
     b60:	cb 01       	movw	r24, r22
     b62:	f8 01       	movw	r30, r16
     b64:	80 83       	st	Z, r24
     b66:	91 83       	std	Z+1, r25	; 0x01
     b68:	24 c0       	rjmp	.+72     	; 0xbb2 <toggle+0x47e>
     b6a:	ce 01       	movw	r24, r28
     b6c:	87 5a       	subi	r24, 0xA7	; 167
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	23 e5       	ldi	r18, 0x53	; 83
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
     b78:	31 83       	std	Z+1, r19	; 0x01
     b7a:	ce 01       	movw	r24, r28
     b7c:	87 5a       	subi	r24, 0xA7	; 167
     b7e:	9f 4f       	sbci	r25, 0xFF	; 255
     b80:	fc 01       	movw	r30, r24
     b82:	80 81       	ld	r24, Z
     b84:	91 81       	ldd	r25, Z+1	; 0x01
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <toggle+0x452>
     b8a:	9e 01       	movw	r18, r28
     b8c:	27 5a       	subi	r18, 0xA7	; 167
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	f9 01       	movw	r30, r18
     b92:	80 83       	st	Z, r24
     b94:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b96:	ce 01       	movw	r24, r28
     b98:	89 5a       	subi	r24, 0xA9	; 169
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	9e 01       	movw	r18, r28
     b9e:	29 5a       	subi	r18, 0xA9	; 169
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	f9 01       	movw	r30, r18
     ba4:	20 81       	ld	r18, Z
     ba6:	31 81       	ldd	r19, Z+1	; 0x01
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	31 09       	sbc	r19, r1
     bac:	fc 01       	movw	r30, r24
     bae:	20 83       	st	Z, r18
     bb0:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bb2:	ce 01       	movw	r24, r28
     bb4:	89 5a       	subi	r24, 0xA9	; 169
     bb6:	9f 4f       	sbci	r25, 0xFF	; 255
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	91 81       	ldd	r25, Z+1	; 0x01
     bbe:	89 2b       	or	r24, r25
     bc0:	a1 f6       	brne	.-88     	; 0xb6a <toggle+0x436>
     bc2:	2c c0       	rjmp	.+88     	; 0xc1c <toggle+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bc4:	8e 01       	movw	r16, r28
     bc6:	09 5a       	subi	r16, 0xA9	; 169
     bc8:	1f 4f       	sbci	r17, 0xFF	; 255
     bca:	ce 01       	movw	r24, r28
     bcc:	8d 5a       	subi	r24, 0xAD	; 173
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	fc 01       	movw	r30, r24
     bd2:	60 81       	ld	r22, Z
     bd4:	71 81       	ldd	r23, Z+1	; 0x01
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	f8 01       	movw	r30, r16
     be4:	80 83       	st	Z, r24
     be6:	91 83       	std	Z+1, r25	; 0x01
     be8:	ce 01       	movw	r24, r28
     bea:	85 5a       	subi	r24, 0xA5	; 165
     bec:	9f 4f       	sbci	r25, 0xFF	; 255
     bee:	9e 01       	movw	r18, r28
     bf0:	29 5a       	subi	r18, 0xA9	; 169
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	f9 01       	movw	r30, r18
     bf6:	20 81       	ld	r18, Z
     bf8:	31 81       	ldd	r19, Z+1	; 0x01
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
     bfe:	31 83       	std	Z+1, r19	; 0x01
     c00:	ce 01       	movw	r24, r28
     c02:	85 5a       	subi	r24, 0xA5	; 165
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	fc 01       	movw	r30, r24
     c08:	80 81       	ld	r24, Z
     c0a:	91 81       	ldd	r25, Z+1	; 0x01
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <toggle+0x4d8>
     c10:	9e 01       	movw	r18, r28
     c12:	25 5a       	subi	r18, 0xA5	; 165
     c14:	3f 4f       	sbci	r19, 0xFF	; 255
     c16:	f9 01       	movw	r30, r18
     c18:	80 83       	st	Z, r24
     c1a:	91 83       	std	Z+1, r25	; 0x01
 			
// 	/*COMBINATIONS OF LEDs*/
// 	
 			R0_MCU_set_level(true); //RED ONLY
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 4c 03 	call	0x698	; 0x698 <R0_MCU_set_level>
 			_delay_ms(delay1);
     c22:	ce 01       	movw	r24, r28
     c24:	8f 58       	subi	r24, 0x8F	; 143
     c26:	9f 4f       	sbci	r25, 0xFF	; 255
     c28:	fc 01       	movw	r30, r24
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	09 2e       	mov	r0, r25
     c30:	00 0c       	add	r0, r0
     c32:	aa 0b       	sbc	r26, r26
     c34:	bb 0b       	sbc	r27, r27
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatsisf>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	8d 87       	std	Y+13, r24	; 0x0d
     c44:	9e 87       	std	Y+14, r25	; 0x0e
     c46:	af 87       	std	Y+15, r26	; 0x0f
     c48:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c4a:	8e 01       	movw	r16, r28
     c4c:	07 5b       	subi	r16, 0xB7	; 183
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	24 e5       	ldi	r18, 0x54	; 84
     c52:	35 e5       	ldi	r19, 0x55	; 85
     c54:	40 e5       	ldi	r20, 0x50	; 80
     c56:	54 e4       	ldi	r21, 0x44	; 68
     c58:	6d 85       	ldd	r22, Y+13	; 0x0d
     c5a:	7e 85       	ldd	r23, Y+14	; 0x0e
     c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c5e:	98 89       	ldd	r25, Y+16	; 0x10
     c60:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     c64:	dc 01       	movw	r26, r24
     c66:	cb 01       	movw	r24, r22
     c68:	f8 01       	movw	r30, r16
     c6a:	80 83       	st	Z, r24
     c6c:	91 83       	std	Z+1, r25	; 0x01
     c6e:	a2 83       	std	Z+2, r26	; 0x02
     c70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c72:	ce 01       	movw	r24, r28
     c74:	87 5b       	subi	r24, 0xB7	; 183
     c76:	9f 4f       	sbci	r25, 0xFF	; 255
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e8       	ldi	r20, 0x80	; 128
     c7e:	5f e3       	ldi	r21, 0x3F	; 63
     c80:	fc 01       	movw	r30, r24
     c82:	60 81       	ld	r22, Z
     c84:	71 81       	ldd	r23, Z+1	; 0x01
     c86:	82 81       	ldd	r24, Z+2	; 0x02
     c88:	93 81       	ldd	r25, Z+3	; 0x03
     c8a:	0e 94 29 09 	call	0x1252	; 0x1252 <__cmpsf2>
     c8e:	88 23       	and	r24, r24
     c90:	4c f4       	brge	.+18     	; 0xca4 <toggle+0x570>
		__ticks = 1;
     c92:	ce 01       	movw	r24, r28
     c94:	83 5b       	subi	r24, 0xB3	; 179
     c96:	9f 4f       	sbci	r25, 0xFF	; 255
     c98:	21 e0       	ldi	r18, 0x01	; 1
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	fc 01       	movw	r30, r24
     c9e:	20 83       	st	Z, r18
     ca0:	31 83       	std	Z+1, r19	; 0x01
     ca2:	69 c0       	rjmp	.+210    	; 0xd76 <toggle+0x642>
	else if (__tmp > 65535)
     ca4:	ce 01       	movw	r24, r28
     ca6:	87 5b       	subi	r24, 0xB7	; 183
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	3f ef       	ldi	r19, 0xFF	; 255
     cae:	4f e7       	ldi	r20, 0x7F	; 127
     cb0:	57 e4       	ldi	r21, 0x47	; 71
     cb2:	fc 01       	movw	r30, r24
     cb4:	60 81       	ld	r22, Z
     cb6:	71 81       	ldd	r23, Z+1	; 0x01
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     cc0:	18 16       	cp	r1, r24
     cc2:	0c f0       	brlt	.+2      	; 0xcc6 <toggle+0x592>
     cc4:	46 c0       	rjmp	.+140    	; 0xd52 <toggle+0x61e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e2       	ldi	r20, 0x20	; 32
     ccc:	51 e4       	ldi	r21, 0x41	; 65
     cce:	6d 85       	ldd	r22, Y+13	; 0x0d
     cd0:	7e 85       	ldd	r23, Y+14	; 0x0e
     cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd4:	98 89       	ldd	r25, Y+16	; 0x10
     cd6:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	8e 01       	movw	r16, r28
     ce0:	03 5b       	subi	r16, 0xB3	; 179
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	bc 01       	movw	r22, r24
     ce6:	cd 01       	movw	r24, r26
     ce8:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	f8 01       	movw	r30, r16
     cf2:	80 83       	st	Z, r24
     cf4:	91 83       	std	Z+1, r25	; 0x01
     cf6:	24 c0       	rjmp	.+72     	; 0xd40 <toggle+0x60c>
     cf8:	ce 01       	movw	r24, r28
     cfa:	81 5b       	subi	r24, 0xB1	; 177
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	23 e5       	ldi	r18, 0x53	; 83
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	fc 01       	movw	r30, r24
     d04:	20 83       	st	Z, r18
     d06:	31 83       	std	Z+1, r19	; 0x01
     d08:	ce 01       	movw	r24, r28
     d0a:	81 5b       	subi	r24, 0xB1	; 177
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	fc 01       	movw	r30, r24
     d10:	80 81       	ld	r24, Z
     d12:	91 81       	ldd	r25, Z+1	; 0x01
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <toggle+0x5e0>
     d18:	9e 01       	movw	r18, r28
     d1a:	21 5b       	subi	r18, 0xB1	; 177
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	f9 01       	movw	r30, r18
     d20:	80 83       	st	Z, r24
     d22:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d24:	ce 01       	movw	r24, r28
     d26:	83 5b       	subi	r24, 0xB3	; 179
     d28:	9f 4f       	sbci	r25, 0xFF	; 255
     d2a:	9e 01       	movw	r18, r28
     d2c:	23 5b       	subi	r18, 0xB3	; 179
     d2e:	3f 4f       	sbci	r19, 0xFF	; 255
     d30:	f9 01       	movw	r30, r18
     d32:	20 81       	ld	r18, Z
     d34:	31 81       	ldd	r19, Z+1	; 0x01
     d36:	21 50       	subi	r18, 0x01	; 1
     d38:	31 09       	sbc	r19, r1
     d3a:	fc 01       	movw	r30, r24
     d3c:	20 83       	st	Z, r18
     d3e:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d40:	ce 01       	movw	r24, r28
     d42:	83 5b       	subi	r24, 0xB3	; 179
     d44:	9f 4f       	sbci	r25, 0xFF	; 255
     d46:	fc 01       	movw	r30, r24
     d48:	80 81       	ld	r24, Z
     d4a:	91 81       	ldd	r25, Z+1	; 0x01
     d4c:	89 2b       	or	r24, r25
     d4e:	a1 f6       	brne	.-88     	; 0xcf8 <toggle+0x5c4>
     d50:	2c c0       	rjmp	.+88     	; 0xdaa <toggle+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d52:	8e 01       	movw	r16, r28
     d54:	03 5b       	subi	r16, 0xB3	; 179
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	ce 01       	movw	r24, r28
     d5a:	87 5b       	subi	r24, 0xB7	; 183
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	fc 01       	movw	r30, r24
     d60:	60 81       	ld	r22, Z
     d62:	71 81       	ldd	r23, Z+1	; 0x01
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	f8 01       	movw	r30, r16
     d72:	80 83       	st	Z, r24
     d74:	91 83       	std	Z+1, r25	; 0x01
     d76:	ce 01       	movw	r24, r28
     d78:	8f 5a       	subi	r24, 0xAF	; 175
     d7a:	9f 4f       	sbci	r25, 0xFF	; 255
     d7c:	9e 01       	movw	r18, r28
     d7e:	23 5b       	subi	r18, 0xB3	; 179
     d80:	3f 4f       	sbci	r19, 0xFF	; 255
     d82:	f9 01       	movw	r30, r18
     d84:	20 81       	ld	r18, Z
     d86:	31 81       	ldd	r19, Z+1	; 0x01
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
     d8c:	31 83       	std	Z+1, r19	; 0x01
     d8e:	ce 01       	movw	r24, r28
     d90:	8f 5a       	subi	r24, 0xAF	; 175
     d92:	9f 4f       	sbci	r25, 0xFF	; 255
     d94:	fc 01       	movw	r30, r24
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <toggle+0x666>
     d9e:	9e 01       	movw	r18, r28
     da0:	2f 5a       	subi	r18, 0xAF	; 175
     da2:	3f 4f       	sbci	r19, 0xFF	; 255
     da4:	f9 01       	movw	r30, r18
     da6:	80 83       	st	Z, r24
     da8:	91 83       	std	Z+1, r25	; 0x01
 			G0_MCU_set_level(true);	//RG
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	0e 94 66 03 	call	0x6cc	; 0x6cc <G0_MCU_set_level>
 			_delay_ms(delay1);
     db0:	ce 01       	movw	r24, r28
     db2:	8f 58       	subi	r24, 0x8F	; 143
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	fc 01       	movw	r30, r24
     db8:	80 81       	ld	r24, Z
     dba:	91 81       	ldd	r25, Z+1	; 0x01
     dbc:	09 2e       	mov	r0, r25
     dbe:	00 0c       	add	r0, r0
     dc0:	aa 0b       	sbc	r26, r26
     dc2:	bb 0b       	sbc	r27, r27
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatsisf>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	89 8b       	std	Y+17, r24	; 0x11
     dd2:	9a 8b       	std	Y+18, r25	; 0x12
     dd4:	ab 8b       	std	Y+19, r26	; 0x13
     dd6:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	8e 01       	movw	r16, r28
     dda:	01 5c       	subi	r16, 0xC1	; 193
     ddc:	1f 4f       	sbci	r17, 0xFF	; 255
     dde:	24 e5       	ldi	r18, 0x54	; 84
     de0:	35 e5       	ldi	r19, 0x55	; 85
     de2:	40 e5       	ldi	r20, 0x50	; 80
     de4:	54 e4       	ldi	r21, 0x44	; 68
     de6:	69 89       	ldd	r22, Y+17	; 0x11
     de8:	7a 89       	ldd	r23, Y+18	; 0x12
     dea:	8b 89       	ldd	r24, Y+19	; 0x13
     dec:	9c 89       	ldd	r25, Y+20	; 0x14
     dee:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	f8 01       	movw	r30, r16
     df8:	80 83       	st	Z, r24
     dfa:	91 83       	std	Z+1, r25	; 0x01
     dfc:	a2 83       	std	Z+2, r26	; 0x02
     dfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e00:	ce 01       	movw	r24, r28
     e02:	cf 96       	adiw	r24, 0x3f	; 63
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e8       	ldi	r20, 0x80	; 128
     e0a:	5f e3       	ldi	r21, 0x3F	; 63
     e0c:	fc 01       	movw	r30, r24
     e0e:	60 81       	ld	r22, Z
     e10:	71 81       	ldd	r23, Z+1	; 0x01
     e12:	82 81       	ldd	r24, Z+2	; 0x02
     e14:	93 81       	ldd	r25, Z+3	; 0x03
     e16:	0e 94 29 09 	call	0x1252	; 0x1252 <__cmpsf2>
     e1a:	88 23       	and	r24, r24
     e1c:	4c f4       	brge	.+18     	; 0xe30 <toggle+0x6fc>
		__ticks = 1;
     e1e:	ce 01       	movw	r24, r28
     e20:	8d 5b       	subi	r24, 0xBD	; 189
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	21 e0       	ldi	r18, 0x01	; 1
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	fc 01       	movw	r30, r24
     e2a:	20 83       	st	Z, r18
     e2c:	31 83       	std	Z+1, r19	; 0x01
     e2e:	67 c0       	rjmp	.+206    	; 0xefe <toggle+0x7ca>
	else if (__tmp > 65535)
     e30:	ce 01       	movw	r24, r28
     e32:	cf 96       	adiw	r24, 0x3f	; 63
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	fc 01       	movw	r30, r24
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	0c f0       	brlt	.+2      	; 0xe50 <toggle+0x71c>
     e4e:	46 c0       	rjmp	.+140    	; 0xedc <toggle+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	40 e2       	ldi	r20, 0x20	; 32
     e56:	51 e4       	ldi	r21, 0x41	; 65
     e58:	69 89       	ldd	r22, Y+17	; 0x11
     e5a:	7a 89       	ldd	r23, Y+18	; 0x12
     e5c:	8b 89       	ldd	r24, Y+19	; 0x13
     e5e:	9c 89       	ldd	r25, Y+20	; 0x14
     e60:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	8e 01       	movw	r16, r28
     e6a:	0d 5b       	subi	r16, 0xBD	; 189
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	f8 01       	movw	r30, r16
     e7c:	80 83       	st	Z, r24
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	24 c0       	rjmp	.+72     	; 0xeca <toggle+0x796>
     e82:	ce 01       	movw	r24, r28
     e84:	8b 5b       	subi	r24, 0xBB	; 187
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	23 e5       	ldi	r18, 0x53	; 83
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	fc 01       	movw	r30, r24
     e8e:	20 83       	st	Z, r18
     e90:	31 83       	std	Z+1, r19	; 0x01
     e92:	ce 01       	movw	r24, r28
     e94:	8b 5b       	subi	r24, 0xBB	; 187
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	fc 01       	movw	r30, r24
     e9a:	80 81       	ld	r24, Z
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	f1 f7       	brne	.-4      	; 0xe9e <toggle+0x76a>
     ea2:	9e 01       	movw	r18, r28
     ea4:	2b 5b       	subi	r18, 0xBB	; 187
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
     ea8:	f9 01       	movw	r30, r18
     eaa:	80 83       	st	Z, r24
     eac:	91 83       	std	Z+1, r25	; 0x01
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	ce 01       	movw	r24, r28
     eb0:	8d 5b       	subi	r24, 0xBD	; 189
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	9e 01       	movw	r18, r28
     eb6:	2d 5b       	subi	r18, 0xBD	; 189
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	f9 01       	movw	r30, r18
     ebc:	20 81       	ld	r18, Z
     ebe:	31 81       	ldd	r19, Z+1	; 0x01
     ec0:	21 50       	subi	r18, 0x01	; 1
     ec2:	31 09       	sbc	r19, r1
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18
     ec8:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eca:	ce 01       	movw	r24, r28
     ecc:	8d 5b       	subi	r24, 0xBD	; 189
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	fc 01       	movw	r30, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	89 2b       	or	r24, r25
     ed8:	a1 f6       	brne	.-88     	; 0xe82 <toggle+0x74e>
     eda:	2b c0       	rjmp	.+86     	; 0xf32 <toggle+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     edc:	8e 01       	movw	r16, r28
     ede:	0d 5b       	subi	r16, 0xBD	; 189
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	ce 01       	movw	r24, r28
     ee4:	cf 96       	adiw	r24, 0x3f	; 63
     ee6:	fc 01       	movw	r30, r24
     ee8:	60 81       	ld	r22, Z
     eea:	71 81       	ldd	r23, Z+1	; 0x01
     eec:	82 81       	ldd	r24, Z+2	; 0x02
     eee:	93 81       	ldd	r25, Z+3	; 0x03
     ef0:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	f8 01       	movw	r30, r16
     efa:	80 83       	st	Z, r24
     efc:	91 83       	std	Z+1, r25	; 0x01
     efe:	ce 01       	movw	r24, r28
     f00:	89 5b       	subi	r24, 0xB9	; 185
     f02:	9f 4f       	sbci	r25, 0xFF	; 255
     f04:	9e 01       	movw	r18, r28
     f06:	2d 5b       	subi	r18, 0xBD	; 189
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	f9 01       	movw	r30, r18
     f0c:	20 81       	ld	r18, Z
     f0e:	31 81       	ldd	r19, Z+1	; 0x01
     f10:	fc 01       	movw	r30, r24
     f12:	20 83       	st	Z, r18
     f14:	31 83       	std	Z+1, r19	; 0x01
     f16:	ce 01       	movw	r24, r28
     f18:	89 5b       	subi	r24, 0xB9	; 185
     f1a:	9f 4f       	sbci	r25, 0xFF	; 255
     f1c:	fc 01       	movw	r30, r24
     f1e:	80 81       	ld	r24, Z
     f20:	91 81       	ldd	r25, Z+1	; 0x01
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <toggle+0x7ee>
     f26:	9e 01       	movw	r18, r28
     f28:	29 5b       	subi	r18, 0xB9	; 185
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	f9 01       	movw	r30, r18
     f2e:	80 83       	st	Z, r24
     f30:	91 83       	std	Z+1, r25	; 0x01
 			B0_MCU_set_level(true);	//RGB
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	0e 94 80 03 	call	0x700	; 0x700 <B0_MCU_set_level>
 			_delay_ms(delay1);
     f38:	ce 01       	movw	r24, r28
     f3a:	8f 58       	subi	r24, 0x8F	; 143
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	fc 01       	movw	r30, r24
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	09 2e       	mov	r0, r25
     f46:	00 0c       	add	r0, r0
     f48:	aa 0b       	sbc	r26, r26
     f4a:	bb 0b       	sbc	r27, r27
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatsisf>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	8d 8b       	std	Y+21, r24	; 0x15
     f5a:	9e 8b       	std	Y+22, r25	; 0x16
     f5c:	af 8b       	std	Y+23, r26	; 0x17
     f5e:	b8 8f       	std	Y+24, r27	; 0x18

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f60:	24 e5       	ldi	r18, 0x54	; 84
     f62:	35 e5       	ldi	r19, 0x55	; 85
     f64:	40 e5       	ldi	r20, 0x50	; 80
     f66:	54 e4       	ldi	r21, 0x44	; 68
     f68:	6d 89       	ldd	r22, Y+21	; 0x15
     f6a:	7e 89       	ldd	r23, Y+22	; 0x16
     f6c:	8f 89       	ldd	r24, Y+23	; 0x17
     f6e:	98 8d       	ldd	r25, Y+24	; 0x18
     f70:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	8d ab       	std	Y+53, r24	; 0x35
     f7a:	9e ab       	std	Y+54, r25	; 0x36
     f7c:	af ab       	std	Y+55, r26	; 0x37
     f7e:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e8       	ldi	r20, 0x80	; 128
     f86:	5f e3       	ldi	r21, 0x3F	; 63
     f88:	6d a9       	ldd	r22, Y+53	; 0x35
     f8a:	7e a9       	ldd	r23, Y+54	; 0x36
     f8c:	8f a9       	ldd	r24, Y+55	; 0x37
     f8e:	98 ad       	ldd	r25, Y+56	; 0x38
     f90:	0e 94 29 09 	call	0x1252	; 0x1252 <__cmpsf2>
     f94:	88 23       	and	r24, r24
     f96:	2c f4       	brge	.+10     	; 0xfa2 <toggle+0x86e>
		__ticks = 1;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	89 af       	std	Y+57, r24	; 0x39
     f9e:	9a af       	std	Y+58, r25	; 0x3a
     fa0:	3f c0       	rjmp	.+126    	; 0x1020 <toggle+0x8ec>
	else if (__tmp > 65535)
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	3f ef       	ldi	r19, 0xFF	; 255
     fa6:	4f e7       	ldi	r20, 0x7F	; 127
     fa8:	57 e4       	ldi	r21, 0x47	; 71
     faa:	6d a9       	ldd	r22, Y+53	; 0x35
     fac:	7e a9       	ldd	r23, Y+54	; 0x36
     fae:	8f a9       	ldd	r24, Y+55	; 0x37
     fb0:	98 ad       	ldd	r25, Y+56	; 0x38
     fb2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
     fb6:	18 16       	cp	r1, r24
     fb8:	4c f5       	brge	.+82     	; 0x100c <toggle+0x8d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e2       	ldi	r20, 0x20	; 32
     fc0:	51 e4       	ldi	r21, 0x41	; 65
     fc2:	6d 89       	ldd	r22, Y+21	; 0x15
     fc4:	7e 89       	ldd	r23, Y+22	; 0x16
     fc6:	8f 89       	ldd	r24, Y+23	; 0x17
     fc8:	98 8d       	ldd	r25, Y+24	; 0x18
     fca:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	89 af       	std	Y+57, r24	; 0x39
     fe0:	9a af       	std	Y+58, r25	; 0x3a
     fe2:	0f c0       	rjmp	.+30     	; 0x1002 <toggle+0x8ce>
     fe4:	83 e5       	ldi	r24, 0x53	; 83
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	8b af       	std	Y+59, r24	; 0x3b
     fea:	9c af       	std	Y+60, r25	; 0x3c
     fec:	8b ad       	ldd	r24, Y+59	; 0x3b
     fee:	9c ad       	ldd	r25, Y+60	; 0x3c
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <toggle+0x8bc>
     ff4:	8b af       	std	Y+59, r24	; 0x3b
     ff6:	9c af       	std	Y+60, r25	; 0x3c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff8:	89 ad       	ldd	r24, Y+57	; 0x39
     ffa:	9a ad       	ldd	r25, Y+58	; 0x3a
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	89 af       	std	Y+57, r24	; 0x39
    1000:	9a af       	std	Y+58, r25	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1002:	89 ad       	ldd	r24, Y+57	; 0x39
    1004:	9a ad       	ldd	r25, Y+58	; 0x3a
    1006:	89 2b       	or	r24, r25
    1008:	69 f7       	brne	.-38     	; 0xfe4 <toggle+0x8b0>
    100a:	14 c0       	rjmp	.+40     	; 0x1034 <toggle+0x900>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100c:	6d a9       	ldd	r22, Y+53	; 0x35
    100e:	7e a9       	ldd	r23, Y+54	; 0x36
    1010:	8f a9       	ldd	r24, Y+55	; 0x37
    1012:	98 ad       	ldd	r25, Y+56	; 0x38
    1014:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	89 af       	std	Y+57, r24	; 0x39
    101e:	9a af       	std	Y+58, r25	; 0x3a
    1020:	89 ad       	ldd	r24, Y+57	; 0x39
    1022:	9a ad       	ldd	r25, Y+58	; 0x3a
    1024:	8d af       	std	Y+61, r24	; 0x3d
    1026:	9e af       	std	Y+62, r25	; 0x3e
    1028:	8d ad       	ldd	r24, Y+61	; 0x3d
    102a:	9e ad       	ldd	r25, Y+62	; 0x3e
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <toggle+0x8f8>
    1030:	8d af       	std	Y+61, r24	; 0x3d
    1032:	9e af       	std	Y+62, r25	; 0x3e
 			R0_MCU_set_level(false);//GB
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	0e 94 4c 03 	call	0x698	; 0x698 <R0_MCU_set_level>
 			_delay_ms(delay1);		
    103a:	ce 01       	movw	r24, r28
    103c:	8f 58       	subi	r24, 0x8F	; 143
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	fc 01       	movw	r30, r24
    1042:	80 81       	ld	r24, Z
    1044:	91 81       	ldd	r25, Z+1	; 0x01
    1046:	09 2e       	mov	r0, r25
    1048:	00 0c       	add	r0, r0
    104a:	aa 0b       	sbc	r26, r26
    104c:	bb 0b       	sbc	r27, r27
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatsisf>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	89 8f       	std	Y+25, r24	; 0x19
    105c:	9a 8f       	std	Y+26, r25	; 0x1a
    105e:	ab 8f       	std	Y+27, r26	; 0x1b
    1060:	bc 8f       	std	Y+28, r27	; 0x1c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1062:	24 e5       	ldi	r18, 0x54	; 84
    1064:	35 e5       	ldi	r19, 0x55	; 85
    1066:	40 e5       	ldi	r20, 0x50	; 80
    1068:	54 e4       	ldi	r21, 0x44	; 68
    106a:	69 8d       	ldd	r22, Y+25	; 0x19
    106c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    106e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1070:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1072:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	8b a7       	std	Y+43, r24	; 0x2b
    107c:	9c a7       	std	Y+44, r25	; 0x2c
    107e:	ad a7       	std	Y+45, r26	; 0x2d
    1080:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	6b a5       	ldd	r22, Y+43	; 0x2b
    108c:	7c a5       	ldd	r23, Y+44	; 0x2c
    108e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1090:	9e a5       	ldd	r25, Y+46	; 0x2e
    1092:	0e 94 29 09 	call	0x1252	; 0x1252 <__cmpsf2>
    1096:	88 23       	and	r24, r24
    1098:	2c f4       	brge	.+10     	; 0x10a4 <toggle+0x970>
		__ticks = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	8f a7       	std	Y+47, r24	; 0x2f
    10a0:	98 ab       	std	Y+48, r25	; 0x30
    10a2:	3f c0       	rjmp	.+126    	; 0x1122 <toggle+0x9ee>
	else if (__tmp > 65535)
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	6b a5       	ldd	r22, Y+43	; 0x2b
    10ae:	7c a5       	ldd	r23, Y+44	; 0x2c
    10b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    10b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    10b4:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	4c f5       	brge	.+82     	; 0x110e <toggle+0x9da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e2       	ldi	r20, 0x20	; 32
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	69 8d       	ldd	r22, Y+25	; 0x19
    10c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10cc:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	8f a7       	std	Y+47, r24	; 0x2f
    10e2:	98 ab       	std	Y+48, r25	; 0x30
    10e4:	0f c0       	rjmp	.+30     	; 0x1104 <toggle+0x9d0>
    10e6:	83 e5       	ldi	r24, 0x53	; 83
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	89 ab       	std	Y+49, r24	; 0x31
    10ec:	9a ab       	std	Y+50, r25	; 0x32
    10ee:	89 a9       	ldd	r24, Y+49	; 0x31
    10f0:	9a a9       	ldd	r25, Y+50	; 0x32
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <toggle+0x9be>
    10f6:	89 ab       	std	Y+49, r24	; 0x31
    10f8:	9a ab       	std	Y+50, r25	; 0x32
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    10fc:	98 a9       	ldd	r25, Y+48	; 0x30
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	8f a7       	std	Y+47, r24	; 0x2f
    1102:	98 ab       	std	Y+48, r25	; 0x30
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1104:	8f a5       	ldd	r24, Y+47	; 0x2f
    1106:	98 a9       	ldd	r25, Y+48	; 0x30
    1108:	89 2b       	or	r24, r25
    110a:	69 f7       	brne	.-38     	; 0x10e6 <toggle+0x9b2>
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <toggle+0xa02>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1110:	7c a5       	ldd	r23, Y+44	; 0x2c
    1112:	8d a5       	ldd	r24, Y+45	; 0x2d
    1114:	9e a5       	ldd	r25, Y+46	; 0x2e
    1116:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	8f a7       	std	Y+47, r24	; 0x2f
    1120:	98 ab       	std	Y+48, r25	; 0x30
    1122:	8f a5       	ldd	r24, Y+47	; 0x2f
    1124:	98 a9       	ldd	r25, Y+48	; 0x30
    1126:	8b ab       	std	Y+51, r24	; 0x33
    1128:	9c ab       	std	Y+52, r25	; 0x34
    112a:	8b a9       	ldd	r24, Y+51	; 0x33
    112c:	9c a9       	ldd	r25, Y+52	; 0x34
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <toggle+0x9fa>
    1132:	8b ab       	std	Y+51, r24	; 0x33
    1134:	9c ab       	std	Y+52, r25	; 0x34
 			G0_MCU_set_level(false);//B 
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 66 03 	call	0x6cc	; 0x6cc <G0_MCU_set_level>
 			_delay_ms(delay1);
    113c:	ce 01       	movw	r24, r28
    113e:	8f 58       	subi	r24, 0x8F	; 143
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	fc 01       	movw	r30, r24
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	09 2e       	mov	r0, r25
    114a:	00 0c       	add	r0, r0
    114c:	aa 0b       	sbc	r26, r26
    114e:	bb 0b       	sbc	r27, r27
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	0e 94 5f 09 	call	0x12be	; 0x12be <__floatsisf>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	8d 8f       	std	Y+29, r24	; 0x1d
    115e:	9e 8f       	std	Y+30, r25	; 0x1e
    1160:	af 8f       	std	Y+31, r26	; 0x1f
    1162:	b8 a3       	std	Y+32, r27	; 0x20

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1164:	24 e5       	ldi	r18, 0x54	; 84
    1166:	35 e5       	ldi	r19, 0x55	; 85
    1168:	40 e5       	ldi	r20, 0x50	; 80
    116a:	54 e4       	ldi	r21, 0x44	; 68
    116c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    116e:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1172:	98 a1       	ldd	r25, Y+32	; 0x20
    1174:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	89 a3       	std	Y+33, r24	; 0x21
    117e:	9a a3       	std	Y+34, r25	; 0x22
    1180:	ab a3       	std	Y+35, r26	; 0x23
    1182:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	69 a1       	ldd	r22, Y+33	; 0x21
    118e:	7a a1       	ldd	r23, Y+34	; 0x22
    1190:	8b a1       	ldd	r24, Y+35	; 0x23
    1192:	9c a1       	ldd	r25, Y+36	; 0x24
    1194:	0e 94 29 09 	call	0x1252	; 0x1252 <__cmpsf2>
    1198:	88 23       	and	r24, r24
    119a:	2c f4       	brge	.+10     	; 0x11a6 <toggle+0xa72>
		__ticks = 1;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	8d a3       	std	Y+37, r24	; 0x25
    11a2:	9e a3       	std	Y+38, r25	; 0x26
    11a4:	3f c0       	rjmp	.+126    	; 0x1224 <toggle+0xaf0>
	else if (__tmp > 65535)
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
    11aa:	4f e7       	ldi	r20, 0x7F	; 127
    11ac:	57 e4       	ldi	r21, 0x47	; 71
    11ae:	69 a1       	ldd	r22, Y+33	; 0x21
    11b0:	7a a1       	ldd	r23, Y+34	; 0x22
    11b2:	8b a1       	ldd	r24, Y+35	; 0x23
    11b4:	9c a1       	ldd	r25, Y+36	; 0x24
    11b6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__gesf2>
    11ba:	18 16       	cp	r1, r24
    11bc:	4c f5       	brge	.+82     	; 0x1210 <toggle+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    11c8:	7e 8d       	ldd	r23, Y+30	; 0x1e
    11ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11cc:	98 a1       	ldd	r25, Y+32	; 0x20
    11ce:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__mulsf3>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	8d a3       	std	Y+37, r24	; 0x25
    11e4:	9e a3       	std	Y+38, r25	; 0x26
    11e6:	0f c0       	rjmp	.+30     	; 0x1206 <toggle+0xad2>
    11e8:	83 e5       	ldi	r24, 0x53	; 83
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	8f a3       	std	Y+39, r24	; 0x27
    11ee:	98 a7       	std	Y+40, r25	; 0x28
    11f0:	8f a1       	ldd	r24, Y+39	; 0x27
    11f2:	98 a5       	ldd	r25, Y+40	; 0x28
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <toggle+0xac0>
    11f8:	8f a3       	std	Y+39, r24	; 0x27
    11fa:	98 a7       	std	Y+40, r25	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fc:	8d a1       	ldd	r24, Y+37	; 0x25
    11fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	8d a3       	std	Y+37, r24	; 0x25
    1204:	9e a3       	std	Y+38, r25	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1206:	8d a1       	ldd	r24, Y+37	; 0x25
    1208:	9e a1       	ldd	r25, Y+38	; 0x26
    120a:	89 2b       	or	r24, r25
    120c:	69 f7       	brne	.-38     	; 0x11e8 <toggle+0xab4>
    120e:	14 c0       	rjmp	.+40     	; 0x1238 <toggle+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1210:	69 a1       	ldd	r22, Y+33	; 0x21
    1212:	7a a1       	ldd	r23, Y+34	; 0x22
    1214:	8b a1       	ldd	r24, Y+35	; 0x23
    1216:	9c a1       	ldd	r25, Y+36	; 0x24
    1218:	0e 94 2e 09 	call	0x125c	; 0x125c <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	8d a3       	std	Y+37, r24	; 0x25
    1222:	9e a3       	std	Y+38, r25	; 0x26
    1224:	8d a1       	ldd	r24, Y+37	; 0x25
    1226:	9e a1       	ldd	r25, Y+38	; 0x26
    1228:	89 a7       	std	Y+41, r24	; 0x29
    122a:	9a a7       	std	Y+42, r25	; 0x2a
    122c:	89 a5       	ldd	r24, Y+41	; 0x29
    122e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <toggle+0xafc>
    1234:	89 a7       	std	Y+41, r24	; 0x29
    1236:	9a a7       	std	Y+42, r25	; 0x2a
 			B0_MCU_set_level(false);//NOTHING
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 80 03 	call	0x700	; 0x700 <B0_MCU_set_level>
	

		
    123e:	00 00       	nop
    1240:	ca 58       	subi	r28, 0x8A	; 138
    1242:	df 4f       	sbci	r29, 0xFF	; 255
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	08 95       	ret

00001252 <__cmpsf2>:
    1252:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fp_cmp>
    1256:	08 f4       	brcc	.+2      	; 0x125a <__cmpsf2+0x8>
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	08 95       	ret

0000125c <__fixunssfsi>:
    125c:	0e 94 c6 09 	call	0x138c	; 0x138c <__fp_splitA>
    1260:	88 f0       	brcs	.+34     	; 0x1284 <__fixunssfsi+0x28>
    1262:	9f 57       	subi	r25, 0x7F	; 127
    1264:	98 f0       	brcs	.+38     	; 0x128c <__fixunssfsi+0x30>
    1266:	b9 2f       	mov	r27, r25
    1268:	99 27       	eor	r25, r25
    126a:	b7 51       	subi	r27, 0x17	; 23
    126c:	b0 f0       	brcs	.+44     	; 0x129a <__fixunssfsi+0x3e>
    126e:	e1 f0       	breq	.+56     	; 0x12a8 <__fixunssfsi+0x4c>
    1270:	66 0f       	add	r22, r22
    1272:	77 1f       	adc	r23, r23
    1274:	88 1f       	adc	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	1a f0       	brmi	.+6      	; 0x1280 <__fixunssfsi+0x24>
    127a:	ba 95       	dec	r27
    127c:	c9 f7       	brne	.-14     	; 0x1270 <__fixunssfsi+0x14>
    127e:	14 c0       	rjmp	.+40     	; 0x12a8 <__fixunssfsi+0x4c>
    1280:	b1 30       	cpi	r27, 0x01	; 1
    1282:	91 f0       	breq	.+36     	; 0x12a8 <__fixunssfsi+0x4c>
    1284:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__fp_zero>
    1288:	b1 e0       	ldi	r27, 0x01	; 1
    128a:	08 95       	ret
    128c:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_zero>
    1290:	67 2f       	mov	r22, r23
    1292:	78 2f       	mov	r23, r24
    1294:	88 27       	eor	r24, r24
    1296:	b8 5f       	subi	r27, 0xF8	; 248
    1298:	39 f0       	breq	.+14     	; 0x12a8 <__fixunssfsi+0x4c>
    129a:	b9 3f       	cpi	r27, 0xF9	; 249
    129c:	cc f3       	brlt	.-14     	; 0x1290 <__fixunssfsi+0x34>
    129e:	86 95       	lsr	r24
    12a0:	77 95       	ror	r23
    12a2:	67 95       	ror	r22
    12a4:	b3 95       	inc	r27
    12a6:	d9 f7       	brne	.-10     	; 0x129e <__fixunssfsi+0x42>
    12a8:	3e f4       	brtc	.+14     	; 0x12b8 <__fixunssfsi+0x5c>
    12aa:	90 95       	com	r25
    12ac:	80 95       	com	r24
    12ae:	70 95       	com	r23
    12b0:	61 95       	neg	r22
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	8f 4f       	sbci	r24, 0xFF	; 255
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	08 95       	ret

000012ba <__floatunsisf>:
    12ba:	e8 94       	clt
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <__floatsisf+0x12>

000012be <__floatsisf>:
    12be:	97 fb       	bst	r25, 7
    12c0:	3e f4       	brtc	.+14     	; 0x12d0 <__floatsisf+0x12>
    12c2:	90 95       	com	r25
    12c4:	80 95       	com	r24
    12c6:	70 95       	com	r23
    12c8:	61 95       	neg	r22
    12ca:	7f 4f       	sbci	r23, 0xFF	; 255
    12cc:	8f 4f       	sbci	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	99 23       	and	r25, r25
    12d2:	a9 f0       	breq	.+42     	; 0x12fe <__floatsisf+0x40>
    12d4:	f9 2f       	mov	r31, r25
    12d6:	96 e9       	ldi	r25, 0x96	; 150
    12d8:	bb 27       	eor	r27, r27
    12da:	93 95       	inc	r25
    12dc:	f6 95       	lsr	r31
    12de:	87 95       	ror	r24
    12e0:	77 95       	ror	r23
    12e2:	67 95       	ror	r22
    12e4:	b7 95       	ror	r27
    12e6:	f1 11       	cpse	r31, r1
    12e8:	f8 cf       	rjmp	.-16     	; 0x12da <__floatsisf+0x1c>
    12ea:	fa f4       	brpl	.+62     	; 0x132a <__floatsisf+0x6c>
    12ec:	bb 0f       	add	r27, r27
    12ee:	11 f4       	brne	.+4      	; 0x12f4 <__floatsisf+0x36>
    12f0:	60 ff       	sbrs	r22, 0
    12f2:	1b c0       	rjmp	.+54     	; 0x132a <__floatsisf+0x6c>
    12f4:	6f 5f       	subi	r22, 0xFF	; 255
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	8f 4f       	sbci	r24, 0xFF	; 255
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	16 c0       	rjmp	.+44     	; 0x132a <__floatsisf+0x6c>
    12fe:	88 23       	and	r24, r24
    1300:	11 f0       	breq	.+4      	; 0x1306 <__floatsisf+0x48>
    1302:	96 e9       	ldi	r25, 0x96	; 150
    1304:	11 c0       	rjmp	.+34     	; 0x1328 <__floatsisf+0x6a>
    1306:	77 23       	and	r23, r23
    1308:	21 f0       	breq	.+8      	; 0x1312 <__floatsisf+0x54>
    130a:	9e e8       	ldi	r25, 0x8E	; 142
    130c:	87 2f       	mov	r24, r23
    130e:	76 2f       	mov	r23, r22
    1310:	05 c0       	rjmp	.+10     	; 0x131c <__floatsisf+0x5e>
    1312:	66 23       	and	r22, r22
    1314:	71 f0       	breq	.+28     	; 0x1332 <__floatsisf+0x74>
    1316:	96 e8       	ldi	r25, 0x86	; 134
    1318:	86 2f       	mov	r24, r22
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	2a f0       	brmi	.+10     	; 0x132a <__floatsisf+0x6c>
    1320:	9a 95       	dec	r25
    1322:	66 0f       	add	r22, r22
    1324:	77 1f       	adc	r23, r23
    1326:	88 1f       	adc	r24, r24
    1328:	da f7       	brpl	.-10     	; 0x1320 <__floatsisf+0x62>
    132a:	88 0f       	add	r24, r24
    132c:	96 95       	lsr	r25
    132e:	87 95       	ror	r24
    1330:	97 f9       	bld	r25, 7
    1332:	08 95       	ret

00001334 <__fp_cmp>:
    1334:	99 0f       	add	r25, r25
    1336:	00 08       	sbc	r0, r0
    1338:	55 0f       	add	r21, r21
    133a:	aa 0b       	sbc	r26, r26
    133c:	e0 e8       	ldi	r30, 0x80	; 128
    133e:	fe ef       	ldi	r31, 0xFE	; 254
    1340:	16 16       	cp	r1, r22
    1342:	17 06       	cpc	r1, r23
    1344:	e8 07       	cpc	r30, r24
    1346:	f9 07       	cpc	r31, r25
    1348:	c0 f0       	brcs	.+48     	; 0x137a <__fp_cmp+0x46>
    134a:	12 16       	cp	r1, r18
    134c:	13 06       	cpc	r1, r19
    134e:	e4 07       	cpc	r30, r20
    1350:	f5 07       	cpc	r31, r21
    1352:	98 f0       	brcs	.+38     	; 0x137a <__fp_cmp+0x46>
    1354:	62 1b       	sub	r22, r18
    1356:	73 0b       	sbc	r23, r19
    1358:	84 0b       	sbc	r24, r20
    135a:	95 0b       	sbc	r25, r21
    135c:	39 f4       	brne	.+14     	; 0x136c <__fp_cmp+0x38>
    135e:	0a 26       	eor	r0, r26
    1360:	61 f0       	breq	.+24     	; 0x137a <__fp_cmp+0x46>
    1362:	23 2b       	or	r18, r19
    1364:	24 2b       	or	r18, r20
    1366:	25 2b       	or	r18, r21
    1368:	21 f4       	brne	.+8      	; 0x1372 <__fp_cmp+0x3e>
    136a:	08 95       	ret
    136c:	0a 26       	eor	r0, r26
    136e:	09 f4       	brne	.+2      	; 0x1372 <__fp_cmp+0x3e>
    1370:	a1 40       	sbci	r26, 0x01	; 1
    1372:	a6 95       	lsr	r26
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	81 1d       	adc	r24, r1
    1378:	81 1d       	adc	r24, r1
    137a:	08 95       	ret

0000137c <__fp_split3>:
    137c:	57 fd       	sbrc	r21, 7
    137e:	90 58       	subi	r25, 0x80	; 128
    1380:	44 0f       	add	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	59 f0       	breq	.+22     	; 0x139c <__fp_splitA+0x10>
    1386:	5f 3f       	cpi	r21, 0xFF	; 255
    1388:	71 f0       	breq	.+28     	; 0x13a6 <__fp_splitA+0x1a>
    138a:	47 95       	ror	r20

0000138c <__fp_splitA>:
    138c:	88 0f       	add	r24, r24
    138e:	97 fb       	bst	r25, 7
    1390:	99 1f       	adc	r25, r25
    1392:	61 f0       	breq	.+24     	; 0x13ac <__fp_splitA+0x20>
    1394:	9f 3f       	cpi	r25, 0xFF	; 255
    1396:	79 f0       	breq	.+30     	; 0x13b6 <__fp_splitA+0x2a>
    1398:	87 95       	ror	r24
    139a:	08 95       	ret
    139c:	12 16       	cp	r1, r18
    139e:	13 06       	cpc	r1, r19
    13a0:	14 06       	cpc	r1, r20
    13a2:	55 1f       	adc	r21, r21
    13a4:	f2 cf       	rjmp	.-28     	; 0x138a <__fp_split3+0xe>
    13a6:	46 95       	lsr	r20
    13a8:	f1 df       	rcall	.-30     	; 0x138c <__fp_splitA>
    13aa:	08 c0       	rjmp	.+16     	; 0x13bc <__fp_splitA+0x30>
    13ac:	16 16       	cp	r1, r22
    13ae:	17 06       	cpc	r1, r23
    13b0:	18 06       	cpc	r1, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	f1 cf       	rjmp	.-30     	; 0x1398 <__fp_splitA+0xc>
    13b6:	86 95       	lsr	r24
    13b8:	71 05       	cpc	r23, r1
    13ba:	61 05       	cpc	r22, r1
    13bc:	08 94       	sec
    13be:	08 95       	ret

000013c0 <__fp_zero>:
    13c0:	e8 94       	clt

000013c2 <__fp_szero>:
    13c2:	bb 27       	eor	r27, r27
    13c4:	66 27       	eor	r22, r22
    13c6:	77 27       	eor	r23, r23
    13c8:	cb 01       	movw	r24, r22
    13ca:	97 f9       	bld	r25, 7
    13cc:	08 95       	ret

000013ce <__gesf2>:
    13ce:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fp_cmp>
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <__gesf2+0x8>
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	08 95       	ret

000013d8 <__mulsf3>:
    13d8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__mulsf3x>
    13dc:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__fp_round>
    13e0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__fp_pscA>
    13e4:	38 f0       	brcs	.+14     	; 0x13f4 <__mulsf3+0x1c>
    13e6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <__fp_pscB>
    13ea:	20 f0       	brcs	.+8      	; 0x13f4 <__mulsf3+0x1c>
    13ec:	95 23       	and	r25, r21
    13ee:	11 f0       	breq	.+4      	; 0x13f4 <__mulsf3+0x1c>
    13f0:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_inf>
    13f4:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__fp_nan>
    13f8:	11 24       	eor	r1, r1
    13fa:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__fp_szero>

000013fe <__mulsf3x>:
    13fe:	0e 94 be 09 	call	0x137c	; 0x137c <__fp_split3>
    1402:	70 f3       	brcs	.-36     	; 0x13e0 <__mulsf3+0x8>

00001404 <__mulsf3_pse>:
    1404:	95 9f       	mul	r25, r21
    1406:	c1 f3       	breq	.-16     	; 0x13f8 <__mulsf3+0x20>
    1408:	95 0f       	add	r25, r21
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	55 1f       	adc	r21, r21
    140e:	62 9f       	mul	r22, r18
    1410:	f0 01       	movw	r30, r0
    1412:	72 9f       	mul	r23, r18
    1414:	bb 27       	eor	r27, r27
    1416:	f0 0d       	add	r31, r0
    1418:	b1 1d       	adc	r27, r1
    141a:	63 9f       	mul	r22, r19
    141c:	aa 27       	eor	r26, r26
    141e:	f0 0d       	add	r31, r0
    1420:	b1 1d       	adc	r27, r1
    1422:	aa 1f       	adc	r26, r26
    1424:	64 9f       	mul	r22, r20
    1426:	66 27       	eor	r22, r22
    1428:	b0 0d       	add	r27, r0
    142a:	a1 1d       	adc	r26, r1
    142c:	66 1f       	adc	r22, r22
    142e:	82 9f       	mul	r24, r18
    1430:	22 27       	eor	r18, r18
    1432:	b0 0d       	add	r27, r0
    1434:	a1 1d       	adc	r26, r1
    1436:	62 1f       	adc	r22, r18
    1438:	73 9f       	mul	r23, r19
    143a:	b0 0d       	add	r27, r0
    143c:	a1 1d       	adc	r26, r1
    143e:	62 1f       	adc	r22, r18
    1440:	83 9f       	mul	r24, r19
    1442:	a0 0d       	add	r26, r0
    1444:	61 1d       	adc	r22, r1
    1446:	22 1f       	adc	r18, r18
    1448:	74 9f       	mul	r23, r20
    144a:	33 27       	eor	r19, r19
    144c:	a0 0d       	add	r26, r0
    144e:	61 1d       	adc	r22, r1
    1450:	23 1f       	adc	r18, r19
    1452:	84 9f       	mul	r24, r20
    1454:	60 0d       	add	r22, r0
    1456:	21 1d       	adc	r18, r1
    1458:	82 2f       	mov	r24, r18
    145a:	76 2f       	mov	r23, r22
    145c:	6a 2f       	mov	r22, r26
    145e:	11 24       	eor	r1, r1
    1460:	9f 57       	subi	r25, 0x7F	; 127
    1462:	50 40       	sbci	r21, 0x00	; 0
    1464:	9a f0       	brmi	.+38     	; 0x148c <__mulsf3_pse+0x88>
    1466:	f1 f0       	breq	.+60     	; 0x14a4 <__mulsf3_pse+0xa0>
    1468:	88 23       	and	r24, r24
    146a:	4a f0       	brmi	.+18     	; 0x147e <__mulsf3_pse+0x7a>
    146c:	ee 0f       	add	r30, r30
    146e:	ff 1f       	adc	r31, r31
    1470:	bb 1f       	adc	r27, r27
    1472:	66 1f       	adc	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	91 50       	subi	r25, 0x01	; 1
    147a:	50 40       	sbci	r21, 0x00	; 0
    147c:	a9 f7       	brne	.-22     	; 0x1468 <__mulsf3_pse+0x64>
    147e:	9e 3f       	cpi	r25, 0xFE	; 254
    1480:	51 05       	cpc	r21, r1
    1482:	80 f0       	brcs	.+32     	; 0x14a4 <__mulsf3_pse+0xa0>
    1484:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__fp_inf>
    1488:	0c 94 e1 09 	jmp	0x13c2	; 0x13c2 <__fp_szero>
    148c:	5f 3f       	cpi	r21, 0xFF	; 255
    148e:	e4 f3       	brlt	.-8      	; 0x1488 <__mulsf3_pse+0x84>
    1490:	98 3e       	cpi	r25, 0xE8	; 232
    1492:	d4 f3       	brlt	.-12     	; 0x1488 <__mulsf3_pse+0x84>
    1494:	86 95       	lsr	r24
    1496:	77 95       	ror	r23
    1498:	67 95       	ror	r22
    149a:	b7 95       	ror	r27
    149c:	f7 95       	ror	r31
    149e:	e7 95       	ror	r30
    14a0:	9f 5f       	subi	r25, 0xFF	; 255
    14a2:	c1 f7       	brne	.-16     	; 0x1494 <__mulsf3_pse+0x90>
    14a4:	fe 2b       	or	r31, r30
    14a6:	88 0f       	add	r24, r24
    14a8:	91 1d       	adc	r25, r1
    14aa:	96 95       	lsr	r25
    14ac:	87 95       	ror	r24
    14ae:	97 f9       	bld	r25, 7
    14b0:	08 95       	ret

000014b2 <__fp_inf>:
    14b2:	97 f9       	bld	r25, 7
    14b4:	9f 67       	ori	r25, 0x7F	; 127
    14b6:	80 e8       	ldi	r24, 0x80	; 128
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	08 95       	ret

000014be <__fp_nan>:
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	80 ec       	ldi	r24, 0xC0	; 192
    14c2:	08 95       	ret

000014c4 <__fp_pscA>:
    14c4:	00 24       	eor	r0, r0
    14c6:	0a 94       	dec	r0
    14c8:	16 16       	cp	r1, r22
    14ca:	17 06       	cpc	r1, r23
    14cc:	18 06       	cpc	r1, r24
    14ce:	09 06       	cpc	r0, r25
    14d0:	08 95       	ret

000014d2 <__fp_pscB>:
    14d2:	00 24       	eor	r0, r0
    14d4:	0a 94       	dec	r0
    14d6:	12 16       	cp	r1, r18
    14d8:	13 06       	cpc	r1, r19
    14da:	14 06       	cpc	r1, r20
    14dc:	05 06       	cpc	r0, r21
    14de:	08 95       	ret

000014e0 <__fp_round>:
    14e0:	09 2e       	mov	r0, r25
    14e2:	03 94       	inc	r0
    14e4:	00 0c       	add	r0, r0
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__fp_round+0xc>
    14e8:	88 23       	and	r24, r24
    14ea:	52 f0       	brmi	.+20     	; 0x1500 <__fp_round+0x20>
    14ec:	bb 0f       	add	r27, r27
    14ee:	40 f4       	brcc	.+16     	; 0x1500 <__fp_round+0x20>
    14f0:	bf 2b       	or	r27, r31
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <__fp_round+0x18>
    14f4:	60 ff       	sbrs	r22, 0
    14f6:	04 c0       	rjmp	.+8      	; 0x1500 <__fp_round+0x20>
    14f8:	6f 5f       	subi	r22, 0xFF	; 255
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	8f 4f       	sbci	r24, 0xFF	; 255
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	08 95       	ret

00001502 <_exit>:
    1502:	f8 94       	cli

00001504 <__stop_program>:
    1504:	ff cf       	rjmp	.-2      	; 0x1504 <__stop_program>
