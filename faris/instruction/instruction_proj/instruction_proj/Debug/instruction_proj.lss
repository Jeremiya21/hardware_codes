
instruction_proj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003113  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000265f  00000000  00000000  000034af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000916  00000000  00000000  00005b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00006424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000134a  00000000  00000000  00006564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ac  00000000  00000000  000078ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00007b5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 57 00 	call	0xae	; 0xae <main>
  a0:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  a8:	0e 94 af 00 	call	0x15e	; 0x15e <system_init>
  ac:	08 95       	ret

000000ae <main>:
#include "turn_led.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  ae:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	//bool R=true,G=true,B=true,W=true;
	/* Replace with your application code */
	while (1) {
		turn_led(R,G,B,W);
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <turn_led>
  be:	f9 cf       	rjmp	.-14     	; 0xb2 <main+0x4>

000000c0 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	08 95       	ret

000000c4 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret

000000c8 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret

000000cc <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	08 c0       	rjmp	.+16     	; 0xe0 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e0 5f       	subi	r30, 0xF0	; 240
  d6:	fb 4f       	sbci	r31, 0xFB	; 251
  d8:	90 81       	ld	r25, Z
  da:	98 60       	ori	r25, 0x08	; 8
  dc:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	b0 f3       	brcs	.-20     	; 0xd0 <mcu_init+0x4>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	08 c0       	rjmp	.+16     	; 0xf8 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  e8:	e8 2f       	mov	r30, r24
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	e0 5d       	subi	r30, 0xD0	; 208
  ee:	fb 4f       	sbci	r31, 0xFB	; 251
  f0:	90 81       	ld	r25, Z
  f2:	98 60       	ori	r25, 0x08	; 8
  f4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	b0 f3       	brcs	.-20     	; 0xe8 <mcu_init+0x1c>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 c0       	rjmp	.+16     	; 0x110 <__EEPROM_REGION_LENGTH__+0x10>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 100:	e8 2f       	mov	r30, r24
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	e0 5b       	subi	r30, 0xB0	; 176
 106:	fb 4f       	sbci	r31, 0xFB	; 251
 108:	90 81       	ld	r25, Z
 10a:	98 60       	ori	r25, 0x08	; 8
 10c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	88 30       	cpi	r24, 0x08	; 8
 112:	b0 f3       	brcs	.-20     	; 0x100 <__EEPROM_REGION_LENGTH__>
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 c0       	rjmp	.+16     	; 0x128 <__EEPROM_REGION_LENGTH__+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 118:	e8 2f       	mov	r30, r24
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	e0 59       	subi	r30, 0x90	; 144
 11e:	fb 4f       	sbci	r31, 0xFB	; 251
 120:	90 81       	ld	r25, Z
 122:	98 60       	ori	r25, 0x08	; 8
 124:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 126:	8f 5f       	subi	r24, 0xFF	; 255
 128:	88 30       	cpi	r24, 0x08	; 8
 12a:	b0 f3       	brcs	.-20     	; 0x118 <__EEPROM_REGION_LENGTH__+0x18>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 c0       	rjmp	.+16     	; 0x140 <__EEPROM_REGION_LENGTH__+0x40>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 130:	e8 2f       	mov	r30, r24
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e0 57       	subi	r30, 0x70	; 112
 136:	fb 4f       	sbci	r31, 0xFB	; 251
 138:	90 81       	ld	r25, Z
 13a:	98 60       	ori	r25, 0x08	; 8
 13c:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	b0 f3       	brcs	.-20     	; 0x130 <__EEPROM_REGION_LENGTH__+0x30>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 c0       	rjmp	.+16     	; 0x158 <__EEPROM_REGION_LENGTH__+0x58>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 148:	e8 2f       	mov	r30, r24
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	e0 55       	subi	r30, 0x50	; 80
 14e:	fb 4f       	sbci	r31, 0xFB	; 251
 150:	90 81       	ld	r25, Z
 152:	98 60       	ori	r25, 0x08	; 8
 154:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 156:	8f 5f       	subi	r24, 0xFF	; 255
 158:	88 30       	cpi	r24, 0x08	; 8
 15a:	b0 f3       	brcs	.-20     	; 0x148 <__EEPROM_REGION_LENGTH__+0x48>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 15c:	08 95       	ret

0000015e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 15e:	0e 94 66 00 	call	0xcc	; 0xcc <mcu_init>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 162:	81 b1       	in	r24, 0x01	; 1
 164:	87 7f       	andi	r24, 0xF7	; 247
 166:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 168:	80 b1       	in	r24, 0x00	; 0
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	80 b9       	out	0x00, r24	; 0
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 16e:	8d b1       	in	r24, 0x0d	; 13
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 174:	8c b1       	in	r24, 0x0c	; 12
 176:	81 60       	ori	r24, 0x01	; 1
 178:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 17a:	8d b1       	in	r24, 0x0d	; 13
 17c:	8d 7f       	andi	r24, 0xFD	; 253
 17e:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 180:	8c b1       	in	r24, 0x0c	; 12
 182:	82 60       	ori	r24, 0x02	; 2
 184:	8c b9       	out	0x0c, r24	; 12
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
	} else {
		VPORTD.OUT &= ~(1 << pin);
 186:	8d b1       	in	r24, 0x0d	; 13
 188:	8b 7f       	andi	r24, 0xFB	; 251
 18a:	8d b9       	out	0x0d, r24	; 13
	switch (dir) {
	case PORT_DIR_IN:
		VPORTD.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTD.DIR |= (1 << pin);
 18c:	8c b1       	in	r24, 0x0c	; 12
 18e:	84 60       	ori	r24, 0x04	; 4
 190:	8c b9       	out	0x0c, r24	; 12
	    // <true"> High
	    false);

	B0_set_dir(PORT_DIR_OUT);

	CLKCTRL_init();
 192:	0e 94 62 00 	call	0xc4	; 0xc4 <CLKCTRL_init>

	CPUINT_init();
 196:	0e 94 64 00 	call	0xc8	; 0xc8 <CPUINT_init>

	SLPCTRL_init();
 19a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SLPCTRL_init>

	BOD_init();
 19e:	0e 94 60 00 	call	0xc0	; 0xc0 <BOD_init>
 1a2:	08 95       	ret

000001a4 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret

000001a8 <turn_led>:
 *                  false = Pin level set to "low" state
 */
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTD.OUT |= (1 << pin);
 1a8:	8d b1       	in	r24, 0x0d	; 13
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	8d b9       	out	0x0d, r24	; 13
 1ae:	8d b1       	in	r24, 0x0d	; 13
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	8d b9       	out	0x0d, r24	; 13
 1b4:	8d b1       	in	r24, 0x0d	; 13
 1b6:	84 60       	ori	r24, 0x04	; 4
 1b8:	8d b9       	out	0x0d, r24	; 13
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 1ba:	81 b1       	in	r24, 0x01	; 1
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	81 b9       	out	0x01, r24	; 1
 1c0:	08 95       	ret

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
