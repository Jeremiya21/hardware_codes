
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  00000298  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003407  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027f4  00000000  00000000  000037f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b3e  00000000  00000000  00005feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00006b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000167a  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000105  00000000  00000000  0000831a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000841f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 5d 00 	call	0xba	; 0xba <main>
  a0:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <adjust_led>:
 * Created: 01-10-2023 14:30:57
 *  Author: faris
 */ 
#include "tcb.h"
void adjust_led(uint16_t duty_cycle){
	TCB0.CCMPL=255;
  a8:	e0 e8       	ldi	r30, 0x80	; 128
  aa:	fa e0       	ldi	r31, 0x0A	; 10
  ac:	9f ef       	ldi	r25, 0xFF	; 255
  ae:	94 87       	std	Z+12, r25	; 0x0c
	TCB0.CCMPH=duty_cycle;
  b0:	85 87       	std	Z+13, r24	; 0x0d
  b2:	08 95       	ret

000000b4 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  b4:	0e 94 c7 00 	call	0x18e	; 0x18e <system_init>
  b8:	08 95       	ret

000000ba <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  ba:	0e 94 5a 00 	call	0xb4	; 0xb4 <atmel_start_init>
	uint16_t duty_cycle;

	/* Replace with your application code */
	while (1) {
		adjust_led(duty_cycle);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 54 00 	call	0xa8	; 0xa8 <adjust_led>
  c6:	fb cf       	rjmp	.-10     	; 0xbe <main+0x4>

000000c8 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	08 95       	ret

000000cc <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
  cc:	40 e1       	ldi	r20, 0x10	; 16
  ce:	68 ed       	ldi	r22, 0xD8	; 216
  d0:	81 e6       	ldi	r24, 0x61	; 97
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	08 95       	ret

000000dc <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret

000000e0 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  e4:	e8 2f       	mov	r30, r24
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	e0 5f       	subi	r30, 0xF0	; 240
  ea:	fb 4f       	sbci	r31, 0xFB	; 251
  ec:	90 81       	ld	r25, Z
  ee:	98 60       	ori	r25, 0x08	; 8
  f0:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
  f2:	8f 5f       	subi	r24, 0xFF	; 255
  f4:	88 30       	cpi	r24, 0x08	; 8
  f6:	b0 f3       	brcs	.-20     	; 0xe4 <mcu_init+0x4>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	08 c0       	rjmp	.+16     	; 0x10c <__EEPROM_REGION_LENGTH__+0xc>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
  fc:	e8 2f       	mov	r30, r24
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	e0 5d       	subi	r30, 0xD0	; 208
 102:	fb 4f       	sbci	r31, 0xFB	; 251
 104:	90 81       	ld	r25, Z
 106:	98 60       	ori	r25, 0x08	; 8
 108:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	b0 f3       	brcs	.-20     	; 0xfc <mcu_init+0x1c>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	08 c0       	rjmp	.+16     	; 0x124 <__EEPROM_REGION_LENGTH__+0x24>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 114:	e8 2f       	mov	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e0 5b       	subi	r30, 0xB0	; 176
 11a:	fb 4f       	sbci	r31, 0xFB	; 251
 11c:	90 81       	ld	r25, Z
 11e:	98 60       	ori	r25, 0x08	; 8
 120:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	88 30       	cpi	r24, 0x08	; 8
 126:	b0 f3       	brcs	.-20     	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	08 c0       	rjmp	.+16     	; 0x13c <__EEPROM_REGION_LENGTH__+0x3c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 12c:	e8 2f       	mov	r30, r24
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e0 59       	subi	r30, 0x90	; 144
 132:	fb 4f       	sbci	r31, 0xFB	; 251
 134:	90 81       	ld	r25, Z
 136:	98 60       	ori	r25, 0x08	; 8
 138:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	88 30       	cpi	r24, 0x08	; 8
 13e:	b0 f3       	brcs	.-20     	; 0x12c <__EEPROM_REGION_LENGTH__+0x2c>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 c0       	rjmp	.+16     	; 0x154 <__EEPROM_REGION_LENGTH__+0x54>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 144:	e8 2f       	mov	r30, r24
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e0 57       	subi	r30, 0x70	; 112
 14a:	fb 4f       	sbci	r31, 0xFB	; 251
 14c:	90 81       	ld	r25, Z
 14e:	98 60       	ori	r25, 0x08	; 8
 150:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	88 30       	cpi	r24, 0x08	; 8
 156:	b0 f3       	brcs	.-20     	; 0x144 <__EEPROM_REGION_LENGTH__+0x44>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 c0       	rjmp	.+16     	; 0x16c <__EEPROM_REGION_LENGTH__+0x6c>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 15c:	e8 2f       	mov	r30, r24
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e0 55       	subi	r30, 0x50	; 80
 162:	fb 4f       	sbci	r31, 0xFB	; 251
 164:	90 81       	ld	r25, Z
 166:	98 60       	ori	r25, 0x08	; 8
 168:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	88 30       	cpi	r24, 0x08	; 8
 16e:	b0 f3       	brcs	.-20     	; 0x15c <__EEPROM_REGION_LENGTH__+0x5c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 170:	08 95       	ret

00000172 <TIMER_0_initialization>:
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 172:	85 b3       	in	r24, 0x15	; 21
 174:	8f 7e       	andi	r24, 0xEF	; 239
 176:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 178:	84 b3       	in	r24, 0x14	; 20
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	84 bb       	out	0x14, r24	; 20

	G3_MCU_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */

	PORTMUX.TCBROUTEA |= PORTMUX_TCB0_bm;
 17e:	e0 ee       	ldi	r30, 0xE0	; 224
 180:	f5 e0       	ldi	r31, 0x05	; 5
 182:	85 81       	ldd	r24, Z+5	; 0x05
 184:	81 60       	ori	r24, 0x01	; 1
 186:	85 83       	std	Z+5, r24	; 0x05

	TIMER_0_init();
 188:	0e 94 da 00 	call	0x1b4	; 0x1b4 <TIMER_0_init>
 18c:	08 95       	ret

0000018e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 18e:	0e 94 70 00 	call	0xe0	; 0xe0 <mcu_init>

	CLKCTRL_init();
 192:	0e 94 66 00 	call	0xcc	; 0xcc <CLKCTRL_init>

	TIMER_0_initialization();
 196:	0e 94 b9 00 	call	0x172	; 0x172 <TIMER_0_initialization>

	CPUINT_init();
 19a:	0e 94 6e 00 	call	0xdc	; 0xdc <CPUINT_init>

	SLPCTRL_init();
 19e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SLPCTRL_init>

	BOD_init();
 1a2:	0e 94 64 00 	call	0xc8	; 0xc8 <BOD_init>
 1a6:	08 95       	ret

000001a8 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1a8:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 1aa:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 1ac:	40 83       	st	Z, r20
	ret                             // Return to caller
 1ae:	08 95       	ret

000001b0 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	08 95       	ret

000001b4 <TIMER_0_init>:
 * \return Initialization status.
 */
int8_t TIMER_0_init()
{

	TCB0.CCMP = 0xff; /* Compare or Capture: 0xff */
 1b4:	e0 e8       	ldi	r30, 0x80	; 128
 1b6:	fa e0       	ldi	r31, 0x0A	; 10
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	84 87       	std	Z+12, r24	; 0x0c
 1be:	95 87       	std	Z+13, r25	; 0x0d

	// TCB0.CNT = 0x0; /* Count: 0x0 */

	TCB0.CTRLB = 0 << TCB_ASYNC_bp      /* Asynchronous Enable: disabled */
 1c0:	87 e1       	ldi	r24, 0x17	; 23
 1c2:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << TCB_EDGE_bp /* Event Edge: disabled */
	//		 | 0 << TCB_FILTER_bp; /* Input Capture Noise Cancellation Filter: disabled */

	// TCB0.INTCTRL = 0 << TCB_CAPT_bp /* Capture or Timeout: disabled */;

	TCB0.CTRLA = TCB_CLKSEL_CLKDIV1_gc  /* CLK_PER (No Prescaling) */
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 83       	st	Z, r24
	             | 1 << TCB_ENABLE_bp   /* Enable: enabled */
	             | 0 << TCB_RUNSTDBY_bp /* Run Standby: disabled */
	             | 0 << TCB_SYNCUPD_bp; /* Synchronize Update: disabled */

	return 0;
}
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
