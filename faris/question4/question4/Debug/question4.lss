
question4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  000004a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000454  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d98  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002590  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d6  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00006358  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000133f  00000000  00000000  000065f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000423  00000000  00000000  00007937  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00007d5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  68:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  6c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  70:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  74:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  78:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  7c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  80:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  84:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  88:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  8c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf ef       	ldi	r28, 0xFF	; 255
  96:	cd bf       	out	0x3d, r28	; 61
  98:	df e3       	ldi	r29, 0x3F	; 63
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a0:	0c 94 28 02 	jmp	0x450	; 0x450 <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	system_init();
  b0:	0e 94 0e 02 	call	0x41c	; 0x41c <system_init>
}
  b4:	00 00       	nop
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	08 95       	ret

000000bc <main>:
#include <atmel_start.h>
#include <stdbool.h>
int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  c6:	0e 94 54 00 	call	0xa8	; 0xa8 <atmel_start_init>
	bool dir;
	
	/* Replace with your application code */
	while (1) {
		
		dir=ret_logic_level();
  ca:	0e 94 3b 01 	call	0x276	; 0x276 <ret_logic_level>
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	89 2b       	or	r24, r25
  d2:	09 f4       	brne	.+2      	; 0xd6 <main+0x1a>
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	29 83       	std	Y+1, r18	; 0x01
	}
  d8:	f8 cf       	rjmp	.-16     	; 0xca <main+0xe>

000000da <PORTA_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <PORTA_set_pin_pull_mode+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <PORTA_set_pin_pull_mode+0x8>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	8b 83       	std	Y+3, r24	; 0x03
  e8:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	88 2f       	mov	r24, r24
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	80 5f       	subi	r24, 0xF0	; 240
  f2:	9b 4f       	sbci	r25, 0xFB	; 251
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
  f8:	8c 81       	ldd	r24, Y+4	; 0x04
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	59 f4       	brne	.+22     	; 0x114 <__EEPROM_REGION_LENGTH__+0x14>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	fc 01       	movw	r30, r24
 104:	80 81       	ld	r24, Z
 106:	28 2f       	mov	r18, r24
 108:	28 60       	ori	r18, 0x08	; 8
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
 112:	0d c0       	rjmp	.+26     	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
 114:	8c 81       	ldd	r24, Y+4	; 0x04
 116:	88 23       	and	r24, r24
 118:	51 f4       	brne	.+20     	; 0x12e <__EEPROM_REGION_LENGTH__+0x2e>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	9a 81       	ldd	r25, Y+2	; 0x02
 11e:	fc 01       	movw	r30, r24
 120:	80 81       	ld	r24, Z
 122:	28 2f       	mov	r18, r24
 124:	27 7f       	andi	r18, 0xF7	; 247
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	}
}
 12e:	00 00       	nop
 130:	24 96       	adiw	r28, 0x04	; 4
 132:	cd bf       	out	0x3d, r28	; 61
 134:	de bf       	out	0x3e, r29	; 62
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	00 d0       	rcall	.+0      	; 0x142 <PORTA_set_pin_dir+0x6>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	91 05       	cpc	r25, r1
 154:	e1 f0       	breq	.+56     	; 0x18e <PORTA_set_pin_dir+0x52>
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	91 05       	cpc	r25, r1
 15a:	71 f1       	breq	.+92     	; 0x1b8 <PORTA_set_pin_dir+0x7c>
 15c:	89 2b       	or	r24, r25
 15e:	09 f0       	breq	.+2      	; 0x162 <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
 160:	3b c0       	rjmp	.+118    	; 0x1d8 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	80 81       	ld	r24, Z
 16e:	68 2f       	mov	r22, r24
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	48 2f       	mov	r20, r24
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <PORTA_set_pin_dir+0x44>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	4a 95       	dec	r20
 182:	e2 f7       	brpl	.-8      	; 0x17c <PORTA_set_pin_dir+0x40>
 184:	80 95       	com	r24
 186:	86 23       	and	r24, r22
 188:	f9 01       	movw	r30, r18
 18a:	80 83       	st	Z, r24
		break;
 18c:	25 c0       	rjmp	.+74     	; 0x1d8 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	68 2f       	mov	r22, r24
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	48 2f       	mov	r20, r24
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <PORTA_set_pin_dir+0x70>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	4a 95       	dec	r20
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <PORTA_set_pin_dir+0x6c>
 1b0:	86 2b       	or	r24, r22
 1b2:	f9 01       	movw	r30, r18
 1b4:	80 83       	st	Z, r24
		break;
 1b6:	10 c0       	rjmp	.+32     	; 0x1d8 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	88 2f       	mov	r24, r24
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	80 5f       	subi	r24, 0xF0	; 240
 1c0:	9b 4f       	sbci	r25, 0xFB	; 251
 1c2:	29 81       	ldd	r18, Y+1	; 0x01
 1c4:	22 2f       	mov	r18, r18
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	20 5f       	subi	r18, 0xF0	; 240
 1ca:	3b 4f       	sbci	r19, 0xFB	; 251
 1cc:	f9 01       	movw	r30, r18
 1ce:	20 81       	ld	r18, Z
 1d0:	28 60       	ori	r18, 0x08	; 8
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
		break;
 1d6:	00 00       	nop
	default:
		break;
	}
}
 1d8:	00 00       	nop
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <PORTA_get_pin_level>:
 * \brief Get level on pin
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTA_get_pin_level(const uint8_t pin)
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	1f 92       	push	r1
 1ea:	cd b7       	in	r28, 0x3d	; 61
 1ec:	de b7       	in	r29, 0x3e	; 62
 1ee:	89 83       	std	Y+1, r24	; 0x01
	return VPORTA.IN & (1 << pin);
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	28 2f       	mov	r18, r24
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	89 81       	ldd	r24, Y+1	; 0x01
 1fe:	48 2f       	mov	r20, r24
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <PORTA_get_pin_level+0x28>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	4a 95       	dec	r20
 20e:	e2 f7       	brpl	.-8      	; 0x208 <PORTA_get_pin_level+0x24>
 210:	82 23       	and	r24, r18
 212:	93 23       	and	r25, r19
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	89 2b       	or	r24, r25
 218:	09 f4       	brne	.+2      	; 0x21c <PORTA_get_pin_level+0x38>
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	82 2f       	mov	r24, r18
}
 21e:	0f 90       	pop	r0
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <PIN1_J13_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PIN1_J13_set_pull_mode(const enum port_pull_mode pull_mode)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	1f 92       	push	r1
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_pull_mode(2, pull_mode);
 232:	69 81       	ldd	r22, Y+1	; 0x01
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 6d 00 	call	0xda	; 0xda <PORTA_set_pin_pull_mode>
}
 23a:	00 00       	nop
 23c:	0f 90       	pop	r0
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <PIN1_J13_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PIN1_J13_set_dir(const enum port_dir dir)
{
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	1f 92       	push	r1
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(2, dir);
 250:	69 81       	ldd	r22, Y+1	; 0x01
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 9e 00 	call	0x13c	; 0x13c <PORTA_set_pin_dir>
}
 258:	00 00       	nop
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <PIN1_J13_get_level>:
 * \brief Get level on PIN1_J13
 *
 * Reads the level on a pin
 */
static inline bool PIN1_J13_get_level()
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
	return PORTA_get_pin_level(2);
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <PORTA_get_pin_level>
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <ret_logic_level>:
 * Created: 26-09-2023 14:45:51
 *  Author: faris
 */ 
#include <stdbool.h>
#include <atmel_start.h>
bool ret_logic_level(){
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	27 97       	sbiw	r28, 0x07	; 7
 280:	cd bf       	out	0x3d, r28	; 61
 282:	de bf       	out	0x3e, r29	; 62
	PIN1_J13_set_dir(PORT_DIR_IN);
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	0e 94 22 01 	call	0x244	; 0x244 <PIN1_J13_set_dir>
	int b=*PIN1_J13_set_dir;
 28a:	82 e2       	ldi	r24, 0x22	; 34
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	9a 83       	std	Y+2, r25	; 0x02
	PIN1_J13_set_pull_mode(PORT_PULL_OFF);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 13 01 	call	0x226	; 0x226 <PIN1_J13_set_pull_mode>
	int c=*PIN1_J13_set_pull_mode;
 298:	83 e1       	ldi	r24, 0x13	; 19
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	8b 83       	std	Y+3, r24	; 0x03
 29e:	9c 83       	std	Y+4, r25	; 0x04
	//PIN1_J13_set_level(true);
	bool a= PIN1_J13_get_level();
 2a0:	0e 94 31 01 	call	0x262	; 0x262 <PIN1_J13_get_level>
 2a4:	8d 83       	std	Y+5, r24	; 0x05
	int d=*PIN1_J13_get_level;
 2a6:	81 e3       	ldi	r24, 0x31	; 49
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	8e 83       	std	Y+6, r24	; 0x06
 2ac:	9f 83       	std	Y+7, r25	; 0x07
	return a;
 2ae:	8d 81       	ldd	r24, Y+5	; 0x05
 2b0:	27 96       	adiw	r28, 0x07	; 7
 2b2:	cd bf       	out	0x3d, r28	; 61
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
 2c4:	80 e0       	ldi	r24, 0x00	; 0
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
 2d4:	80 e0       	ldi	r24, 0x00	; 0
}
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	08 95       	ret

000002dc <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
 2e4:	80 e0       	ldi	r24, 0x00	; 0
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	26 97       	sbiw	r28, 0x06	; 6
 2f6:	cd bf       	out	0x3d, r28	; 61
 2f8:	de bf       	out	0x3e, r29	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 2fa:	19 82       	std	Y+1, r1	; 0x01
 2fc:	12 c0       	rjmp	.+36     	; 0x322 <mcu_init+0x36>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	88 2f       	mov	r24, r24
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	80 5f       	subi	r24, 0xF0	; 240
 306:	9b 4f       	sbci	r25, 0xFB	; 251
 308:	29 81       	ldd	r18, Y+1	; 0x01
 30a:	22 2f       	mov	r18, r18
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	20 5f       	subi	r18, 0xF0	; 240
 310:	3b 4f       	sbci	r19, 0xFB	; 251
 312:	f9 01       	movw	r30, r18
 314:	20 81       	ld	r18, Z
 316:	28 60       	ori	r18, 0x08	; 8
 318:	fc 01       	movw	r30, r24
 31a:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	89 83       	std	Y+1, r24	; 0x01
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	88 30       	cpi	r24, 0x08	; 8
 326:	58 f3       	brcs	.-42     	; 0x2fe <mcu_init+0x12>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 328:	1a 82       	std	Y+2, r1	; 0x02
 32a:	12 c0       	rjmp	.+36     	; 0x350 <mcu_init+0x64>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	88 2f       	mov	r24, r24
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	80 5d       	subi	r24, 0xD0	; 208
 334:	9b 4f       	sbci	r25, 0xFB	; 251
 336:	2a 81       	ldd	r18, Y+2	; 0x02
 338:	22 2f       	mov	r18, r18
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	20 5d       	subi	r18, 0xD0	; 208
 33e:	3b 4f       	sbci	r19, 0xFB	; 251
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	28 60       	ori	r18, 0x08	; 8
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 34a:	8a 81       	ldd	r24, Y+2	; 0x02
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	8a 83       	std	Y+2, r24	; 0x02
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	88 30       	cpi	r24, 0x08	; 8
 354:	58 f3       	brcs	.-42     	; 0x32c <mcu_init+0x40>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 356:	1b 82       	std	Y+3, r1	; 0x03
 358:	12 c0       	rjmp	.+36     	; 0x37e <mcu_init+0x92>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	88 2f       	mov	r24, r24
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	80 5b       	subi	r24, 0xB0	; 176
 362:	9b 4f       	sbci	r25, 0xFB	; 251
 364:	2b 81       	ldd	r18, Y+3	; 0x03
 366:	22 2f       	mov	r18, r18
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	20 5b       	subi	r18, 0xB0	; 176
 36c:	3b 4f       	sbci	r19, 0xFB	; 251
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	28 60       	ori	r18, 0x08	; 8
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	8b 83       	std	Y+3, r24	; 0x03
 37e:	8b 81       	ldd	r24, Y+3	; 0x03
 380:	88 30       	cpi	r24, 0x08	; 8
 382:	58 f3       	brcs	.-42     	; 0x35a <mcu_init+0x6e>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 384:	1c 82       	std	Y+4, r1	; 0x04
 386:	12 c0       	rjmp	.+36     	; 0x3ac <mcu_init+0xc0>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	80 59       	subi	r24, 0x90	; 144
 390:	9b 4f       	sbci	r25, 0xFB	; 251
 392:	2c 81       	ldd	r18, Y+4	; 0x04
 394:	22 2f       	mov	r18, r18
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	20 59       	subi	r18, 0x90	; 144
 39a:	3b 4f       	sbci	r19, 0xFB	; 251
 39c:	f9 01       	movw	r30, r18
 39e:	20 81       	ld	r18, Z
 3a0:	28 60       	ori	r18, 0x08	; 8
 3a2:	fc 01       	movw	r30, r24
 3a4:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	8f 5f       	subi	r24, 0xFF	; 255
 3aa:	8c 83       	std	Y+4, r24	; 0x04
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	88 30       	cpi	r24, 0x08	; 8
 3b0:	58 f3       	brcs	.-42     	; 0x388 <mcu_init+0x9c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3b2:	1d 82       	std	Y+5, r1	; 0x05
 3b4:	12 c0       	rjmp	.+36     	; 0x3da <mcu_init+0xee>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 3b6:	8d 81       	ldd	r24, Y+5	; 0x05
 3b8:	88 2f       	mov	r24, r24
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	80 57       	subi	r24, 0x70	; 112
 3be:	9b 4f       	sbci	r25, 0xFB	; 251
 3c0:	2d 81       	ldd	r18, Y+5	; 0x05
 3c2:	22 2f       	mov	r18, r18
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	20 57       	subi	r18, 0x70	; 112
 3c8:	3b 4f       	sbci	r19, 0xFB	; 251
 3ca:	f9 01       	movw	r30, r18
 3cc:	20 81       	ld	r18, Z
 3ce:	28 60       	ori	r18, 0x08	; 8
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3d4:	8d 81       	ldd	r24, Y+5	; 0x05
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	8d 83       	std	Y+5, r24	; 0x05
 3da:	8d 81       	ldd	r24, Y+5	; 0x05
 3dc:	88 30       	cpi	r24, 0x08	; 8
 3de:	58 f3       	brcs	.-42     	; 0x3b6 <mcu_init+0xca>
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 3e0:	1e 82       	std	Y+6, r1	; 0x06
 3e2:	12 c0       	rjmp	.+36     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 3e4:	8e 81       	ldd	r24, Y+6	; 0x06
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	80 55       	subi	r24, 0x50	; 80
 3ec:	9b 4f       	sbci	r25, 0xFB	; 251
 3ee:	2e 81       	ldd	r18, Y+6	; 0x06
 3f0:	22 2f       	mov	r18, r18
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	20 55       	subi	r18, 0x50	; 80
 3f6:	3b 4f       	sbci	r19, 0xFB	; 251
 3f8:	f9 01       	movw	r30, r18
 3fa:	20 81       	ld	r18, Z
 3fc:	28 60       	ori	r18, 0x08	; 8
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTE + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 402:	8e 81       	ldd	r24, Y+6	; 0x06
 404:	8f 5f       	subi	r24, 0xFF	; 255
 406:	8e 83       	std	Y+6, r24	; 0x06
 408:	8e 81       	ldd	r24, Y+6	; 0x06
 40a:	88 30       	cpi	r24, 0x08	; 8
 40c:	58 f3       	brcs	.-42     	; 0x3e4 <mcu_init+0xf8>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 40e:	00 00       	nop
 410:	26 96       	adiw	r28, 0x06	; 6
 412:	cd bf       	out	0x3d, r28	; 61
 414:	de bf       	out	0x3e, r29	; 62
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 424:	0e 94 76 01 	call	0x2ec	; 0x2ec <mcu_init>

	/* PORT setting on PA2 */

	CLKCTRL_init();
 428:	0e 94 66 01 	call	0x2cc	; 0x2cc <CLKCTRL_init>

	CPUINT_init();
 42c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <CPUINT_init>

	SLPCTRL_init();
 430:	0e 94 20 02 	call	0x440	; 0x440 <SLPCTRL_init>

	BOD_init();
 434:	0e 94 5e 01 	call	0x2bc	; 0x2bc <BOD_init>
}
 438:	00 00       	nop
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
 448:	80 e0       	ldi	r24, 0x00	; 0
}
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
